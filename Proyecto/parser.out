Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CLONE
    __HALT_COMPILER
    DOT_DOT
    GOTO
    NAMESPACE
    CALLABLE
    EXTENDS
    FOREACH
    EVAL
    ENDIF
    VAR
    DECLARE
    INCLUDE_ONCE
    TRAIT
    MINUSEQUAL
    COMMENTS
    ISSET
    INSTEADOF
    INTERFACE
    STATIC
    PRINT
    EMPTY
    ENDFOREACH
    ENDSWITCH
    TRY
    REQUIRE_ONCE
    ENDWHILE
    ENDDECLARE
    CONTINUE
    CLOSETAGAL
    GLOBAL
    DOT
    COMMENTS_C99
    ENDFOR
    CATCH
    ARRAY
    INSTANCEOF
    PLUSEQUAL
    IMPLEMENTS
    LIST
    EXIT
    USE
    CONST
    DIE
    ABSTRACT
    UNSET
    XOR
    QUOTES
    AS
    HASHTAG
    APOSTROPHE
    THROW

Grammar

Rule 0     S' -> program
Rule 1     program -> OPENTAG declaration_list CLOSETAG
Rule 2     declaration_list -> declaration_list declaration
Rule 3     declaration_list -> declaration
Rule 4     declaration -> var_declaration
Rule 5     declaration -> fun_declaration
Rule 6     declaration -> area fun_declaration
Rule 7     declaration -> header_declaration
Rule 8     declaration -> class_declaration
Rule 9     declaration -> echo_stmt
Rule 10    declaration -> selection_stmt
Rule 11    declaration -> iteration_stmt
Rule 12    declaration -> typeclass
Rule 13    echo_stmt -> echo_stmt ECHO STRING SEMI
Rule 14    echo_stmt -> echo_stmt ECHO IDVAR SEMI
Rule 15    echo_stmt -> empty
Rule 16    echo_stmt -> echo_stmt ECHO NUM SEMI
Rule 17    echo_stmt -> echo_stmt ECHO boolean SEMI
Rule 18    echo_stmt -> echo_stmt ECHO fun_declaration SEMI
Rule 19    header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI
Rule 20    header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI
Rule 21    class_declaration -> area CLASS ID LBLOCK attribute RBLOCK
Rule 22    class_declaration -> CLASS ID LBLOCK attribute RBLOCK
Rule 23    attribute -> attribute area var_declaration
Rule 24    attribute -> area var_declaration
Rule 25    attribute -> attribute area fun_declaration
Rule 26    attribute -> area fun_declaration
Rule 27    area -> PRIVATE
Rule 28    area -> PUBLIC
Rule 29    area -> PROTECTED
Rule 30    var_declaration -> IDVAR SEMI var_declaration
Rule 31    var_declaration -> IDVAR SEMI
Rule 32    var_declaration -> TIMESTIMES IDVAR SEMI
Rule 33    var_declaration -> TIMESTIMES IDVAR SEMI var_declaration
Rule 34    var_declaration -> IDVAR EQUAL NUM SEMI var_declaration
Rule 35    var_declaration -> IDVAR EQUAL NUM SEMI
Rule 36    var_declaration -> IDVAR EQUAL boolean SEMI var_declaration
Rule 37    var_declaration -> IDVAR EQUAL boolean SEMI
Rule 38    var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration
Rule 39    var_declaration -> IDVAR EQUAL IDVAR SEMI
Rule 40    var_declaration -> AMPERSANT IDVAR SEMI var_declaration
Rule 41    var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
Rule 42    var_declaration -> AMPERSANT IDVAR SEMI
Rule 43    var_declaration -> IDVAR EQUAL simple_expression SEMI
Rule 44    fun_declaration -> FUNCTION ID LPAREN params RPAREN
Rule 45    fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt
Rule 46    params -> param_list
Rule 47    params -> empty
Rule 48    param_list -> param_list COMMA param_list
Rule 49    param_list -> param
Rule 50    param -> IDVAR
Rule 51    param -> IDVAR LBRACKET RBRACKET
Rule 52    compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
Rule 53    local_declarations -> local_declarations var_declaration
Rule 54    local_declarations -> empty
Rule 55    statement_list -> statement_list statement
Rule 56    statement_list -> empty
Rule 57    statement -> expression_stmt
Rule 58    statement -> compount_stmt
Rule 59    statement -> selection_stmt
Rule 60    statement -> iteration_stmt
Rule 61    statement -> return_stmt
Rule 62    statement -> class_declaration
Rule 63    statement -> echo_stmt
Rule 64    expression_stmt -> expression SEMI
Rule 65    selection_stmt -> IF LPAREN expression RPAREN statement
Rule 66    selection_stmt -> IF LPAREN expression RPAREN statement selection
Rule 67    selection -> ELSE statement
Rule 68    selection -> ELSEIF statement selection
Rule 69    selection_stmt -> SWITCH LPAREN var RPAREN statement
Rule 70    selection_stmt -> CASE NUM COLON statement BREAK SEMI
Rule 71    selection_stmt -> DEFAULT COLON statement BREAK SEMI
Rule 72    iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
Rule 73    iteration_stmt -> WHILE LPAREN expression RPAREN statement
Rule 74    iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
Rule 75    return_stmt -> RETURN SEMI
Rule 76    return_stmt -> RETURN expression SEMI
Rule 77    expression -> var EQUAL expression
Rule 78    expression -> simple_expression
Rule 79    expression -> var EQUAL AMPERSANT IDVAR
Rule 80    expression -> expression AND expression
Rule 81    expression -> expression OR expression
Rule 82    var -> IDVAR
Rule 83    var -> IDVAR LBRACKET expression RBRACKET
Rule 84    simple_expression -> additive_expression relop additive_expression
Rule 85    simple_expression -> additive_expression
Rule 86    relop -> LESS
Rule 87    relop -> LESSEQUAL
Rule 88    relop -> GREATER
Rule 89    relop -> GREATEREQUAL
Rule 90    relop -> DEQUAL
Rule 91    relop -> DISTINT
Rule 92    relop -> ISEQUAL
Rule 93    additive_expression -> additive_expression addop term
Rule 94    additive_expression -> term
Rule 95    additive_expression -> term MINUSMINUS
Rule 96    additive_expression -> term PLUSPLUS
Rule 97    addop -> PLUS
Rule 98    addop -> MINUS
Rule 99    term -> term mulop factor
Rule 100   term -> factor
Rule 101   mulop -> TIMES
Rule 102   mulop -> DIVIDE
Rule 103   factor -> LPAREN expression RPAREN
Rule 104   factor -> var
Rule 105   factor -> NUM
Rule 106   factor -> boolean
Rule 107   factor -> IDVAR LPAREN args RPAREN
Rule 108   args -> args_list
Rule 109   args -> empty
Rule 110   args -> VOID
Rule 111   args_list -> args_list COMMA expression
Rule 112   args_list -> expression
Rule 113   boolean -> TRUE
Rule 114   boolean -> FALSE
Rule 115   typeclass -> ID IDVAR EQUAL NEW constructor SEMI
Rule 116   constructor -> ID LPAREN RPAREN
Rule 117   constructor -> ID LPAREN args RPAREN
Rule 118   empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 
AMPERSANT            : 40 41 42 79
AND                  : 80
APOSTROPHE           : 
ARRAY                : 
AS                   : 
BREAK                : 70 71
CALLABLE             : 
CASE                 : 70
CATCH                : 
CLASS                : 21 22
CLONE                : 
CLOSETAG             : 1
CLOSETAGAL           : 
COLON                : 70 71
COMMA                : 48 111
COMMENTS             : 
COMMENTS_C99         : 
CONST                : 
CONTINUE             : 
DECLARE              : 
DEFAULT              : 71
DEQUAL               : 90
DIE                  : 
DISTINT              : 91
DIVIDE               : 102
DO                   : 74
DOT                  : 
DOT_DOT              : 
ECHO                 : 13 14 16 17 18
ELSE                 : 67
ELSEIF               : 68
EMPTY                : 
ENDDECLARE           : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
EQUAL                : 34 35 36 37 38 39 41 43 77 79 115
EVAL                 : 
EXIT                 : 
EXTENDS              : 
FALSE                : 114
FOR                  : 72
FOREACH              : 
FUNCTION             : 44 45
GLOBAL               : 
GOTO                 : 
GREATER              : 88
GREATEREQUAL         : 89
HASHTAG              : 
ID                   : 21 22 44 45 115 116 117
IDVAR                : 14 30 31 32 33 34 35 36 37 38 38 39 39 40 41 41 42 43 50 51 79 82 83 107 115
IF                   : 65 66
IMPLEMENTS           : 
INCLUDE              : 20
INCLUDE_ONCE         : 
INSTANCEOF           : 
INSTEADOF            : 
INTERFACE            : 
ISEQUAL              : 92
ISSET                : 
LBLOCK               : 21 22 52 74
LBRACKET             : 51 83
LESS                 : 86
LESSEQUAL            : 87
LIST                 : 
LPAREN               : 19 20 44 45 65 66 69 72 73 74 103 107 116 117
MINUS                : 98
MINUSEQUAL           : 
MINUSMINUS           : 95
NAMESPACE            : 
NEW                  : 115
NUM                  : 16 34 35 70 105
OPENTAG              : 1
OR                   : 81
PLUS                 : 97
PLUSEQUAL            : 
PLUSPLUS             : 96
PRINT                : 
PRIVATE              : 27
PROTECTED            : 29
PUBLIC               : 28
QUOTES               : 
RBLOCK               : 21 22 52 74
RBRACKET             : 51 83
REQUIRE              : 19
REQUIRE_ONCE         : 
RETURN               : 75 76
RPAREN               : 19 20 44 45 65 66 69 72 73 74 103 107 116 117
SEMI                 : 13 14 16 17 18 19 20 30 31 32 33 34 35 36 37 38 39 40 41 42 43 64 70 71 72 72 74 75 76 115
STATIC               : 
STRING               : 13 19 20
SWITCH               : 69
THROW                : 
TIMES                : 101
TIMESTIMES           : 32 33
TRAIT                : 
TRUE                 : 113
TRY                  : 
UNSET                : 
USE                  : 
VAR                  : 
VOID                 : 110
WHILE                : 73 74
XOR                  : 
__HALT_COMPILER      : 
error                : 

Nonterminals, with rules where they appear

additive_expression  : 72 84 84 85 93
addop                : 93
area                 : 6 21 23 24 25 26
args                 : 107 117
args_list            : 108 111
attribute            : 21 22 23 25
boolean              : 17 36 37 106
class_declaration    : 8 62
compount_stmt        : 45 58
constructor          : 115
declaration          : 2 3
declaration_list     : 1 2
echo_stmt            : 9 13 14 16 17 18 52 52 52 63
empty                : 15 47 54 56 109
expression           : 64 65 66 72 73 74 76 77 80 80 81 81 83 103 111 112
expression_stmt      : 57
factor               : 99 100
fun_declaration      : 5 6 18 25 26
header_declaration   : 7
iteration_stmt       : 11 60
local_declarations   : 52 53
mulop                : 99
param                : 49
param_list           : 46 48 48
params               : 44 45
program              : 0
relop                : 84
return_stmt          : 61
selection            : 66 68
selection_stmt       : 10 41 59
simple_expression    : 43 78
statement            : 55 65 66 67 68 69 70 71 72 73 74
statement_list       : 52 55
term                 : 93 94 95 96 99
typeclass            : 12
var                  : 69 77 79 104
var_declaration      : 4 23 24 30 33 34 36 38 40 53 72

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . OPENTAG declaration_list CLOSETAG

    OPENTAG         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> OPENTAG . declaration_list CLOSETAG
    (2) declaration_list -> . declaration_list declaration
    (3) declaration_list -> . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) declaration -> . area fun_declaration
    (7) declaration -> . header_declaration
    (8) declaration -> . class_declaration
    (9) declaration -> . echo_stmt
    (10) declaration -> . selection_stmt
    (11) declaration -> . iteration_stmt
    (12) declaration -> . typeclass
    (30) var_declaration -> . IDVAR SEMI var_declaration
    (31) var_declaration -> . IDVAR SEMI
    (32) var_declaration -> . TIMESTIMES IDVAR SEMI
    (33) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUM SEMI
    (36) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMI
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (40) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMI
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMI
    (44) fun_declaration -> . FUNCTION ID LPAREN params RPAREN
    (45) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (19) header_declaration -> . REQUIRE LPAREN STRING RPAREN SEMI
    (20) header_declaration -> . INCLUDE LPAREN STRING RPAREN SEMI
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (15) echo_stmt -> . empty
    (16) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (17) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (18) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (115) typeclass -> . ID IDVAR EQUAL NEW constructor SEMI
    (118) empty -> .

  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TIMESTIMES resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    IDVAR           shift and go to state 16
    TIMESTIMES      shift and go to state 7
    AMPERSANT       shift and go to state 21
    FUNCTION        shift and go to state 3
    PRIVATE         shift and go to state 12
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 31
    REQUIRE         shift and go to state 6
    INCLUDE         shift and go to state 25
    CLASS           shift and go to state 18
    IF              shift and go to state 27
    SWITCH          shift and go to state 15
    CASE            shift and go to state 10
    DEFAULT         shift and go to state 5
    FOR             shift and go to state 22
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    ID              shift and go to state 13
    ECHO            reduce using rule 118 (empty -> .)
    CLOSETAG        reduce using rule 118 (empty -> .)

  ! IDVAR           [ reduce using rule 118 (empty -> .) ]
  ! TIMESTIMES      [ reduce using rule 118 (empty -> .) ]
  ! AMPERSANT       [ reduce using rule 118 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 118 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 118 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 118 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 118 (empty -> .) ]
  ! REQUIRE         [ reduce using rule 118 (empty -> .) ]
  ! INCLUDE         [ reduce using rule 118 (empty -> .) ]
  ! CLASS           [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! SWITCH          [ reduce using rule 118 (empty -> .) ]
  ! CASE            [ reduce using rule 118 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! DO              [ reduce using rule 118 (empty -> .) ]
  ! ID              [ reduce using rule 118 (empty -> .) ]

    iteration_stmt                 shift and go to state 9
    area                           shift and go to state 11
    var_declaration                shift and go to state 14
    selection_stmt                 shift and go to state 17
    empty                          shift and go to state 19
    header_declaration             shift and go to state 20
    declaration                    shift and go to state 23
    typeclass                      shift and go to state 24
    echo_stmt                      shift and go to state 26
    declaration_list               shift and go to state 28
    class_declaration              shift and go to state 29
    fun_declaration                shift and go to state 30

state 3

    (44) fun_declaration -> FUNCTION . ID LPAREN params RPAREN
    (45) fun_declaration -> FUNCTION . ID LPAREN params RPAREN compount_stmt

    ID              shift and go to state 33


state 4

    (74) iteration_stmt -> DO . LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN

    LBLOCK          shift and go to state 34


state 5

    (71) selection_stmt -> DEFAULT . COLON statement BREAK SEMI

    COLON           shift and go to state 35


state 6

    (19) header_declaration -> REQUIRE . LPAREN STRING RPAREN SEMI

    LPAREN          shift and go to state 36


state 7

    (32) var_declaration -> TIMESTIMES . IDVAR SEMI
    (33) var_declaration -> TIMESTIMES . IDVAR SEMI var_declaration

    IDVAR           shift and go to state 37


state 8

    (73) iteration_stmt -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 38


state 9

    (11) declaration -> iteration_stmt .

    CLOSETAG        reduce using rule 11 (declaration -> iteration_stmt .)
    IDVAR           reduce using rule 11 (declaration -> iteration_stmt .)
    TIMESTIMES      reduce using rule 11 (declaration -> iteration_stmt .)
    AMPERSANT       reduce using rule 11 (declaration -> iteration_stmt .)
    FUNCTION        reduce using rule 11 (declaration -> iteration_stmt .)
    PRIVATE         reduce using rule 11 (declaration -> iteration_stmt .)
    PUBLIC          reduce using rule 11 (declaration -> iteration_stmt .)
    PROTECTED       reduce using rule 11 (declaration -> iteration_stmt .)
    REQUIRE         reduce using rule 11 (declaration -> iteration_stmt .)
    INCLUDE         reduce using rule 11 (declaration -> iteration_stmt .)
    CLASS           reduce using rule 11 (declaration -> iteration_stmt .)
    IF              reduce using rule 11 (declaration -> iteration_stmt .)
    SWITCH          reduce using rule 11 (declaration -> iteration_stmt .)
    CASE            reduce using rule 11 (declaration -> iteration_stmt .)
    DEFAULT         reduce using rule 11 (declaration -> iteration_stmt .)
    FOR             reduce using rule 11 (declaration -> iteration_stmt .)
    WHILE           reduce using rule 11 (declaration -> iteration_stmt .)
    DO              reduce using rule 11 (declaration -> iteration_stmt .)
    ID              reduce using rule 11 (declaration -> iteration_stmt .)
    ECHO            reduce using rule 11 (declaration -> iteration_stmt .)


state 10

    (70) selection_stmt -> CASE . NUM COLON statement BREAK SEMI

    NUM             shift and go to state 39


state 11

    (6) declaration -> area . fun_declaration
    (21) class_declaration -> area . CLASS ID LBLOCK attribute RBLOCK
    (44) fun_declaration -> . FUNCTION ID LPAREN params RPAREN
    (45) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt

    CLASS           shift and go to state 40
    FUNCTION        shift and go to state 3

    fun_declaration                shift and go to state 41

state 12

    (27) area -> PRIVATE .

    CLASS           reduce using rule 27 (area -> PRIVATE .)
    IDVAR           reduce using rule 27 (area -> PRIVATE .)
    TIMESTIMES      reduce using rule 27 (area -> PRIVATE .)
    AMPERSANT       reduce using rule 27 (area -> PRIVATE .)
    FUNCTION        reduce using rule 27 (area -> PRIVATE .)


state 13

    (115) typeclass -> ID . IDVAR EQUAL NEW constructor SEMI

    IDVAR           shift and go to state 42


state 14

    (4) declaration -> var_declaration .

    CLOSETAG        reduce using rule 4 (declaration -> var_declaration .)
    IDVAR           reduce using rule 4 (declaration -> var_declaration .)
    TIMESTIMES      reduce using rule 4 (declaration -> var_declaration .)
    AMPERSANT       reduce using rule 4 (declaration -> var_declaration .)
    FUNCTION        reduce using rule 4 (declaration -> var_declaration .)
    PRIVATE         reduce using rule 4 (declaration -> var_declaration .)
    PUBLIC          reduce using rule 4 (declaration -> var_declaration .)
    PROTECTED       reduce using rule 4 (declaration -> var_declaration .)
    REQUIRE         reduce using rule 4 (declaration -> var_declaration .)
    INCLUDE         reduce using rule 4 (declaration -> var_declaration .)
    CLASS           reduce using rule 4 (declaration -> var_declaration .)
    IF              reduce using rule 4 (declaration -> var_declaration .)
    SWITCH          reduce using rule 4 (declaration -> var_declaration .)
    CASE            reduce using rule 4 (declaration -> var_declaration .)
    DEFAULT         reduce using rule 4 (declaration -> var_declaration .)
    FOR             reduce using rule 4 (declaration -> var_declaration .)
    WHILE           reduce using rule 4 (declaration -> var_declaration .)
    DO              reduce using rule 4 (declaration -> var_declaration .)
    ID              reduce using rule 4 (declaration -> var_declaration .)
    ECHO            reduce using rule 4 (declaration -> var_declaration .)


state 15

    (69) selection_stmt -> SWITCH . LPAREN var RPAREN statement

    LPAREN          shift and go to state 43


state 16

    (30) var_declaration -> IDVAR . SEMI var_declaration
    (31) var_declaration -> IDVAR . SEMI
    (34) var_declaration -> IDVAR . EQUAL NUM SEMI var_declaration
    (35) var_declaration -> IDVAR . EQUAL NUM SEMI
    (36) var_declaration -> IDVAR . EQUAL boolean SEMI var_declaration
    (37) var_declaration -> IDVAR . EQUAL boolean SEMI
    (38) var_declaration -> IDVAR . EQUAL IDVAR SEMI var_declaration
    (39) var_declaration -> IDVAR . EQUAL IDVAR SEMI
    (43) var_declaration -> IDVAR . EQUAL simple_expression SEMI

    SEMI            shift and go to state 44
    EQUAL           shift and go to state 45


state 17

    (10) declaration -> selection_stmt .

    CLOSETAG        reduce using rule 10 (declaration -> selection_stmt .)
    IDVAR           reduce using rule 10 (declaration -> selection_stmt .)
    TIMESTIMES      reduce using rule 10 (declaration -> selection_stmt .)
    AMPERSANT       reduce using rule 10 (declaration -> selection_stmt .)
    FUNCTION        reduce using rule 10 (declaration -> selection_stmt .)
    PRIVATE         reduce using rule 10 (declaration -> selection_stmt .)
    PUBLIC          reduce using rule 10 (declaration -> selection_stmt .)
    PROTECTED       reduce using rule 10 (declaration -> selection_stmt .)
    REQUIRE         reduce using rule 10 (declaration -> selection_stmt .)
    INCLUDE         reduce using rule 10 (declaration -> selection_stmt .)
    CLASS           reduce using rule 10 (declaration -> selection_stmt .)
    IF              reduce using rule 10 (declaration -> selection_stmt .)
    SWITCH          reduce using rule 10 (declaration -> selection_stmt .)
    CASE            reduce using rule 10 (declaration -> selection_stmt .)
    DEFAULT         reduce using rule 10 (declaration -> selection_stmt .)
    FOR             reduce using rule 10 (declaration -> selection_stmt .)
    WHILE           reduce using rule 10 (declaration -> selection_stmt .)
    DO              reduce using rule 10 (declaration -> selection_stmt .)
    ID              reduce using rule 10 (declaration -> selection_stmt .)
    ECHO            reduce using rule 10 (declaration -> selection_stmt .)


state 18

    (22) class_declaration -> CLASS . ID LBLOCK attribute RBLOCK

    ID              shift and go to state 46


state 19

    (15) echo_stmt -> empty .

    ECHO            reduce using rule 15 (echo_stmt -> empty .)
    ELSE            reduce using rule 15 (echo_stmt -> empty .)
    ELSEIF          reduce using rule 15 (echo_stmt -> empty .)
    LBLOCK          reduce using rule 15 (echo_stmt -> empty .)
    IF              reduce using rule 15 (echo_stmt -> empty .)
    SWITCH          reduce using rule 15 (echo_stmt -> empty .)
    CASE            reduce using rule 15 (echo_stmt -> empty .)
    DEFAULT         reduce using rule 15 (echo_stmt -> empty .)
    FOR             reduce using rule 15 (echo_stmt -> empty .)
    WHILE           reduce using rule 15 (echo_stmt -> empty .)
    DO              reduce using rule 15 (echo_stmt -> empty .)
    RETURN          reduce using rule 15 (echo_stmt -> empty .)
    CLASS           reduce using rule 15 (echo_stmt -> empty .)
    PRIVATE         reduce using rule 15 (echo_stmt -> empty .)
    PUBLIC          reduce using rule 15 (echo_stmt -> empty .)
    PROTECTED       reduce using rule 15 (echo_stmt -> empty .)
    IDVAR           reduce using rule 15 (echo_stmt -> empty .)
    LPAREN          reduce using rule 15 (echo_stmt -> empty .)
    NUM             reduce using rule 15 (echo_stmt -> empty .)
    TRUE            reduce using rule 15 (echo_stmt -> empty .)
    FALSE           reduce using rule 15 (echo_stmt -> empty .)
    RBLOCK          reduce using rule 15 (echo_stmt -> empty .)
    SEMI            reduce using rule 15 (echo_stmt -> empty .)
    TIMESTIMES      reduce using rule 15 (echo_stmt -> empty .)
    AMPERSANT       reduce using rule 15 (echo_stmt -> empty .)
    BREAK           reduce using rule 15 (echo_stmt -> empty .)
    CLOSETAG        reduce using rule 15 (echo_stmt -> empty .)
    FUNCTION        reduce using rule 15 (echo_stmt -> empty .)
    REQUIRE         reduce using rule 15 (echo_stmt -> empty .)
    INCLUDE         reduce using rule 15 (echo_stmt -> empty .)
    ID              reduce using rule 15 (echo_stmt -> empty .)


state 20

    (7) declaration -> header_declaration .

    CLOSETAG        reduce using rule 7 (declaration -> header_declaration .)
    IDVAR           reduce using rule 7 (declaration -> header_declaration .)
    TIMESTIMES      reduce using rule 7 (declaration -> header_declaration .)
    AMPERSANT       reduce using rule 7 (declaration -> header_declaration .)
    FUNCTION        reduce using rule 7 (declaration -> header_declaration .)
    PRIVATE         reduce using rule 7 (declaration -> header_declaration .)
    PUBLIC          reduce using rule 7 (declaration -> header_declaration .)
    PROTECTED       reduce using rule 7 (declaration -> header_declaration .)
    REQUIRE         reduce using rule 7 (declaration -> header_declaration .)
    INCLUDE         reduce using rule 7 (declaration -> header_declaration .)
    CLASS           reduce using rule 7 (declaration -> header_declaration .)
    IF              reduce using rule 7 (declaration -> header_declaration .)
    SWITCH          reduce using rule 7 (declaration -> header_declaration .)
    CASE            reduce using rule 7 (declaration -> header_declaration .)
    DEFAULT         reduce using rule 7 (declaration -> header_declaration .)
    FOR             reduce using rule 7 (declaration -> header_declaration .)
    WHILE           reduce using rule 7 (declaration -> header_declaration .)
    DO              reduce using rule 7 (declaration -> header_declaration .)
    ID              reduce using rule 7 (declaration -> header_declaration .)
    ECHO            reduce using rule 7 (declaration -> header_declaration .)


state 21

    (40) var_declaration -> AMPERSANT . IDVAR SEMI var_declaration
    (41) var_declaration -> AMPERSANT . IDVAR EQUAL IDVAR SEMI selection_stmt
    (42) var_declaration -> AMPERSANT . IDVAR SEMI

    IDVAR           shift and go to state 47


state 22

    (72) iteration_stmt -> FOR . LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement

    LPAREN          shift and go to state 48


state 23

    (3) declaration_list -> declaration .

    CLOSETAG        reduce using rule 3 (declaration_list -> declaration .)
    IDVAR           reduce using rule 3 (declaration_list -> declaration .)
    TIMESTIMES      reduce using rule 3 (declaration_list -> declaration .)
    AMPERSANT       reduce using rule 3 (declaration_list -> declaration .)
    FUNCTION        reduce using rule 3 (declaration_list -> declaration .)
    PRIVATE         reduce using rule 3 (declaration_list -> declaration .)
    PUBLIC          reduce using rule 3 (declaration_list -> declaration .)
    PROTECTED       reduce using rule 3 (declaration_list -> declaration .)
    REQUIRE         reduce using rule 3 (declaration_list -> declaration .)
    INCLUDE         reduce using rule 3 (declaration_list -> declaration .)
    CLASS           reduce using rule 3 (declaration_list -> declaration .)
    IF              reduce using rule 3 (declaration_list -> declaration .)
    SWITCH          reduce using rule 3 (declaration_list -> declaration .)
    CASE            reduce using rule 3 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 3 (declaration_list -> declaration .)
    FOR             reduce using rule 3 (declaration_list -> declaration .)
    WHILE           reduce using rule 3 (declaration_list -> declaration .)
    DO              reduce using rule 3 (declaration_list -> declaration .)
    ID              reduce using rule 3 (declaration_list -> declaration .)
    ECHO            reduce using rule 3 (declaration_list -> declaration .)


state 24

    (12) declaration -> typeclass .

    CLOSETAG        reduce using rule 12 (declaration -> typeclass .)
    IDVAR           reduce using rule 12 (declaration -> typeclass .)
    TIMESTIMES      reduce using rule 12 (declaration -> typeclass .)
    AMPERSANT       reduce using rule 12 (declaration -> typeclass .)
    FUNCTION        reduce using rule 12 (declaration -> typeclass .)
    PRIVATE         reduce using rule 12 (declaration -> typeclass .)
    PUBLIC          reduce using rule 12 (declaration -> typeclass .)
    PROTECTED       reduce using rule 12 (declaration -> typeclass .)
    REQUIRE         reduce using rule 12 (declaration -> typeclass .)
    INCLUDE         reduce using rule 12 (declaration -> typeclass .)
    CLASS           reduce using rule 12 (declaration -> typeclass .)
    IF              reduce using rule 12 (declaration -> typeclass .)
    SWITCH          reduce using rule 12 (declaration -> typeclass .)
    CASE            reduce using rule 12 (declaration -> typeclass .)
    DEFAULT         reduce using rule 12 (declaration -> typeclass .)
    FOR             reduce using rule 12 (declaration -> typeclass .)
    WHILE           reduce using rule 12 (declaration -> typeclass .)
    DO              reduce using rule 12 (declaration -> typeclass .)
    ID              reduce using rule 12 (declaration -> typeclass .)
    ECHO            reduce using rule 12 (declaration -> typeclass .)


state 25

    (20) header_declaration -> INCLUDE . LPAREN STRING RPAREN SEMI

    LPAREN          shift and go to state 49


state 26

    (9) declaration -> echo_stmt .
    (13) echo_stmt -> echo_stmt . ECHO STRING SEMI
    (14) echo_stmt -> echo_stmt . ECHO IDVAR SEMI
    (16) echo_stmt -> echo_stmt . ECHO NUM SEMI
    (17) echo_stmt -> echo_stmt . ECHO boolean SEMI
    (18) echo_stmt -> echo_stmt . ECHO fun_declaration SEMI

  ! shift/reduce conflict for ECHO resolved as shift
    CLOSETAG        reduce using rule 9 (declaration -> echo_stmt .)
    IDVAR           reduce using rule 9 (declaration -> echo_stmt .)
    TIMESTIMES      reduce using rule 9 (declaration -> echo_stmt .)
    AMPERSANT       reduce using rule 9 (declaration -> echo_stmt .)
    FUNCTION        reduce using rule 9 (declaration -> echo_stmt .)
    PRIVATE         reduce using rule 9 (declaration -> echo_stmt .)
    PUBLIC          reduce using rule 9 (declaration -> echo_stmt .)
    PROTECTED       reduce using rule 9 (declaration -> echo_stmt .)
    REQUIRE         reduce using rule 9 (declaration -> echo_stmt .)
    INCLUDE         reduce using rule 9 (declaration -> echo_stmt .)
    CLASS           reduce using rule 9 (declaration -> echo_stmt .)
    IF              reduce using rule 9 (declaration -> echo_stmt .)
    SWITCH          reduce using rule 9 (declaration -> echo_stmt .)
    CASE            reduce using rule 9 (declaration -> echo_stmt .)
    DEFAULT         reduce using rule 9 (declaration -> echo_stmt .)
    FOR             reduce using rule 9 (declaration -> echo_stmt .)
    WHILE           reduce using rule 9 (declaration -> echo_stmt .)
    DO              reduce using rule 9 (declaration -> echo_stmt .)
    ID              reduce using rule 9 (declaration -> echo_stmt .)
    ECHO            shift and go to state 50

  ! ECHO            [ reduce using rule 9 (declaration -> echo_stmt .) ]


state 27

    (65) selection_stmt -> IF . LPAREN expression RPAREN statement
    (66) selection_stmt -> IF . LPAREN expression RPAREN statement selection

    LPAREN          shift and go to state 51


state 28

    (1) program -> OPENTAG declaration_list . CLOSETAG
    (2) declaration_list -> declaration_list . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) declaration -> . area fun_declaration
    (7) declaration -> . header_declaration
    (8) declaration -> . class_declaration
    (9) declaration -> . echo_stmt
    (10) declaration -> . selection_stmt
    (11) declaration -> . iteration_stmt
    (12) declaration -> . typeclass
    (30) var_declaration -> . IDVAR SEMI var_declaration
    (31) var_declaration -> . IDVAR SEMI
    (32) var_declaration -> . TIMESTIMES IDVAR SEMI
    (33) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUM SEMI
    (36) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMI
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (40) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMI
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMI
    (44) fun_declaration -> . FUNCTION ID LPAREN params RPAREN
    (45) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (19) header_declaration -> . REQUIRE LPAREN STRING RPAREN SEMI
    (20) header_declaration -> . INCLUDE LPAREN STRING RPAREN SEMI
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (15) echo_stmt -> . empty
    (16) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (17) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (18) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (115) typeclass -> . ID IDVAR EQUAL NEW constructor SEMI
    (118) empty -> .

  ! shift/reduce conflict for CLOSETAG resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TIMESTIMES resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CLOSETAG        shift and go to state 52
    IDVAR           shift and go to state 16
    TIMESTIMES      shift and go to state 7
    AMPERSANT       shift and go to state 21
    FUNCTION        shift and go to state 3
    PRIVATE         shift and go to state 12
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 31
    REQUIRE         shift and go to state 6
    INCLUDE         shift and go to state 25
    CLASS           shift and go to state 18
    IF              shift and go to state 27
    SWITCH          shift and go to state 15
    CASE            shift and go to state 10
    DEFAULT         shift and go to state 5
    FOR             shift and go to state 22
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    ID              shift and go to state 13
    ECHO            reduce using rule 118 (empty -> .)

  ! CLOSETAG        [ reduce using rule 118 (empty -> .) ]
  ! IDVAR           [ reduce using rule 118 (empty -> .) ]
  ! TIMESTIMES      [ reduce using rule 118 (empty -> .) ]
  ! AMPERSANT       [ reduce using rule 118 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 118 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 118 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 118 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 118 (empty -> .) ]
  ! REQUIRE         [ reduce using rule 118 (empty -> .) ]
  ! INCLUDE         [ reduce using rule 118 (empty -> .) ]
  ! CLASS           [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! SWITCH          [ reduce using rule 118 (empty -> .) ]
  ! CASE            [ reduce using rule 118 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! DO              [ reduce using rule 118 (empty -> .) ]
  ! ID              [ reduce using rule 118 (empty -> .) ]

    iteration_stmt                 shift and go to state 9
    area                           shift and go to state 11
    var_declaration                shift and go to state 14
    selection_stmt                 shift and go to state 17
    empty                          shift and go to state 19
    header_declaration             shift and go to state 20
    declaration                    shift and go to state 53
    typeclass                      shift and go to state 24
    echo_stmt                      shift and go to state 26
    class_declaration              shift and go to state 29
    fun_declaration                shift and go to state 30

state 29

    (8) declaration -> class_declaration .

    CLOSETAG        reduce using rule 8 (declaration -> class_declaration .)
    IDVAR           reduce using rule 8 (declaration -> class_declaration .)
    TIMESTIMES      reduce using rule 8 (declaration -> class_declaration .)
    AMPERSANT       reduce using rule 8 (declaration -> class_declaration .)
    FUNCTION        reduce using rule 8 (declaration -> class_declaration .)
    PRIVATE         reduce using rule 8 (declaration -> class_declaration .)
    PUBLIC          reduce using rule 8 (declaration -> class_declaration .)
    PROTECTED       reduce using rule 8 (declaration -> class_declaration .)
    REQUIRE         reduce using rule 8 (declaration -> class_declaration .)
    INCLUDE         reduce using rule 8 (declaration -> class_declaration .)
    CLASS           reduce using rule 8 (declaration -> class_declaration .)
    IF              reduce using rule 8 (declaration -> class_declaration .)
    SWITCH          reduce using rule 8 (declaration -> class_declaration .)
    CASE            reduce using rule 8 (declaration -> class_declaration .)
    DEFAULT         reduce using rule 8 (declaration -> class_declaration .)
    FOR             reduce using rule 8 (declaration -> class_declaration .)
    WHILE           reduce using rule 8 (declaration -> class_declaration .)
    DO              reduce using rule 8 (declaration -> class_declaration .)
    ID              reduce using rule 8 (declaration -> class_declaration .)
    ECHO            reduce using rule 8 (declaration -> class_declaration .)


state 30

    (5) declaration -> fun_declaration .

    CLOSETAG        reduce using rule 5 (declaration -> fun_declaration .)
    IDVAR           reduce using rule 5 (declaration -> fun_declaration .)
    TIMESTIMES      reduce using rule 5 (declaration -> fun_declaration .)
    AMPERSANT       reduce using rule 5 (declaration -> fun_declaration .)
    FUNCTION        reduce using rule 5 (declaration -> fun_declaration .)
    PRIVATE         reduce using rule 5 (declaration -> fun_declaration .)
    PUBLIC          reduce using rule 5 (declaration -> fun_declaration .)
    PROTECTED       reduce using rule 5 (declaration -> fun_declaration .)
    REQUIRE         reduce using rule 5 (declaration -> fun_declaration .)
    INCLUDE         reduce using rule 5 (declaration -> fun_declaration .)
    CLASS           reduce using rule 5 (declaration -> fun_declaration .)
    IF              reduce using rule 5 (declaration -> fun_declaration .)
    SWITCH          reduce using rule 5 (declaration -> fun_declaration .)
    CASE            reduce using rule 5 (declaration -> fun_declaration .)
    DEFAULT         reduce using rule 5 (declaration -> fun_declaration .)
    FOR             reduce using rule 5 (declaration -> fun_declaration .)
    WHILE           reduce using rule 5 (declaration -> fun_declaration .)
    DO              reduce using rule 5 (declaration -> fun_declaration .)
    ID              reduce using rule 5 (declaration -> fun_declaration .)
    ECHO            reduce using rule 5 (declaration -> fun_declaration .)


state 31

    (29) area -> PROTECTED .

    CLASS           reduce using rule 29 (area -> PROTECTED .)
    IDVAR           reduce using rule 29 (area -> PROTECTED .)
    TIMESTIMES      reduce using rule 29 (area -> PROTECTED .)
    AMPERSANT       reduce using rule 29 (area -> PROTECTED .)
    FUNCTION        reduce using rule 29 (area -> PROTECTED .)


state 32

    (28) area -> PUBLIC .

    CLASS           reduce using rule 28 (area -> PUBLIC .)
    IDVAR           reduce using rule 28 (area -> PUBLIC .)
    TIMESTIMES      reduce using rule 28 (area -> PUBLIC .)
    AMPERSANT       reduce using rule 28 (area -> PUBLIC .)
    FUNCTION        reduce using rule 28 (area -> PUBLIC .)


state 33

    (44) fun_declaration -> FUNCTION ID . LPAREN params RPAREN
    (45) fun_declaration -> FUNCTION ID . LPAREN params RPAREN compount_stmt

    LPAREN          shift and go to state 54


state 34

    (74) iteration_stmt -> DO LBLOCK . statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (57) statement -> . expression_stmt
    (58) statement -> . compount_stmt
    (59) statement -> . selection_stmt
    (60) statement -> . iteration_stmt
    (61) statement -> . return_stmt
    (62) statement -> . class_declaration
    (63) statement -> . echo_stmt
    (64) expression_stmt -> . expression SEMI
    (52) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (75) return_stmt -> . RETURN SEMI
    (76) return_stmt -> . RETURN expression SEMI
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (15) echo_stmt -> . empty
    (16) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (17) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (18) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (118) empty -> .
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    LBLOCK          shift and go to state 57
    IF              shift and go to state 27
    SWITCH          shift and go to state 15
    CASE            shift and go to state 10
    DEFAULT         shift and go to state 5
    FOR             shift and go to state 22
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    RETURN          shift and go to state 55
    CLASS           shift and go to state 18
    PRIVATE         shift and go to state 12
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 31
    ECHO            reduce using rule 118 (empty -> .)
    SEMI            reduce using rule 118 (empty -> .)
    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

    boolean                        shift and go to state 75
    return_stmt                    shift and go to state 56
    simple_expression              shift and go to state 58
    additive_expression            shift and go to state 60
    area                           shift and go to state 61
    expression_stmt                shift and go to state 63
    statement                      shift and go to state 64
    factor                         shift and go to state 68
    var                            shift and go to state 66
    selection_stmt                 shift and go to state 67
    empty                          shift and go to state 19
    compount_stmt                  shift and go to state 69
    echo_stmt                      shift and go to state 71
    term                           shift and go to state 72
    class_declaration              shift and go to state 74
    iteration_stmt                 shift and go to state 76
    expression                     shift and go to state 77

state 35

    (71) selection_stmt -> DEFAULT COLON . statement BREAK SEMI
    (57) statement -> . expression_stmt
    (58) statement -> . compount_stmt
    (59) statement -> . selection_stmt
    (60) statement -> . iteration_stmt
    (61) statement -> . return_stmt
    (62) statement -> . class_declaration
    (63) statement -> . echo_stmt
    (64) expression_stmt -> . expression SEMI
    (52) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (75) return_stmt -> . RETURN SEMI
    (76) return_stmt -> . RETURN expression SEMI
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (15) echo_stmt -> . empty
    (16) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (17) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (18) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (118) empty -> .
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    LBLOCK          shift and go to state 57
    IF              shift and go to state 27
    SWITCH          shift and go to state 15
    CASE            shift and go to state 10
    DEFAULT         shift and go to state 5
    FOR             shift and go to state 22
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    RETURN          shift and go to state 55
    CLASS           shift and go to state 18
    PRIVATE         shift and go to state 12
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 31
    ECHO            reduce using rule 118 (empty -> .)
    BREAK           reduce using rule 118 (empty -> .)
    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

    boolean                        shift and go to state 75
    iteration_stmt                 shift and go to state 76
    simple_expression              shift and go to state 58
    additive_expression            shift and go to state 60
    area                           shift and go to state 61
    expression_stmt                shift and go to state 63
    statement                      shift and go to state 78
    factor                         shift and go to state 68
    var                            shift and go to state 66
    selection_stmt                 shift and go to state 67
    empty                          shift and go to state 19
    compount_stmt                  shift and go to state 69
    echo_stmt                      shift and go to state 71
    term                           shift and go to state 72
    class_declaration              shift and go to state 74
    return_stmt                    shift and go to state 56
    expression                     shift and go to state 77

state 36

    (19) header_declaration -> REQUIRE LPAREN . STRING RPAREN SEMI

    STRING          shift and go to state 79


state 37

    (32) var_declaration -> TIMESTIMES IDVAR . SEMI
    (33) var_declaration -> TIMESTIMES IDVAR . SEMI var_declaration

    SEMI            shift and go to state 80


state 38

    (73) iteration_stmt -> WHILE LPAREN . expression RPAREN statement
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

    term                           shift and go to state 72
    boolean                        shift and go to state 75
    factor                         shift and go to state 68
    var                            shift and go to state 66
    simple_expression              shift and go to state 58
    expression                     shift and go to state 81
    additive_expression            shift and go to state 60

state 39

    (70) selection_stmt -> CASE NUM . COLON statement BREAK SEMI

    COLON           shift and go to state 82


state 40

    (21) class_declaration -> area CLASS . ID LBLOCK attribute RBLOCK

    ID              shift and go to state 83


state 41

    (6) declaration -> area fun_declaration .

    CLOSETAG        reduce using rule 6 (declaration -> area fun_declaration .)
    IDVAR           reduce using rule 6 (declaration -> area fun_declaration .)
    TIMESTIMES      reduce using rule 6 (declaration -> area fun_declaration .)
    AMPERSANT       reduce using rule 6 (declaration -> area fun_declaration .)
    FUNCTION        reduce using rule 6 (declaration -> area fun_declaration .)
    PRIVATE         reduce using rule 6 (declaration -> area fun_declaration .)
    PUBLIC          reduce using rule 6 (declaration -> area fun_declaration .)
    PROTECTED       reduce using rule 6 (declaration -> area fun_declaration .)
    REQUIRE         reduce using rule 6 (declaration -> area fun_declaration .)
    INCLUDE         reduce using rule 6 (declaration -> area fun_declaration .)
    CLASS           reduce using rule 6 (declaration -> area fun_declaration .)
    IF              reduce using rule 6 (declaration -> area fun_declaration .)
    SWITCH          reduce using rule 6 (declaration -> area fun_declaration .)
    CASE            reduce using rule 6 (declaration -> area fun_declaration .)
    DEFAULT         reduce using rule 6 (declaration -> area fun_declaration .)
    FOR             reduce using rule 6 (declaration -> area fun_declaration .)
    WHILE           reduce using rule 6 (declaration -> area fun_declaration .)
    DO              reduce using rule 6 (declaration -> area fun_declaration .)
    ID              reduce using rule 6 (declaration -> area fun_declaration .)
    ECHO            reduce using rule 6 (declaration -> area fun_declaration .)


state 42

    (115) typeclass -> ID IDVAR . EQUAL NEW constructor SEMI

    EQUAL           shift and go to state 84


state 43

    (69) selection_stmt -> SWITCH LPAREN . var RPAREN statement
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET

    IDVAR           shift and go to state 85

    var                            shift and go to state 86

state 44

    (30) var_declaration -> IDVAR SEMI . var_declaration
    (31) var_declaration -> IDVAR SEMI .
    (30) var_declaration -> . IDVAR SEMI var_declaration
    (31) var_declaration -> . IDVAR SEMI
    (32) var_declaration -> . TIMESTIMES IDVAR SEMI
    (33) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUM SEMI
    (36) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMI
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (40) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMI
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMI

    CLOSETAG        reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    IDVAR           reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    TIMESTIMES      reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    AMPERSANT       reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    FUNCTION        reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    PRIVATE         reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    PUBLIC          reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    PROTECTED       reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    REQUIRE         reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    INCLUDE         reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    CLASS           reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    IF              reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    SWITCH          reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    CASE            reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    DEFAULT         reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    FOR             reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    WHILE           reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    DO              reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    ID              reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    ECHO            reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    SEMI            reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    RBLOCK          reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    LBLOCK          reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    RETURN          reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    LPAREN          reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    NUM             reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    TRUE            reduce using rule 31 (var_declaration -> IDVAR SEMI .)
    FALSE           reduce using rule 31 (var_declaration -> IDVAR SEMI .)

  ! IDVAR           [ shift and go to state 16 ]
  ! TIMESTIMES      [ shift and go to state 7 ]
  ! AMPERSANT       [ shift and go to state 21 ]

    var_declaration                shift and go to state 87

state 45

    (34) var_declaration -> IDVAR EQUAL . NUM SEMI var_declaration
    (35) var_declaration -> IDVAR EQUAL . NUM SEMI
    (36) var_declaration -> IDVAR EQUAL . boolean SEMI var_declaration
    (37) var_declaration -> IDVAR EQUAL . boolean SEMI
    (38) var_declaration -> IDVAR EQUAL . IDVAR SEMI var_declaration
    (39) var_declaration -> IDVAR EQUAL . IDVAR SEMI
    (43) var_declaration -> IDVAR EQUAL . simple_expression SEMI
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET

    NUM             shift and go to state 90
    IDVAR           shift and go to state 92
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73
    LPAREN          shift and go to state 70

    term                           shift and go to state 72
    boolean                        shift and go to state 88
    factor                         shift and go to state 68
    var                            shift and go to state 91
    simple_expression              shift and go to state 89
    additive_expression            shift and go to state 60

state 46

    (22) class_declaration -> CLASS ID . LBLOCK attribute RBLOCK

    LBLOCK          shift and go to state 93


state 47

    (40) var_declaration -> AMPERSANT IDVAR . SEMI var_declaration
    (41) var_declaration -> AMPERSANT IDVAR . EQUAL IDVAR SEMI selection_stmt
    (42) var_declaration -> AMPERSANT IDVAR . SEMI

    SEMI            shift and go to state 94
    EQUAL           shift and go to state 95


state 48

    (72) iteration_stmt -> FOR LPAREN . var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (30) var_declaration -> . IDVAR SEMI var_declaration
    (31) var_declaration -> . IDVAR SEMI
    (32) var_declaration -> . TIMESTIMES IDVAR SEMI
    (33) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUM SEMI
    (36) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMI
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (40) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMI
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMI

    IDVAR           shift and go to state 16
    TIMESTIMES      shift and go to state 7
    AMPERSANT       shift and go to state 21

    var_declaration                shift and go to state 96

state 49

    (20) header_declaration -> INCLUDE LPAREN . STRING RPAREN SEMI

    STRING          shift and go to state 97


state 50

    (13) echo_stmt -> echo_stmt ECHO . STRING SEMI
    (14) echo_stmt -> echo_stmt ECHO . IDVAR SEMI
    (16) echo_stmt -> echo_stmt ECHO . NUM SEMI
    (17) echo_stmt -> echo_stmt ECHO . boolean SEMI
    (18) echo_stmt -> echo_stmt ECHO . fun_declaration SEMI
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE
    (44) fun_declaration -> . FUNCTION ID LPAREN params RPAREN
    (45) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt

    STRING          shift and go to state 98
    IDVAR           shift and go to state 102
    NUM             shift and go to state 101
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73
    FUNCTION        shift and go to state 3

    fun_declaration                shift and go to state 100
    boolean                        shift and go to state 99

state 51

    (65) selection_stmt -> IF LPAREN . expression RPAREN statement
    (66) selection_stmt -> IF LPAREN . expression RPAREN statement selection
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

    term                           shift and go to state 72
    boolean                        shift and go to state 75
    factor                         shift and go to state 68
    var                            shift and go to state 66
    simple_expression              shift and go to state 58
    expression                     shift and go to state 103
    additive_expression            shift and go to state 60

state 52

    (1) program -> OPENTAG declaration_list CLOSETAG .

    $end            reduce using rule 1 (program -> OPENTAG declaration_list CLOSETAG .)


state 53

    (2) declaration_list -> declaration_list declaration .

    CLOSETAG        reduce using rule 2 (declaration_list -> declaration_list declaration .)
    IDVAR           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    TIMESTIMES      reduce using rule 2 (declaration_list -> declaration_list declaration .)
    AMPERSANT       reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FUNCTION        reduce using rule 2 (declaration_list -> declaration_list declaration .)
    PRIVATE         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    PUBLIC          reduce using rule 2 (declaration_list -> declaration_list declaration .)
    PROTECTED       reduce using rule 2 (declaration_list -> declaration_list declaration .)
    REQUIRE         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    INCLUDE         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    CLASS           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 2 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 2 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    ECHO            reduce using rule 2 (declaration_list -> declaration_list declaration .)


state 54

    (44) fun_declaration -> FUNCTION ID LPAREN . params RPAREN
    (45) fun_declaration -> FUNCTION ID LPAREN . params RPAREN compount_stmt
    (46) params -> . param_list
    (47) params -> . empty
    (48) param_list -> . param_list COMMA param_list
    (49) param_list -> . param
    (118) empty -> .
    (50) param -> . IDVAR
    (51) param -> . IDVAR LBRACKET RBRACKET

    RPAREN          reduce using rule 118 (empty -> .)
    IDVAR           shift and go to state 107

    param_list                     shift and go to state 104
    param                          shift and go to state 105
    params                         shift and go to state 106
    empty                          shift and go to state 108

state 55

    (75) return_stmt -> RETURN . SEMI
    (76) return_stmt -> RETURN . expression SEMI
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    SEMI            shift and go to state 109
    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

    term                           shift and go to state 72
    boolean                        shift and go to state 75
    factor                         shift and go to state 68
    var                            shift and go to state 66
    simple_expression              shift and go to state 58
    expression                     shift and go to state 110
    additive_expression            shift and go to state 60

state 56

    (61) statement -> return_stmt .

    CLOSETAG        reduce using rule 61 (statement -> return_stmt .)
    IDVAR           reduce using rule 61 (statement -> return_stmt .)
    TIMESTIMES      reduce using rule 61 (statement -> return_stmt .)
    AMPERSANT       reduce using rule 61 (statement -> return_stmt .)
    FUNCTION        reduce using rule 61 (statement -> return_stmt .)
    PRIVATE         reduce using rule 61 (statement -> return_stmt .)
    PUBLIC          reduce using rule 61 (statement -> return_stmt .)
    PROTECTED       reduce using rule 61 (statement -> return_stmt .)
    REQUIRE         reduce using rule 61 (statement -> return_stmt .)
    INCLUDE         reduce using rule 61 (statement -> return_stmt .)
    CLASS           reduce using rule 61 (statement -> return_stmt .)
    IF              reduce using rule 61 (statement -> return_stmt .)
    SWITCH          reduce using rule 61 (statement -> return_stmt .)
    CASE            reduce using rule 61 (statement -> return_stmt .)
    DEFAULT         reduce using rule 61 (statement -> return_stmt .)
    FOR             reduce using rule 61 (statement -> return_stmt .)
    WHILE           reduce using rule 61 (statement -> return_stmt .)
    DO              reduce using rule 61 (statement -> return_stmt .)
    ID              reduce using rule 61 (statement -> return_stmt .)
    ECHO            reduce using rule 61 (statement -> return_stmt .)
    SEMI            reduce using rule 61 (statement -> return_stmt .)
    BREAK           reduce using rule 61 (statement -> return_stmt .)
    ELSE            reduce using rule 61 (statement -> return_stmt .)
    ELSEIF          reduce using rule 61 (statement -> return_stmt .)
    RBLOCK          reduce using rule 61 (statement -> return_stmt .)
    LBLOCK          reduce using rule 61 (statement -> return_stmt .)
    RETURN          reduce using rule 61 (statement -> return_stmt .)
    LPAREN          reduce using rule 61 (statement -> return_stmt .)
    NUM             reduce using rule 61 (statement -> return_stmt .)
    TRUE            reduce using rule 61 (statement -> return_stmt .)
    FALSE           reduce using rule 61 (statement -> return_stmt .)


state 57

    (52) compount_stmt -> LBLOCK . echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (15) echo_stmt -> . empty
    (16) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (17) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (18) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (118) empty -> .

    ECHO            reduce using rule 118 (empty -> .)
    IDVAR           reduce using rule 118 (empty -> .)
    TIMESTIMES      reduce using rule 118 (empty -> .)
    AMPERSANT       reduce using rule 118 (empty -> .)
    LBLOCK          reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    SWITCH          reduce using rule 118 (empty -> .)
    CASE            reduce using rule 118 (empty -> .)
    DEFAULT         reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    DO              reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)
    CLASS           reduce using rule 118 (empty -> .)
    PRIVATE         reduce using rule 118 (empty -> .)
    PUBLIC          reduce using rule 118 (empty -> .)
    PROTECTED       reduce using rule 118 (empty -> .)
    LPAREN          reduce using rule 118 (empty -> .)
    NUM             reduce using rule 118 (empty -> .)
    TRUE            reduce using rule 118 (empty -> .)
    FALSE           reduce using rule 118 (empty -> .)
    RBLOCK          reduce using rule 118 (empty -> .)

    echo_stmt                      shift and go to state 111
    empty                          shift and go to state 19

state 58

    (78) expression -> simple_expression .

    AND             reduce using rule 78 (expression -> simple_expression .)
    OR              reduce using rule 78 (expression -> simple_expression .)
    COMMA           reduce using rule 78 (expression -> simple_expression .)
    RPAREN          reduce using rule 78 (expression -> simple_expression .)
    SEMI            reduce using rule 78 (expression -> simple_expression .)
    RBRACKET        reduce using rule 78 (expression -> simple_expression .)


state 59

    (113) boolean -> TRUE .

    MINUSMINUS      reduce using rule 113 (boolean -> TRUE .)
    PLUSPLUS        reduce using rule 113 (boolean -> TRUE .)
    TIMES           reduce using rule 113 (boolean -> TRUE .)
    DIVIDE          reduce using rule 113 (boolean -> TRUE .)
    LESS            reduce using rule 113 (boolean -> TRUE .)
    LESSEQUAL       reduce using rule 113 (boolean -> TRUE .)
    GREATER         reduce using rule 113 (boolean -> TRUE .)
    GREATEREQUAL    reduce using rule 113 (boolean -> TRUE .)
    DEQUAL          reduce using rule 113 (boolean -> TRUE .)
    DISTINT         reduce using rule 113 (boolean -> TRUE .)
    ISEQUAL         reduce using rule 113 (boolean -> TRUE .)
    PLUS            reduce using rule 113 (boolean -> TRUE .)
    MINUS           reduce using rule 113 (boolean -> TRUE .)
    RPAREN          reduce using rule 113 (boolean -> TRUE .)
    AND             reduce using rule 113 (boolean -> TRUE .)
    OR              reduce using rule 113 (boolean -> TRUE .)
    SEMI            reduce using rule 113 (boolean -> TRUE .)
    RBRACKET        reduce using rule 113 (boolean -> TRUE .)
    COMMA           reduce using rule 113 (boolean -> TRUE .)


state 60

    (84) simple_expression -> additive_expression . relop additive_expression
    (85) simple_expression -> additive_expression .
    (93) additive_expression -> additive_expression . addop term
    (86) relop -> . LESS
    (87) relop -> . LESSEQUAL
    (88) relop -> . GREATER
    (89) relop -> . GREATEREQUAL
    (90) relop -> . DEQUAL
    (91) relop -> . DISTINT
    (92) relop -> . ISEQUAL
    (97) addop -> . PLUS
    (98) addop -> . MINUS

    RPAREN          reduce using rule 85 (simple_expression -> additive_expression .)
    AND             reduce using rule 85 (simple_expression -> additive_expression .)
    OR              reduce using rule 85 (simple_expression -> additive_expression .)
    SEMI            reduce using rule 85 (simple_expression -> additive_expression .)
    COMMA           reduce using rule 85 (simple_expression -> additive_expression .)
    RBRACKET        reduce using rule 85 (simple_expression -> additive_expression .)
    LESS            shift and go to state 114
    LESSEQUAL       shift and go to state 120
    GREATER         shift and go to state 122
    GREATEREQUAL    shift and go to state 117
    DEQUAL          shift and go to state 115
    DISTINT         shift and go to state 116
    ISEQUAL         shift and go to state 119
    PLUS            shift and go to state 118
    MINUS           shift and go to state 121

    addop                          shift and go to state 112
    relop                          shift and go to state 113

state 61

    (21) class_declaration -> area . CLASS ID LBLOCK attribute RBLOCK

    CLASS           shift and go to state 40


state 62

    (105) factor -> NUM .

    MINUSMINUS      reduce using rule 105 (factor -> NUM .)
    PLUSPLUS        reduce using rule 105 (factor -> NUM .)
    TIMES           reduce using rule 105 (factor -> NUM .)
    DIVIDE          reduce using rule 105 (factor -> NUM .)
    LESS            reduce using rule 105 (factor -> NUM .)
    LESSEQUAL       reduce using rule 105 (factor -> NUM .)
    GREATER         reduce using rule 105 (factor -> NUM .)
    GREATEREQUAL    reduce using rule 105 (factor -> NUM .)
    DEQUAL          reduce using rule 105 (factor -> NUM .)
    DISTINT         reduce using rule 105 (factor -> NUM .)
    ISEQUAL         reduce using rule 105 (factor -> NUM .)
    PLUS            reduce using rule 105 (factor -> NUM .)
    MINUS           reduce using rule 105 (factor -> NUM .)
    SEMI            reduce using rule 105 (factor -> NUM .)
    AND             reduce using rule 105 (factor -> NUM .)
    OR              reduce using rule 105 (factor -> NUM .)
    RPAREN          reduce using rule 105 (factor -> NUM .)
    RBRACKET        reduce using rule 105 (factor -> NUM .)
    COMMA           reduce using rule 105 (factor -> NUM .)


state 63

    (57) statement -> expression_stmt .

    CLOSETAG        reduce using rule 57 (statement -> expression_stmt .)
    IDVAR           reduce using rule 57 (statement -> expression_stmt .)
    TIMESTIMES      reduce using rule 57 (statement -> expression_stmt .)
    AMPERSANT       reduce using rule 57 (statement -> expression_stmt .)
    FUNCTION        reduce using rule 57 (statement -> expression_stmt .)
    PRIVATE         reduce using rule 57 (statement -> expression_stmt .)
    PUBLIC          reduce using rule 57 (statement -> expression_stmt .)
    PROTECTED       reduce using rule 57 (statement -> expression_stmt .)
    REQUIRE         reduce using rule 57 (statement -> expression_stmt .)
    INCLUDE         reduce using rule 57 (statement -> expression_stmt .)
    CLASS           reduce using rule 57 (statement -> expression_stmt .)
    IF              reduce using rule 57 (statement -> expression_stmt .)
    SWITCH          reduce using rule 57 (statement -> expression_stmt .)
    CASE            reduce using rule 57 (statement -> expression_stmt .)
    DEFAULT         reduce using rule 57 (statement -> expression_stmt .)
    FOR             reduce using rule 57 (statement -> expression_stmt .)
    WHILE           reduce using rule 57 (statement -> expression_stmt .)
    DO              reduce using rule 57 (statement -> expression_stmt .)
    ID              reduce using rule 57 (statement -> expression_stmt .)
    ECHO            reduce using rule 57 (statement -> expression_stmt .)
    SEMI            reduce using rule 57 (statement -> expression_stmt .)
    BREAK           reduce using rule 57 (statement -> expression_stmt .)
    ELSE            reduce using rule 57 (statement -> expression_stmt .)
    ELSEIF          reduce using rule 57 (statement -> expression_stmt .)
    RBLOCK          reduce using rule 57 (statement -> expression_stmt .)
    LBLOCK          reduce using rule 57 (statement -> expression_stmt .)
    RETURN          reduce using rule 57 (statement -> expression_stmt .)
    LPAREN          reduce using rule 57 (statement -> expression_stmt .)
    NUM             reduce using rule 57 (statement -> expression_stmt .)
    TRUE            reduce using rule 57 (statement -> expression_stmt .)
    FALSE           reduce using rule 57 (statement -> expression_stmt .)


state 64

    (74) iteration_stmt -> DO LBLOCK statement . SEMI RBLOCK WHILE LPAREN expression RPAREN

    SEMI            shift and go to state 123


state 65

    (82) var -> IDVAR .
    (83) var -> IDVAR . LBRACKET expression RBRACKET
    (107) factor -> IDVAR . LPAREN args RPAREN

    EQUAL           reduce using rule 82 (var -> IDVAR .)
    MINUSMINUS      reduce using rule 82 (var -> IDVAR .)
    PLUSPLUS        reduce using rule 82 (var -> IDVAR .)
    TIMES           reduce using rule 82 (var -> IDVAR .)
    DIVIDE          reduce using rule 82 (var -> IDVAR .)
    LESS            reduce using rule 82 (var -> IDVAR .)
    LESSEQUAL       reduce using rule 82 (var -> IDVAR .)
    GREATER         reduce using rule 82 (var -> IDVAR .)
    GREATEREQUAL    reduce using rule 82 (var -> IDVAR .)
    DEQUAL          reduce using rule 82 (var -> IDVAR .)
    DISTINT         reduce using rule 82 (var -> IDVAR .)
    ISEQUAL         reduce using rule 82 (var -> IDVAR .)
    PLUS            reduce using rule 82 (var -> IDVAR .)
    MINUS           reduce using rule 82 (var -> IDVAR .)
    SEMI            reduce using rule 82 (var -> IDVAR .)
    AND             reduce using rule 82 (var -> IDVAR .)
    OR              reduce using rule 82 (var -> IDVAR .)
    RPAREN          reduce using rule 82 (var -> IDVAR .)
    RBRACKET        reduce using rule 82 (var -> IDVAR .)
    COMMA           reduce using rule 82 (var -> IDVAR .)
    LBRACKET        shift and go to state 124
    LPAREN          shift and go to state 125


state 66

    (77) expression -> var . EQUAL expression
    (79) expression -> var . EQUAL AMPERSANT IDVAR
    (104) factor -> var .

    EQUAL           shift and go to state 126
    MINUSMINUS      reduce using rule 104 (factor -> var .)
    PLUSPLUS        reduce using rule 104 (factor -> var .)
    TIMES           reduce using rule 104 (factor -> var .)
    DIVIDE          reduce using rule 104 (factor -> var .)
    LESS            reduce using rule 104 (factor -> var .)
    LESSEQUAL       reduce using rule 104 (factor -> var .)
    GREATER         reduce using rule 104 (factor -> var .)
    GREATEREQUAL    reduce using rule 104 (factor -> var .)
    DEQUAL          reduce using rule 104 (factor -> var .)
    DISTINT         reduce using rule 104 (factor -> var .)
    ISEQUAL         reduce using rule 104 (factor -> var .)
    PLUS            reduce using rule 104 (factor -> var .)
    MINUS           reduce using rule 104 (factor -> var .)
    RBRACKET        reduce using rule 104 (factor -> var .)
    AND             reduce using rule 104 (factor -> var .)
    OR              reduce using rule 104 (factor -> var .)
    SEMI            reduce using rule 104 (factor -> var .)
    COMMA           reduce using rule 104 (factor -> var .)
    RPAREN          reduce using rule 104 (factor -> var .)


state 67

    (59) statement -> selection_stmt .

    CLOSETAG        reduce using rule 59 (statement -> selection_stmt .)
    IDVAR           reduce using rule 59 (statement -> selection_stmt .)
    TIMESTIMES      reduce using rule 59 (statement -> selection_stmt .)
    AMPERSANT       reduce using rule 59 (statement -> selection_stmt .)
    FUNCTION        reduce using rule 59 (statement -> selection_stmt .)
    PRIVATE         reduce using rule 59 (statement -> selection_stmt .)
    PUBLIC          reduce using rule 59 (statement -> selection_stmt .)
    PROTECTED       reduce using rule 59 (statement -> selection_stmt .)
    REQUIRE         reduce using rule 59 (statement -> selection_stmt .)
    INCLUDE         reduce using rule 59 (statement -> selection_stmt .)
    CLASS           reduce using rule 59 (statement -> selection_stmt .)
    IF              reduce using rule 59 (statement -> selection_stmt .)
    SWITCH          reduce using rule 59 (statement -> selection_stmt .)
    CASE            reduce using rule 59 (statement -> selection_stmt .)
    DEFAULT         reduce using rule 59 (statement -> selection_stmt .)
    FOR             reduce using rule 59 (statement -> selection_stmt .)
    WHILE           reduce using rule 59 (statement -> selection_stmt .)
    DO              reduce using rule 59 (statement -> selection_stmt .)
    ID              reduce using rule 59 (statement -> selection_stmt .)
    ECHO            reduce using rule 59 (statement -> selection_stmt .)
    SEMI            reduce using rule 59 (statement -> selection_stmt .)
    BREAK           reduce using rule 59 (statement -> selection_stmt .)
    ELSE            reduce using rule 59 (statement -> selection_stmt .)
    ELSEIF          reduce using rule 59 (statement -> selection_stmt .)
    RBLOCK          reduce using rule 59 (statement -> selection_stmt .)
    LBLOCK          reduce using rule 59 (statement -> selection_stmt .)
    RETURN          reduce using rule 59 (statement -> selection_stmt .)
    LPAREN          reduce using rule 59 (statement -> selection_stmt .)
    NUM             reduce using rule 59 (statement -> selection_stmt .)
    TRUE            reduce using rule 59 (statement -> selection_stmt .)
    FALSE           reduce using rule 59 (statement -> selection_stmt .)


state 68

    (100) term -> factor .

    MINUSMINUS      reduce using rule 100 (term -> factor .)
    PLUSPLUS        reduce using rule 100 (term -> factor .)
    TIMES           reduce using rule 100 (term -> factor .)
    DIVIDE          reduce using rule 100 (term -> factor .)
    LESS            reduce using rule 100 (term -> factor .)
    LESSEQUAL       reduce using rule 100 (term -> factor .)
    GREATER         reduce using rule 100 (term -> factor .)
    GREATEREQUAL    reduce using rule 100 (term -> factor .)
    DEQUAL          reduce using rule 100 (term -> factor .)
    DISTINT         reduce using rule 100 (term -> factor .)
    ISEQUAL         reduce using rule 100 (term -> factor .)
    PLUS            reduce using rule 100 (term -> factor .)
    MINUS           reduce using rule 100 (term -> factor .)
    AND             reduce using rule 100 (term -> factor .)
    OR              reduce using rule 100 (term -> factor .)
    COMMA           reduce using rule 100 (term -> factor .)
    RPAREN          reduce using rule 100 (term -> factor .)
    SEMI            reduce using rule 100 (term -> factor .)
    RBRACKET        reduce using rule 100 (term -> factor .)


state 69

    (58) statement -> compount_stmt .

    CLOSETAG        reduce using rule 58 (statement -> compount_stmt .)
    IDVAR           reduce using rule 58 (statement -> compount_stmt .)
    TIMESTIMES      reduce using rule 58 (statement -> compount_stmt .)
    AMPERSANT       reduce using rule 58 (statement -> compount_stmt .)
    FUNCTION        reduce using rule 58 (statement -> compount_stmt .)
    PRIVATE         reduce using rule 58 (statement -> compount_stmt .)
    PUBLIC          reduce using rule 58 (statement -> compount_stmt .)
    PROTECTED       reduce using rule 58 (statement -> compount_stmt .)
    REQUIRE         reduce using rule 58 (statement -> compount_stmt .)
    INCLUDE         reduce using rule 58 (statement -> compount_stmt .)
    CLASS           reduce using rule 58 (statement -> compount_stmt .)
    IF              reduce using rule 58 (statement -> compount_stmt .)
    SWITCH          reduce using rule 58 (statement -> compount_stmt .)
    CASE            reduce using rule 58 (statement -> compount_stmt .)
    DEFAULT         reduce using rule 58 (statement -> compount_stmt .)
    FOR             reduce using rule 58 (statement -> compount_stmt .)
    WHILE           reduce using rule 58 (statement -> compount_stmt .)
    DO              reduce using rule 58 (statement -> compount_stmt .)
    ID              reduce using rule 58 (statement -> compount_stmt .)
    ECHO            reduce using rule 58 (statement -> compount_stmt .)
    SEMI            reduce using rule 58 (statement -> compount_stmt .)
    BREAK           reduce using rule 58 (statement -> compount_stmt .)
    ELSE            reduce using rule 58 (statement -> compount_stmt .)
    ELSEIF          reduce using rule 58 (statement -> compount_stmt .)
    RBLOCK          reduce using rule 58 (statement -> compount_stmt .)
    LBLOCK          reduce using rule 58 (statement -> compount_stmt .)
    RETURN          reduce using rule 58 (statement -> compount_stmt .)
    LPAREN          reduce using rule 58 (statement -> compount_stmt .)
    NUM             reduce using rule 58 (statement -> compount_stmt .)
    TRUE            reduce using rule 58 (statement -> compount_stmt .)
    FALSE           reduce using rule 58 (statement -> compount_stmt .)


state 70

    (103) factor -> LPAREN . expression RPAREN
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

    term                           shift and go to state 72
    boolean                        shift and go to state 75
    factor                         shift and go to state 68
    var                            shift and go to state 66
    simple_expression              shift and go to state 58
    expression                     shift and go to state 127
    additive_expression            shift and go to state 60

state 71

    (63) statement -> echo_stmt .
    (13) echo_stmt -> echo_stmt . ECHO STRING SEMI
    (14) echo_stmt -> echo_stmt . ECHO IDVAR SEMI
    (16) echo_stmt -> echo_stmt . ECHO NUM SEMI
    (17) echo_stmt -> echo_stmt . ECHO boolean SEMI
    (18) echo_stmt -> echo_stmt . ECHO fun_declaration SEMI

  ! shift/reduce conflict for ECHO resolved as shift
    CLOSETAG        reduce using rule 63 (statement -> echo_stmt .)
    IDVAR           reduce using rule 63 (statement -> echo_stmt .)
    TIMESTIMES      reduce using rule 63 (statement -> echo_stmt .)
    AMPERSANT       reduce using rule 63 (statement -> echo_stmt .)
    FUNCTION        reduce using rule 63 (statement -> echo_stmt .)
    PRIVATE         reduce using rule 63 (statement -> echo_stmt .)
    PUBLIC          reduce using rule 63 (statement -> echo_stmt .)
    PROTECTED       reduce using rule 63 (statement -> echo_stmt .)
    REQUIRE         reduce using rule 63 (statement -> echo_stmt .)
    INCLUDE         reduce using rule 63 (statement -> echo_stmt .)
    CLASS           reduce using rule 63 (statement -> echo_stmt .)
    IF              reduce using rule 63 (statement -> echo_stmt .)
    SWITCH          reduce using rule 63 (statement -> echo_stmt .)
    CASE            reduce using rule 63 (statement -> echo_stmt .)
    DEFAULT         reduce using rule 63 (statement -> echo_stmt .)
    FOR             reduce using rule 63 (statement -> echo_stmt .)
    WHILE           reduce using rule 63 (statement -> echo_stmt .)
    DO              reduce using rule 63 (statement -> echo_stmt .)
    ID              reduce using rule 63 (statement -> echo_stmt .)
    SEMI            reduce using rule 63 (statement -> echo_stmt .)
    BREAK           reduce using rule 63 (statement -> echo_stmt .)
    ELSE            reduce using rule 63 (statement -> echo_stmt .)
    ELSEIF          reduce using rule 63 (statement -> echo_stmt .)
    RBLOCK          reduce using rule 63 (statement -> echo_stmt .)
    LBLOCK          reduce using rule 63 (statement -> echo_stmt .)
    RETURN          reduce using rule 63 (statement -> echo_stmt .)
    LPAREN          reduce using rule 63 (statement -> echo_stmt .)
    NUM             reduce using rule 63 (statement -> echo_stmt .)
    TRUE            reduce using rule 63 (statement -> echo_stmt .)
    FALSE           reduce using rule 63 (statement -> echo_stmt .)
    ECHO            shift and go to state 50

  ! ECHO            [ reduce using rule 63 (statement -> echo_stmt .) ]


state 72

    (94) additive_expression -> term .
    (95) additive_expression -> term . MINUSMINUS
    (96) additive_expression -> term . PLUSPLUS
    (99) term -> term . mulop factor
    (101) mulop -> . TIMES
    (102) mulop -> . DIVIDE

    LESS            reduce using rule 94 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 94 (additive_expression -> term .)
    GREATER         reduce using rule 94 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 94 (additive_expression -> term .)
    DEQUAL          reduce using rule 94 (additive_expression -> term .)
    DISTINT         reduce using rule 94 (additive_expression -> term .)
    ISEQUAL         reduce using rule 94 (additive_expression -> term .)
    PLUS            reduce using rule 94 (additive_expression -> term .)
    MINUS           reduce using rule 94 (additive_expression -> term .)
    RPAREN          reduce using rule 94 (additive_expression -> term .)
    AND             reduce using rule 94 (additive_expression -> term .)
    OR              reduce using rule 94 (additive_expression -> term .)
    SEMI            reduce using rule 94 (additive_expression -> term .)
    RBRACKET        reduce using rule 94 (additive_expression -> term .)
    COMMA           reduce using rule 94 (additive_expression -> term .)
    MINUSMINUS      shift and go to state 132
    PLUSPLUS        shift and go to state 129
    TIMES           shift and go to state 130
    DIVIDE          shift and go to state 128

    mulop                          shift and go to state 131

state 73

    (114) boolean -> FALSE .

    MINUSMINUS      reduce using rule 114 (boolean -> FALSE .)
    PLUSPLUS        reduce using rule 114 (boolean -> FALSE .)
    TIMES           reduce using rule 114 (boolean -> FALSE .)
    DIVIDE          reduce using rule 114 (boolean -> FALSE .)
    LESS            reduce using rule 114 (boolean -> FALSE .)
    LESSEQUAL       reduce using rule 114 (boolean -> FALSE .)
    GREATER         reduce using rule 114 (boolean -> FALSE .)
    GREATEREQUAL    reduce using rule 114 (boolean -> FALSE .)
    DEQUAL          reduce using rule 114 (boolean -> FALSE .)
    DISTINT         reduce using rule 114 (boolean -> FALSE .)
    ISEQUAL         reduce using rule 114 (boolean -> FALSE .)
    PLUS            reduce using rule 114 (boolean -> FALSE .)
    MINUS           reduce using rule 114 (boolean -> FALSE .)
    RPAREN          reduce using rule 114 (boolean -> FALSE .)
    AND             reduce using rule 114 (boolean -> FALSE .)
    OR              reduce using rule 114 (boolean -> FALSE .)
    SEMI            reduce using rule 114 (boolean -> FALSE .)
    RBRACKET        reduce using rule 114 (boolean -> FALSE .)
    COMMA           reduce using rule 114 (boolean -> FALSE .)


state 74

    (62) statement -> class_declaration .

    CLOSETAG        reduce using rule 62 (statement -> class_declaration .)
    IDVAR           reduce using rule 62 (statement -> class_declaration .)
    TIMESTIMES      reduce using rule 62 (statement -> class_declaration .)
    AMPERSANT       reduce using rule 62 (statement -> class_declaration .)
    FUNCTION        reduce using rule 62 (statement -> class_declaration .)
    PRIVATE         reduce using rule 62 (statement -> class_declaration .)
    PUBLIC          reduce using rule 62 (statement -> class_declaration .)
    PROTECTED       reduce using rule 62 (statement -> class_declaration .)
    REQUIRE         reduce using rule 62 (statement -> class_declaration .)
    INCLUDE         reduce using rule 62 (statement -> class_declaration .)
    CLASS           reduce using rule 62 (statement -> class_declaration .)
    IF              reduce using rule 62 (statement -> class_declaration .)
    SWITCH          reduce using rule 62 (statement -> class_declaration .)
    CASE            reduce using rule 62 (statement -> class_declaration .)
    DEFAULT         reduce using rule 62 (statement -> class_declaration .)
    FOR             reduce using rule 62 (statement -> class_declaration .)
    WHILE           reduce using rule 62 (statement -> class_declaration .)
    DO              reduce using rule 62 (statement -> class_declaration .)
    ID              reduce using rule 62 (statement -> class_declaration .)
    ECHO            reduce using rule 62 (statement -> class_declaration .)
    SEMI            reduce using rule 62 (statement -> class_declaration .)
    BREAK           reduce using rule 62 (statement -> class_declaration .)
    ELSE            reduce using rule 62 (statement -> class_declaration .)
    ELSEIF          reduce using rule 62 (statement -> class_declaration .)
    RBLOCK          reduce using rule 62 (statement -> class_declaration .)
    LBLOCK          reduce using rule 62 (statement -> class_declaration .)
    RETURN          reduce using rule 62 (statement -> class_declaration .)
    LPAREN          reduce using rule 62 (statement -> class_declaration .)
    NUM             reduce using rule 62 (statement -> class_declaration .)
    TRUE            reduce using rule 62 (statement -> class_declaration .)
    FALSE           reduce using rule 62 (statement -> class_declaration .)


state 75

    (106) factor -> boolean .

    MINUSMINUS      reduce using rule 106 (factor -> boolean .)
    PLUSPLUS        reduce using rule 106 (factor -> boolean .)
    TIMES           reduce using rule 106 (factor -> boolean .)
    DIVIDE          reduce using rule 106 (factor -> boolean .)
    LESS            reduce using rule 106 (factor -> boolean .)
    LESSEQUAL       reduce using rule 106 (factor -> boolean .)
    GREATER         reduce using rule 106 (factor -> boolean .)
    GREATEREQUAL    reduce using rule 106 (factor -> boolean .)
    DEQUAL          reduce using rule 106 (factor -> boolean .)
    DISTINT         reduce using rule 106 (factor -> boolean .)
    ISEQUAL         reduce using rule 106 (factor -> boolean .)
    PLUS            reduce using rule 106 (factor -> boolean .)
    MINUS           reduce using rule 106 (factor -> boolean .)
    SEMI            reduce using rule 106 (factor -> boolean .)
    AND             reduce using rule 106 (factor -> boolean .)
    OR              reduce using rule 106 (factor -> boolean .)
    RPAREN          reduce using rule 106 (factor -> boolean .)
    RBRACKET        reduce using rule 106 (factor -> boolean .)
    COMMA           reduce using rule 106 (factor -> boolean .)


state 76

    (60) statement -> iteration_stmt .

    CLOSETAG        reduce using rule 60 (statement -> iteration_stmt .)
    IDVAR           reduce using rule 60 (statement -> iteration_stmt .)
    TIMESTIMES      reduce using rule 60 (statement -> iteration_stmt .)
    AMPERSANT       reduce using rule 60 (statement -> iteration_stmt .)
    FUNCTION        reduce using rule 60 (statement -> iteration_stmt .)
    PRIVATE         reduce using rule 60 (statement -> iteration_stmt .)
    PUBLIC          reduce using rule 60 (statement -> iteration_stmt .)
    PROTECTED       reduce using rule 60 (statement -> iteration_stmt .)
    REQUIRE         reduce using rule 60 (statement -> iteration_stmt .)
    INCLUDE         reduce using rule 60 (statement -> iteration_stmt .)
    CLASS           reduce using rule 60 (statement -> iteration_stmt .)
    IF              reduce using rule 60 (statement -> iteration_stmt .)
    SWITCH          reduce using rule 60 (statement -> iteration_stmt .)
    CASE            reduce using rule 60 (statement -> iteration_stmt .)
    DEFAULT         reduce using rule 60 (statement -> iteration_stmt .)
    FOR             reduce using rule 60 (statement -> iteration_stmt .)
    WHILE           reduce using rule 60 (statement -> iteration_stmt .)
    DO              reduce using rule 60 (statement -> iteration_stmt .)
    ID              reduce using rule 60 (statement -> iteration_stmt .)
    ECHO            reduce using rule 60 (statement -> iteration_stmt .)
    SEMI            reduce using rule 60 (statement -> iteration_stmt .)
    BREAK           reduce using rule 60 (statement -> iteration_stmt .)
    ELSE            reduce using rule 60 (statement -> iteration_stmt .)
    ELSEIF          reduce using rule 60 (statement -> iteration_stmt .)
    RBLOCK          reduce using rule 60 (statement -> iteration_stmt .)
    LBLOCK          reduce using rule 60 (statement -> iteration_stmt .)
    RETURN          reduce using rule 60 (statement -> iteration_stmt .)
    LPAREN          reduce using rule 60 (statement -> iteration_stmt .)
    NUM             reduce using rule 60 (statement -> iteration_stmt .)
    TRUE            reduce using rule 60 (statement -> iteration_stmt .)
    FALSE           reduce using rule 60 (statement -> iteration_stmt .)


state 77

    (64) expression_stmt -> expression . SEMI
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    SEMI            shift and go to state 135
    AND             shift and go to state 133
    OR              shift and go to state 134


state 78

    (71) selection_stmt -> DEFAULT COLON statement . BREAK SEMI

    BREAK           shift and go to state 136


state 79

    (19) header_declaration -> REQUIRE LPAREN STRING . RPAREN SEMI

    RPAREN          shift and go to state 137


state 80

    (32) var_declaration -> TIMESTIMES IDVAR SEMI .
    (33) var_declaration -> TIMESTIMES IDVAR SEMI . var_declaration
    (30) var_declaration -> . IDVAR SEMI var_declaration
    (31) var_declaration -> . IDVAR SEMI
    (32) var_declaration -> . TIMESTIMES IDVAR SEMI
    (33) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUM SEMI
    (36) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMI
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (40) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMI
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMI

    CLOSETAG        reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    IDVAR           reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    TIMESTIMES      reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    AMPERSANT       reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    FUNCTION        reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    PRIVATE         reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    PUBLIC          reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    PROTECTED       reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    REQUIRE         reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    INCLUDE         reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    CLASS           reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    IF              reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    SWITCH          reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    CASE            reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    DEFAULT         reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    FOR             reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    WHILE           reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    DO              reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    ID              reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    ECHO            reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    SEMI            reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    RBLOCK          reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    LBLOCK          reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    RETURN          reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    LPAREN          reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    NUM             reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    TRUE            reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)
    FALSE           reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMI .)

  ! IDVAR           [ shift and go to state 16 ]
  ! TIMESTIMES      [ shift and go to state 7 ]
  ! AMPERSANT       [ shift and go to state 21 ]

    var_declaration                shift and go to state 138

state 81

    (73) iteration_stmt -> WHILE LPAREN expression . RPAREN statement
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    RPAREN          shift and go to state 139
    AND             shift and go to state 133
    OR              shift and go to state 134


state 82

    (70) selection_stmt -> CASE NUM COLON . statement BREAK SEMI
    (57) statement -> . expression_stmt
    (58) statement -> . compount_stmt
    (59) statement -> . selection_stmt
    (60) statement -> . iteration_stmt
    (61) statement -> . return_stmt
    (62) statement -> . class_declaration
    (63) statement -> . echo_stmt
    (64) expression_stmt -> . expression SEMI
    (52) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (75) return_stmt -> . RETURN SEMI
    (76) return_stmt -> . RETURN expression SEMI
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (15) echo_stmt -> . empty
    (16) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (17) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (18) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (118) empty -> .
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    LBLOCK          shift and go to state 57
    IF              shift and go to state 27
    SWITCH          shift and go to state 15
    CASE            shift and go to state 10
    DEFAULT         shift and go to state 5
    FOR             shift and go to state 22
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    RETURN          shift and go to state 55
    CLASS           shift and go to state 18
    PRIVATE         shift and go to state 12
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 31
    ECHO            reduce using rule 118 (empty -> .)
    BREAK           reduce using rule 118 (empty -> .)
    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

    boolean                        shift and go to state 75
    iteration_stmt                 shift and go to state 76
    simple_expression              shift and go to state 58
    additive_expression            shift and go to state 60
    area                           shift and go to state 61
    expression_stmt                shift and go to state 63
    statement                      shift and go to state 140
    factor                         shift and go to state 68
    var                            shift and go to state 66
    selection_stmt                 shift and go to state 67
    empty                          shift and go to state 19
    compount_stmt                  shift and go to state 69
    echo_stmt                      shift and go to state 71
    term                           shift and go to state 72
    class_declaration              shift and go to state 74
    return_stmt                    shift and go to state 56
    expression                     shift and go to state 77

state 83

    (21) class_declaration -> area CLASS ID . LBLOCK attribute RBLOCK

    LBLOCK          shift and go to state 141


state 84

    (115) typeclass -> ID IDVAR EQUAL . NEW constructor SEMI

    NEW             shift and go to state 142


state 85

    (82) var -> IDVAR .
    (83) var -> IDVAR . LBRACKET expression RBRACKET

    RPAREN          reduce using rule 82 (var -> IDVAR .)
    LBRACKET        shift and go to state 124


state 86

    (69) selection_stmt -> SWITCH LPAREN var . RPAREN statement

    RPAREN          shift and go to state 143


state 87

    (30) var_declaration -> IDVAR SEMI var_declaration .

    CLOSETAG        reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    IDVAR           reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    TIMESTIMES      reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    AMPERSANT       reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    FUNCTION        reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    PRIVATE         reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    PUBLIC          reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    PROTECTED       reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    REQUIRE         reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    INCLUDE         reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    CLASS           reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    IF              reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    SWITCH          reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    CASE            reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    DEFAULT         reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    FOR             reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    WHILE           reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    DO              reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    ID              reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    ECHO            reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    SEMI            reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    RBLOCK          reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    LBLOCK          reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    RETURN          reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    LPAREN          reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    NUM             reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    TRUE            reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)
    FALSE           reduce using rule 30 (var_declaration -> IDVAR SEMI var_declaration .)


state 88

    (36) var_declaration -> IDVAR EQUAL boolean . SEMI var_declaration
    (37) var_declaration -> IDVAR EQUAL boolean . SEMI
    (106) factor -> boolean .

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 144
    MINUSMINUS      reduce using rule 106 (factor -> boolean .)
    PLUSPLUS        reduce using rule 106 (factor -> boolean .)
    TIMES           reduce using rule 106 (factor -> boolean .)
    DIVIDE          reduce using rule 106 (factor -> boolean .)
    LESS            reduce using rule 106 (factor -> boolean .)
    LESSEQUAL       reduce using rule 106 (factor -> boolean .)
    GREATER         reduce using rule 106 (factor -> boolean .)
    GREATEREQUAL    reduce using rule 106 (factor -> boolean .)
    DEQUAL          reduce using rule 106 (factor -> boolean .)
    DISTINT         reduce using rule 106 (factor -> boolean .)
    ISEQUAL         reduce using rule 106 (factor -> boolean .)
    PLUS            reduce using rule 106 (factor -> boolean .)
    MINUS           reduce using rule 106 (factor -> boolean .)

  ! SEMI            [ reduce using rule 106 (factor -> boolean .) ]


state 89

    (43) var_declaration -> IDVAR EQUAL simple_expression . SEMI

    SEMI            shift and go to state 145


state 90

    (34) var_declaration -> IDVAR EQUAL NUM . SEMI var_declaration
    (35) var_declaration -> IDVAR EQUAL NUM . SEMI
    (105) factor -> NUM .

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 146
    MINUSMINUS      reduce using rule 105 (factor -> NUM .)
    PLUSPLUS        reduce using rule 105 (factor -> NUM .)
    TIMES           reduce using rule 105 (factor -> NUM .)
    DIVIDE          reduce using rule 105 (factor -> NUM .)
    LESS            reduce using rule 105 (factor -> NUM .)
    LESSEQUAL       reduce using rule 105 (factor -> NUM .)
    GREATER         reduce using rule 105 (factor -> NUM .)
    GREATEREQUAL    reduce using rule 105 (factor -> NUM .)
    DEQUAL          reduce using rule 105 (factor -> NUM .)
    DISTINT         reduce using rule 105 (factor -> NUM .)
    ISEQUAL         reduce using rule 105 (factor -> NUM .)
    PLUS            reduce using rule 105 (factor -> NUM .)
    MINUS           reduce using rule 105 (factor -> NUM .)

  ! SEMI            [ reduce using rule 105 (factor -> NUM .) ]


state 91

    (104) factor -> var .

    MINUSMINUS      reduce using rule 104 (factor -> var .)
    PLUSPLUS        reduce using rule 104 (factor -> var .)
    TIMES           reduce using rule 104 (factor -> var .)
    DIVIDE          reduce using rule 104 (factor -> var .)
    LESS            reduce using rule 104 (factor -> var .)
    LESSEQUAL       reduce using rule 104 (factor -> var .)
    GREATER         reduce using rule 104 (factor -> var .)
    GREATEREQUAL    reduce using rule 104 (factor -> var .)
    DEQUAL          reduce using rule 104 (factor -> var .)
    DISTINT         reduce using rule 104 (factor -> var .)
    ISEQUAL         reduce using rule 104 (factor -> var .)
    PLUS            reduce using rule 104 (factor -> var .)
    MINUS           reduce using rule 104 (factor -> var .)
    SEMI            reduce using rule 104 (factor -> var .)
    AND             reduce using rule 104 (factor -> var .)
    OR              reduce using rule 104 (factor -> var .)
    RPAREN          reduce using rule 104 (factor -> var .)
    RBRACKET        reduce using rule 104 (factor -> var .)
    COMMA           reduce using rule 104 (factor -> var .)


state 92

    (38) var_declaration -> IDVAR EQUAL IDVAR . SEMI var_declaration
    (39) var_declaration -> IDVAR EQUAL IDVAR . SEMI
    (107) factor -> IDVAR . LPAREN args RPAREN
    (82) var -> IDVAR .
    (83) var -> IDVAR . LBRACKET expression RBRACKET

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 147
    LPAREN          shift and go to state 125
    MINUSMINUS      reduce using rule 82 (var -> IDVAR .)
    PLUSPLUS        reduce using rule 82 (var -> IDVAR .)
    TIMES           reduce using rule 82 (var -> IDVAR .)
    DIVIDE          reduce using rule 82 (var -> IDVAR .)
    LESS            reduce using rule 82 (var -> IDVAR .)
    LESSEQUAL       reduce using rule 82 (var -> IDVAR .)
    GREATER         reduce using rule 82 (var -> IDVAR .)
    GREATEREQUAL    reduce using rule 82 (var -> IDVAR .)
    DEQUAL          reduce using rule 82 (var -> IDVAR .)
    DISTINT         reduce using rule 82 (var -> IDVAR .)
    ISEQUAL         reduce using rule 82 (var -> IDVAR .)
    PLUS            reduce using rule 82 (var -> IDVAR .)
    MINUS           reduce using rule 82 (var -> IDVAR .)
    LBRACKET        shift and go to state 124

  ! SEMI            [ reduce using rule 82 (var -> IDVAR .) ]


state 93

    (22) class_declaration -> CLASS ID LBLOCK . attribute RBLOCK
    (23) attribute -> . attribute area var_declaration
    (24) attribute -> . area var_declaration
    (25) attribute -> . attribute area fun_declaration
    (26) attribute -> . area fun_declaration
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED

    PRIVATE         shift and go to state 12
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 31

    attribute                      shift and go to state 149
    area                           shift and go to state 148

state 94

    (40) var_declaration -> AMPERSANT IDVAR SEMI . var_declaration
    (42) var_declaration -> AMPERSANT IDVAR SEMI .
    (30) var_declaration -> . IDVAR SEMI var_declaration
    (31) var_declaration -> . IDVAR SEMI
    (32) var_declaration -> . TIMESTIMES IDVAR SEMI
    (33) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUM SEMI
    (36) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMI
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (40) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMI
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMI

    CLOSETAG        reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    IDVAR           reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    TIMESTIMES      reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    AMPERSANT       reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    FUNCTION        reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    PRIVATE         reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    PUBLIC          reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    PROTECTED       reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    REQUIRE         reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    INCLUDE         reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    CLASS           reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    IF              reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    SWITCH          reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    CASE            reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    DEFAULT         reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    FOR             reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    WHILE           reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    DO              reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    ID              reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    ECHO            reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    SEMI            reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    RBLOCK          reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    LBLOCK          reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    RETURN          reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    LPAREN          reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    NUM             reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    TRUE            reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)
    FALSE           reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMI .)

  ! IDVAR           [ shift and go to state 16 ]
  ! TIMESTIMES      [ shift and go to state 7 ]
  ! AMPERSANT       [ shift and go to state 21 ]

    var_declaration                shift and go to state 150

state 95

    (41) var_declaration -> AMPERSANT IDVAR EQUAL . IDVAR SEMI selection_stmt

    IDVAR           shift and go to state 151


state 96

    (72) iteration_stmt -> FOR LPAREN var_declaration . SEMI expression SEMI additive_expression RPAREN statement

    SEMI            shift and go to state 152


state 97

    (20) header_declaration -> INCLUDE LPAREN STRING . RPAREN SEMI

    RPAREN          shift and go to state 153


state 98

    (13) echo_stmt -> echo_stmt ECHO STRING . SEMI

    SEMI            shift and go to state 154


state 99

    (17) echo_stmt -> echo_stmt ECHO boolean . SEMI

    SEMI            shift and go to state 155


state 100

    (18) echo_stmt -> echo_stmt ECHO fun_declaration . SEMI

    SEMI            shift and go to state 156


state 101

    (16) echo_stmt -> echo_stmt ECHO NUM . SEMI

    SEMI            shift and go to state 157


state 102

    (14) echo_stmt -> echo_stmt ECHO IDVAR . SEMI

    SEMI            shift and go to state 158


state 103

    (65) selection_stmt -> IF LPAREN expression . RPAREN statement
    (66) selection_stmt -> IF LPAREN expression . RPAREN statement selection
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    RPAREN          shift and go to state 159
    AND             shift and go to state 133
    OR              shift and go to state 134


state 104

    (46) params -> param_list .
    (48) param_list -> param_list . COMMA param_list

    RPAREN          reduce using rule 46 (params -> param_list .)
    COMMA           shift and go to state 160


state 105

    (49) param_list -> param .

    COMMA           reduce using rule 49 (param_list -> param .)
    RPAREN          reduce using rule 49 (param_list -> param .)


state 106

    (44) fun_declaration -> FUNCTION ID LPAREN params . RPAREN
    (45) fun_declaration -> FUNCTION ID LPAREN params . RPAREN compount_stmt

    RPAREN          shift and go to state 161


state 107

    (50) param -> IDVAR .
    (51) param -> IDVAR . LBRACKET RBRACKET

    COMMA           reduce using rule 50 (param -> IDVAR .)
    RPAREN          reduce using rule 50 (param -> IDVAR .)
    LBRACKET        shift and go to state 162


state 108

    (47) params -> empty .

    RPAREN          reduce using rule 47 (params -> empty .)


state 109

    (75) return_stmt -> RETURN SEMI .

    CLOSETAG        reduce using rule 75 (return_stmt -> RETURN SEMI .)
    IDVAR           reduce using rule 75 (return_stmt -> RETURN SEMI .)
    TIMESTIMES      reduce using rule 75 (return_stmt -> RETURN SEMI .)
    AMPERSANT       reduce using rule 75 (return_stmt -> RETURN SEMI .)
    FUNCTION        reduce using rule 75 (return_stmt -> RETURN SEMI .)
    PRIVATE         reduce using rule 75 (return_stmt -> RETURN SEMI .)
    PUBLIC          reduce using rule 75 (return_stmt -> RETURN SEMI .)
    PROTECTED       reduce using rule 75 (return_stmt -> RETURN SEMI .)
    REQUIRE         reduce using rule 75 (return_stmt -> RETURN SEMI .)
    INCLUDE         reduce using rule 75 (return_stmt -> RETURN SEMI .)
    CLASS           reduce using rule 75 (return_stmt -> RETURN SEMI .)
    IF              reduce using rule 75 (return_stmt -> RETURN SEMI .)
    SWITCH          reduce using rule 75 (return_stmt -> RETURN SEMI .)
    CASE            reduce using rule 75 (return_stmt -> RETURN SEMI .)
    DEFAULT         reduce using rule 75 (return_stmt -> RETURN SEMI .)
    FOR             reduce using rule 75 (return_stmt -> RETURN SEMI .)
    WHILE           reduce using rule 75 (return_stmt -> RETURN SEMI .)
    DO              reduce using rule 75 (return_stmt -> RETURN SEMI .)
    ID              reduce using rule 75 (return_stmt -> RETURN SEMI .)
    ECHO            reduce using rule 75 (return_stmt -> RETURN SEMI .)
    SEMI            reduce using rule 75 (return_stmt -> RETURN SEMI .)
    BREAK           reduce using rule 75 (return_stmt -> RETURN SEMI .)
    ELSE            reduce using rule 75 (return_stmt -> RETURN SEMI .)
    ELSEIF          reduce using rule 75 (return_stmt -> RETURN SEMI .)
    RBLOCK          reduce using rule 75 (return_stmt -> RETURN SEMI .)
    LBLOCK          reduce using rule 75 (return_stmt -> RETURN SEMI .)
    RETURN          reduce using rule 75 (return_stmt -> RETURN SEMI .)
    LPAREN          reduce using rule 75 (return_stmt -> RETURN SEMI .)
    NUM             reduce using rule 75 (return_stmt -> RETURN SEMI .)
    TRUE            reduce using rule 75 (return_stmt -> RETURN SEMI .)
    FALSE           reduce using rule 75 (return_stmt -> RETURN SEMI .)


state 110

    (76) return_stmt -> RETURN expression . SEMI
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    SEMI            shift and go to state 163
    AND             shift and go to state 133
    OR              shift and go to state 134


state 111

    (52) compount_stmt -> LBLOCK echo_stmt . local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (13) echo_stmt -> echo_stmt . ECHO STRING SEMI
    (14) echo_stmt -> echo_stmt . ECHO IDVAR SEMI
    (16) echo_stmt -> echo_stmt . ECHO NUM SEMI
    (17) echo_stmt -> echo_stmt . ECHO boolean SEMI
    (18) echo_stmt -> echo_stmt . ECHO fun_declaration SEMI
    (53) local_declarations -> . local_declarations var_declaration
    (54) local_declarations -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ECHO resolved as shift
    ECHO            shift and go to state 50
    IDVAR           reduce using rule 118 (empty -> .)
    TIMESTIMES      reduce using rule 118 (empty -> .)
    AMPERSANT       reduce using rule 118 (empty -> .)
    LBLOCK          reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    SWITCH          reduce using rule 118 (empty -> .)
    CASE            reduce using rule 118 (empty -> .)
    DEFAULT         reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    DO              reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)
    CLASS           reduce using rule 118 (empty -> .)
    PRIVATE         reduce using rule 118 (empty -> .)
    PUBLIC          reduce using rule 118 (empty -> .)
    PROTECTED       reduce using rule 118 (empty -> .)
    LPAREN          reduce using rule 118 (empty -> .)
    NUM             reduce using rule 118 (empty -> .)
    TRUE            reduce using rule 118 (empty -> .)
    FALSE           reduce using rule 118 (empty -> .)
    RBLOCK          reduce using rule 118 (empty -> .)

  ! ECHO            [ reduce using rule 118 (empty -> .) ]

    local_declarations             shift and go to state 164
    empty                          shift and go to state 165

state 112

    (93) additive_expression -> additive_expression addop . term
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    IDVAR           shift and go to state 167
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

    term                           shift and go to state 166
    boolean                        shift and go to state 75
    factor                         shift and go to state 68
    var                            shift and go to state 91

state 113

    (84) simple_expression -> additive_expression relop . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    IDVAR           shift and go to state 167
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

    term                           shift and go to state 72
    boolean                        shift and go to state 75
    factor                         shift and go to state 68
    var                            shift and go to state 91
    additive_expression            shift and go to state 168

state 114

    (86) relop -> LESS .

    LPAREN          reduce using rule 86 (relop -> LESS .)
    NUM             reduce using rule 86 (relop -> LESS .)
    IDVAR           reduce using rule 86 (relop -> LESS .)
    TRUE            reduce using rule 86 (relop -> LESS .)
    FALSE           reduce using rule 86 (relop -> LESS .)


state 115

    (90) relop -> DEQUAL .

    LPAREN          reduce using rule 90 (relop -> DEQUAL .)
    NUM             reduce using rule 90 (relop -> DEQUAL .)
    IDVAR           reduce using rule 90 (relop -> DEQUAL .)
    TRUE            reduce using rule 90 (relop -> DEQUAL .)
    FALSE           reduce using rule 90 (relop -> DEQUAL .)


state 116

    (91) relop -> DISTINT .

    LPAREN          reduce using rule 91 (relop -> DISTINT .)
    NUM             reduce using rule 91 (relop -> DISTINT .)
    IDVAR           reduce using rule 91 (relop -> DISTINT .)
    TRUE            reduce using rule 91 (relop -> DISTINT .)
    FALSE           reduce using rule 91 (relop -> DISTINT .)


state 117

    (89) relop -> GREATEREQUAL .

    LPAREN          reduce using rule 89 (relop -> GREATEREQUAL .)
    NUM             reduce using rule 89 (relop -> GREATEREQUAL .)
    IDVAR           reduce using rule 89 (relop -> GREATEREQUAL .)
    TRUE            reduce using rule 89 (relop -> GREATEREQUAL .)
    FALSE           reduce using rule 89 (relop -> GREATEREQUAL .)


state 118

    (97) addop -> PLUS .

    LPAREN          reduce using rule 97 (addop -> PLUS .)
    NUM             reduce using rule 97 (addop -> PLUS .)
    IDVAR           reduce using rule 97 (addop -> PLUS .)
    TRUE            reduce using rule 97 (addop -> PLUS .)
    FALSE           reduce using rule 97 (addop -> PLUS .)


state 119

    (92) relop -> ISEQUAL .

    LPAREN          reduce using rule 92 (relop -> ISEQUAL .)
    NUM             reduce using rule 92 (relop -> ISEQUAL .)
    IDVAR           reduce using rule 92 (relop -> ISEQUAL .)
    TRUE            reduce using rule 92 (relop -> ISEQUAL .)
    FALSE           reduce using rule 92 (relop -> ISEQUAL .)


state 120

    (87) relop -> LESSEQUAL .

    LPAREN          reduce using rule 87 (relop -> LESSEQUAL .)
    NUM             reduce using rule 87 (relop -> LESSEQUAL .)
    IDVAR           reduce using rule 87 (relop -> LESSEQUAL .)
    TRUE            reduce using rule 87 (relop -> LESSEQUAL .)
    FALSE           reduce using rule 87 (relop -> LESSEQUAL .)


state 121

    (98) addop -> MINUS .

    LPAREN          reduce using rule 98 (addop -> MINUS .)
    NUM             reduce using rule 98 (addop -> MINUS .)
    IDVAR           reduce using rule 98 (addop -> MINUS .)
    TRUE            reduce using rule 98 (addop -> MINUS .)
    FALSE           reduce using rule 98 (addop -> MINUS .)


state 122

    (88) relop -> GREATER .

    LPAREN          reduce using rule 88 (relop -> GREATER .)
    NUM             reduce using rule 88 (relop -> GREATER .)
    IDVAR           reduce using rule 88 (relop -> GREATER .)
    TRUE            reduce using rule 88 (relop -> GREATER .)
    FALSE           reduce using rule 88 (relop -> GREATER .)


state 123

    (74) iteration_stmt -> DO LBLOCK statement SEMI . RBLOCK WHILE LPAREN expression RPAREN

    RBLOCK          shift and go to state 169


state 124

    (83) var -> IDVAR LBRACKET . expression RBRACKET
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

    term                           shift and go to state 72
    boolean                        shift and go to state 75
    factor                         shift and go to state 68
    var                            shift and go to state 66
    simple_expression              shift and go to state 58
    expression                     shift and go to state 170
    additive_expression            shift and go to state 60

state 125

    (107) factor -> IDVAR LPAREN . args RPAREN
    (108) args -> . args_list
    (109) args -> . empty
    (110) args -> . VOID
    (111) args_list -> . args_list COMMA expression
    (112) args_list -> . expression
    (118) empty -> .
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    VOID            shift and go to state 171
    RPAREN          reduce using rule 118 (empty -> .)
    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

    term                           shift and go to state 72
    args                           shift and go to state 173
    args_list                      shift and go to state 174
    boolean                        shift and go to state 75
    additive_expression            shift and go to state 60
    factor                         shift and go to state 68
    var                            shift and go to state 66
    simple_expression              shift and go to state 58
    expression                     shift and go to state 175
    empty                          shift and go to state 172

state 126

    (77) expression -> var EQUAL . expression
    (79) expression -> var EQUAL . AMPERSANT IDVAR
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    AMPERSANT       shift and go to state 176
    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

    term                           shift and go to state 72
    boolean                        shift and go to state 75
    factor                         shift and go to state 68
    var                            shift and go to state 66
    simple_expression              shift and go to state 58
    expression                     shift and go to state 177
    additive_expression            shift and go to state 60

state 127

    (103) factor -> LPAREN expression . RPAREN
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    RPAREN          shift and go to state 178
    AND             shift and go to state 133
    OR              shift and go to state 134


state 128

    (102) mulop -> DIVIDE .

    LPAREN          reduce using rule 102 (mulop -> DIVIDE .)
    NUM             reduce using rule 102 (mulop -> DIVIDE .)
    IDVAR           reduce using rule 102 (mulop -> DIVIDE .)
    TRUE            reduce using rule 102 (mulop -> DIVIDE .)
    FALSE           reduce using rule 102 (mulop -> DIVIDE .)


state 129

    (96) additive_expression -> term PLUSPLUS .

    LESS            reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    LESSEQUAL       reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    GREATER         reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    GREATEREQUAL    reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    DEQUAL          reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    DISTINT         reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    ISEQUAL         reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    PLUS            reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    MINUS           reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    RPAREN          reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    AND             reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    OR              reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    SEMI            reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    RBRACKET        reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    COMMA           reduce using rule 96 (additive_expression -> term PLUSPLUS .)


state 130

    (101) mulop -> TIMES .

    LPAREN          reduce using rule 101 (mulop -> TIMES .)
    NUM             reduce using rule 101 (mulop -> TIMES .)
    IDVAR           reduce using rule 101 (mulop -> TIMES .)
    TRUE            reduce using rule 101 (mulop -> TIMES .)
    FALSE           reduce using rule 101 (mulop -> TIMES .)


state 131

    (99) term -> term mulop . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    IDVAR           shift and go to state 167
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

    boolean                        shift and go to state 75
    factor                         shift and go to state 179
    var                            shift and go to state 91

state 132

    (95) additive_expression -> term MINUSMINUS .

    LESS            reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    LESSEQUAL       reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    GREATER         reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    GREATEREQUAL    reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    DEQUAL          reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    DISTINT         reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    ISEQUAL         reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    PLUS            reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    MINUS           reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    RPAREN          reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    AND             reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    OR              reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    SEMI            reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    RBRACKET        reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    COMMA           reduce using rule 95 (additive_expression -> term MINUSMINUS .)


state 133

    (80) expression -> expression AND . expression
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

    term                           shift and go to state 72
    boolean                        shift and go to state 75
    factor                         shift and go to state 68
    var                            shift and go to state 66
    simple_expression              shift and go to state 58
    expression                     shift and go to state 180
    additive_expression            shift and go to state 60

state 134

    (81) expression -> expression OR . expression
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

    term                           shift and go to state 72
    boolean                        shift and go to state 75
    factor                         shift and go to state 68
    var                            shift and go to state 66
    simple_expression              shift and go to state 58
    expression                     shift and go to state 181
    additive_expression            shift and go to state 60

state 135

    (64) expression_stmt -> expression SEMI .

    CLOSETAG        reduce using rule 64 (expression_stmt -> expression SEMI .)
    IDVAR           reduce using rule 64 (expression_stmt -> expression SEMI .)
    TIMESTIMES      reduce using rule 64 (expression_stmt -> expression SEMI .)
    AMPERSANT       reduce using rule 64 (expression_stmt -> expression SEMI .)
    FUNCTION        reduce using rule 64 (expression_stmt -> expression SEMI .)
    PRIVATE         reduce using rule 64 (expression_stmt -> expression SEMI .)
    PUBLIC          reduce using rule 64 (expression_stmt -> expression SEMI .)
    PROTECTED       reduce using rule 64 (expression_stmt -> expression SEMI .)
    REQUIRE         reduce using rule 64 (expression_stmt -> expression SEMI .)
    INCLUDE         reduce using rule 64 (expression_stmt -> expression SEMI .)
    CLASS           reduce using rule 64 (expression_stmt -> expression SEMI .)
    IF              reduce using rule 64 (expression_stmt -> expression SEMI .)
    SWITCH          reduce using rule 64 (expression_stmt -> expression SEMI .)
    CASE            reduce using rule 64 (expression_stmt -> expression SEMI .)
    DEFAULT         reduce using rule 64 (expression_stmt -> expression SEMI .)
    FOR             reduce using rule 64 (expression_stmt -> expression SEMI .)
    WHILE           reduce using rule 64 (expression_stmt -> expression SEMI .)
    DO              reduce using rule 64 (expression_stmt -> expression SEMI .)
    ID              reduce using rule 64 (expression_stmt -> expression SEMI .)
    ECHO            reduce using rule 64 (expression_stmt -> expression SEMI .)
    SEMI            reduce using rule 64 (expression_stmt -> expression SEMI .)
    BREAK           reduce using rule 64 (expression_stmt -> expression SEMI .)
    ELSE            reduce using rule 64 (expression_stmt -> expression SEMI .)
    ELSEIF          reduce using rule 64 (expression_stmt -> expression SEMI .)
    RBLOCK          reduce using rule 64 (expression_stmt -> expression SEMI .)
    LBLOCK          reduce using rule 64 (expression_stmt -> expression SEMI .)
    RETURN          reduce using rule 64 (expression_stmt -> expression SEMI .)
    LPAREN          reduce using rule 64 (expression_stmt -> expression SEMI .)
    NUM             reduce using rule 64 (expression_stmt -> expression SEMI .)
    TRUE            reduce using rule 64 (expression_stmt -> expression SEMI .)
    FALSE           reduce using rule 64 (expression_stmt -> expression SEMI .)


state 136

    (71) selection_stmt -> DEFAULT COLON statement BREAK . SEMI

    SEMI            shift and go to state 182


state 137

    (19) header_declaration -> REQUIRE LPAREN STRING RPAREN . SEMI

    SEMI            shift and go to state 183


state 138

    (33) var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .

    CLOSETAG        reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    IDVAR           reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    TIMESTIMES      reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    AMPERSANT       reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    FUNCTION        reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    PRIVATE         reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    PUBLIC          reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    PROTECTED       reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    REQUIRE         reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    INCLUDE         reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    CLASS           reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    IF              reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    SWITCH          reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    CASE            reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    DEFAULT         reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    FOR             reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    WHILE           reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    DO              reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    ID              reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    ECHO            reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    SEMI            reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    RBLOCK          reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    LBLOCK          reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    RETURN          reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    LPAREN          reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    NUM             reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    TRUE            reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)
    FALSE           reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMI var_declaration .)


state 139

    (73) iteration_stmt -> WHILE LPAREN expression RPAREN . statement
    (57) statement -> . expression_stmt
    (58) statement -> . compount_stmt
    (59) statement -> . selection_stmt
    (60) statement -> . iteration_stmt
    (61) statement -> . return_stmt
    (62) statement -> . class_declaration
    (63) statement -> . echo_stmt
    (64) expression_stmt -> . expression SEMI
    (52) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (75) return_stmt -> . RETURN SEMI
    (76) return_stmt -> . RETURN expression SEMI
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (15) echo_stmt -> . empty
    (16) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (17) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (18) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (118) empty -> .
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LBLOCK          shift and go to state 57
    IF              shift and go to state 27
    SWITCH          shift and go to state 15
    CASE            shift and go to state 10
    DEFAULT         shift and go to state 5
    FOR             shift and go to state 22
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    RETURN          shift and go to state 55
    CLASS           shift and go to state 18
    PRIVATE         shift and go to state 12
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 31
    ECHO            reduce using rule 118 (empty -> .)
    CLOSETAG        reduce using rule 118 (empty -> .)
    TIMESTIMES      reduce using rule 118 (empty -> .)
    AMPERSANT       reduce using rule 118 (empty -> .)
    FUNCTION        reduce using rule 118 (empty -> .)
    REQUIRE         reduce using rule 118 (empty -> .)
    INCLUDE         reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    SEMI            reduce using rule 118 (empty -> .)
    BREAK           reduce using rule 118 (empty -> .)
    ELSE            reduce using rule 118 (empty -> .)
    ELSEIF          reduce using rule 118 (empty -> .)
    RBLOCK          reduce using rule 118 (empty -> .)
    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

  ! IDVAR           [ reduce using rule 118 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 118 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 118 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 118 (empty -> .) ]
  ! CLASS           [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! SWITCH          [ reduce using rule 118 (empty -> .) ]
  ! CASE            [ reduce using rule 118 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! DO              [ reduce using rule 118 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 118 (empty -> .) ]
  ! RETURN          [ reduce using rule 118 (empty -> .) ]
  ! LPAREN          [ reduce using rule 118 (empty -> .) ]
  ! NUM             [ reduce using rule 118 (empty -> .) ]
  ! TRUE            [ reduce using rule 118 (empty -> .) ]
  ! FALSE           [ reduce using rule 118 (empty -> .) ]

    boolean                        shift and go to state 75
    return_stmt                    shift and go to state 56
    simple_expression              shift and go to state 58
    additive_expression            shift and go to state 60
    area                           shift and go to state 61
    expression_stmt                shift and go to state 63
    statement                      shift and go to state 184
    factor                         shift and go to state 68
    var                            shift and go to state 66
    selection_stmt                 shift and go to state 67
    empty                          shift and go to state 19
    compount_stmt                  shift and go to state 69
    echo_stmt                      shift and go to state 71
    term                           shift and go to state 72
    class_declaration              shift and go to state 74
    iteration_stmt                 shift and go to state 76
    expression                     shift and go to state 77

state 140

    (70) selection_stmt -> CASE NUM COLON statement . BREAK SEMI

    BREAK           shift and go to state 185


state 141

    (21) class_declaration -> area CLASS ID LBLOCK . attribute RBLOCK
    (23) attribute -> . attribute area var_declaration
    (24) attribute -> . area var_declaration
    (25) attribute -> . attribute area fun_declaration
    (26) attribute -> . area fun_declaration
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED

    PRIVATE         shift and go to state 12
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 31

    attribute                      shift and go to state 186
    area                           shift and go to state 148

state 142

    (115) typeclass -> ID IDVAR EQUAL NEW . constructor SEMI
    (116) constructor -> . ID LPAREN RPAREN
    (117) constructor -> . ID LPAREN args RPAREN

    ID              shift and go to state 188

    constructor                    shift and go to state 187

state 143

    (69) selection_stmt -> SWITCH LPAREN var RPAREN . statement
    (57) statement -> . expression_stmt
    (58) statement -> . compount_stmt
    (59) statement -> . selection_stmt
    (60) statement -> . iteration_stmt
    (61) statement -> . return_stmt
    (62) statement -> . class_declaration
    (63) statement -> . echo_stmt
    (64) expression_stmt -> . expression SEMI
    (52) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (75) return_stmt -> . RETURN SEMI
    (76) return_stmt -> . RETURN expression SEMI
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (15) echo_stmt -> . empty
    (16) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (17) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (18) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (118) empty -> .
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LBLOCK          shift and go to state 57
    IF              shift and go to state 27
    SWITCH          shift and go to state 15
    CASE            shift and go to state 10
    DEFAULT         shift and go to state 5
    FOR             shift and go to state 22
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    RETURN          shift and go to state 55
    CLASS           shift and go to state 18
    PRIVATE         shift and go to state 12
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 31
    ECHO            reduce using rule 118 (empty -> .)
    CLOSETAG        reduce using rule 118 (empty -> .)
    TIMESTIMES      reduce using rule 118 (empty -> .)
    AMPERSANT       reduce using rule 118 (empty -> .)
    FUNCTION        reduce using rule 118 (empty -> .)
    REQUIRE         reduce using rule 118 (empty -> .)
    INCLUDE         reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    SEMI            reduce using rule 118 (empty -> .)
    BREAK           reduce using rule 118 (empty -> .)
    ELSE            reduce using rule 118 (empty -> .)
    ELSEIF          reduce using rule 118 (empty -> .)
    RBLOCK          reduce using rule 118 (empty -> .)
    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

  ! IDVAR           [ reduce using rule 118 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 118 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 118 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 118 (empty -> .) ]
  ! CLASS           [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! SWITCH          [ reduce using rule 118 (empty -> .) ]
  ! CASE            [ reduce using rule 118 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! DO              [ reduce using rule 118 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 118 (empty -> .) ]
  ! RETURN          [ reduce using rule 118 (empty -> .) ]
  ! LPAREN          [ reduce using rule 118 (empty -> .) ]
  ! NUM             [ reduce using rule 118 (empty -> .) ]
  ! TRUE            [ reduce using rule 118 (empty -> .) ]
  ! FALSE           [ reduce using rule 118 (empty -> .) ]

    boolean                        shift and go to state 75
    return_stmt                    shift and go to state 56
    simple_expression              shift and go to state 58
    additive_expression            shift and go to state 60
    area                           shift and go to state 61
    expression_stmt                shift and go to state 63
    statement                      shift and go to state 189
    factor                         shift and go to state 68
    var                            shift and go to state 66
    selection_stmt                 shift and go to state 67
    empty                          shift and go to state 19
    compount_stmt                  shift and go to state 69
    echo_stmt                      shift and go to state 71
    term                           shift and go to state 72
    class_declaration              shift and go to state 74
    iteration_stmt                 shift and go to state 76
    expression                     shift and go to state 77

state 144

    (36) var_declaration -> IDVAR EQUAL boolean SEMI . var_declaration
    (37) var_declaration -> IDVAR EQUAL boolean SEMI .
    (30) var_declaration -> . IDVAR SEMI var_declaration
    (31) var_declaration -> . IDVAR SEMI
    (32) var_declaration -> . TIMESTIMES IDVAR SEMI
    (33) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUM SEMI
    (36) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMI
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (40) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMI
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMI

    CLOSETAG        reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    IDVAR           reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    TIMESTIMES      reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    AMPERSANT       reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    FUNCTION        reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    PRIVATE         reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    PUBLIC          reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    PROTECTED       reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    REQUIRE         reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    INCLUDE         reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    CLASS           reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    IF              reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    SWITCH          reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    CASE            reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    DEFAULT         reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    FOR             reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    WHILE           reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    DO              reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    ID              reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    ECHO            reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    SEMI            reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    RBLOCK          reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    LBLOCK          reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    RETURN          reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    LPAREN          reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    NUM             reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    TRUE            reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)
    FALSE           reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMI .)

  ! IDVAR           [ shift and go to state 16 ]
  ! TIMESTIMES      [ shift and go to state 7 ]
  ! AMPERSANT       [ shift and go to state 21 ]

    var_declaration                shift and go to state 190

state 145

    (43) var_declaration -> IDVAR EQUAL simple_expression SEMI .

    CLOSETAG        reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    IDVAR           reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    TIMESTIMES      reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    AMPERSANT       reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    FUNCTION        reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    PRIVATE         reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    PUBLIC          reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    PROTECTED       reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    REQUIRE         reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    INCLUDE         reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    CLASS           reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    IF              reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    SWITCH          reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    CASE            reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    DEFAULT         reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    FOR             reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    WHILE           reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    DO              reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    ID              reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    ECHO            reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    SEMI            reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    RBLOCK          reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    LBLOCK          reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    RETURN          reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    LPAREN          reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    NUM             reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    TRUE            reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)
    FALSE           reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMI .)


state 146

    (34) var_declaration -> IDVAR EQUAL NUM SEMI . var_declaration
    (35) var_declaration -> IDVAR EQUAL NUM SEMI .
    (30) var_declaration -> . IDVAR SEMI var_declaration
    (31) var_declaration -> . IDVAR SEMI
    (32) var_declaration -> . TIMESTIMES IDVAR SEMI
    (33) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUM SEMI
    (36) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMI
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (40) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMI
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMI

    CLOSETAG        reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    IDVAR           reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    TIMESTIMES      reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    AMPERSANT       reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    FUNCTION        reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    PRIVATE         reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    PUBLIC          reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    PROTECTED       reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    REQUIRE         reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    INCLUDE         reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    CLASS           reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    IF              reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    SWITCH          reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    CASE            reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    DEFAULT         reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    FOR             reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    WHILE           reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    DO              reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    ID              reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    ECHO            reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    SEMI            reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    RBLOCK          reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    LBLOCK          reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    RETURN          reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    LPAREN          reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    NUM             reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    TRUE            reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)
    FALSE           reduce using rule 35 (var_declaration -> IDVAR EQUAL NUM SEMI .)

  ! IDVAR           [ shift and go to state 16 ]
  ! TIMESTIMES      [ shift and go to state 7 ]
  ! AMPERSANT       [ shift and go to state 21 ]

    var_declaration                shift and go to state 191

state 147

    (38) var_declaration -> IDVAR EQUAL IDVAR SEMI . var_declaration
    (39) var_declaration -> IDVAR EQUAL IDVAR SEMI .
    (30) var_declaration -> . IDVAR SEMI var_declaration
    (31) var_declaration -> . IDVAR SEMI
    (32) var_declaration -> . TIMESTIMES IDVAR SEMI
    (33) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUM SEMI
    (36) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMI
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (40) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMI
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMI

    CLOSETAG        reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    IDVAR           reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    TIMESTIMES      reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    AMPERSANT       reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    FUNCTION        reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    PRIVATE         reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    PUBLIC          reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    PROTECTED       reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    REQUIRE         reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    INCLUDE         reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    CLASS           reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    IF              reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    SWITCH          reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    CASE            reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    DEFAULT         reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    FOR             reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    WHILE           reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    DO              reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    ID              reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    ECHO            reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    SEMI            reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    RBLOCK          reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    LBLOCK          reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    RETURN          reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    LPAREN          reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    NUM             reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    TRUE            reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)
    FALSE           reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMI .)

  ! IDVAR           [ shift and go to state 16 ]
  ! TIMESTIMES      [ shift and go to state 7 ]
  ! AMPERSANT       [ shift and go to state 21 ]

    var_declaration                shift and go to state 192

state 148

    (24) attribute -> area . var_declaration
    (26) attribute -> area . fun_declaration
    (30) var_declaration -> . IDVAR SEMI var_declaration
    (31) var_declaration -> . IDVAR SEMI
    (32) var_declaration -> . TIMESTIMES IDVAR SEMI
    (33) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUM SEMI
    (36) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMI
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (40) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMI
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMI
    (44) fun_declaration -> . FUNCTION ID LPAREN params RPAREN
    (45) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt

    IDVAR           shift and go to state 16
    TIMESTIMES      shift and go to state 7
    AMPERSANT       shift and go to state 21
    FUNCTION        shift and go to state 3

    fun_declaration                shift and go to state 193
    var_declaration                shift and go to state 194

state 149

    (22) class_declaration -> CLASS ID LBLOCK attribute . RBLOCK
    (23) attribute -> attribute . area var_declaration
    (25) attribute -> attribute . area fun_declaration
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED

    RBLOCK          shift and go to state 196
    PRIVATE         shift and go to state 12
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 31

    area                           shift and go to state 195

state 150

    (40) var_declaration -> AMPERSANT IDVAR SEMI var_declaration .

    CLOSETAG        reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    IDVAR           reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    TIMESTIMES      reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    AMPERSANT       reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    FUNCTION        reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    PRIVATE         reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    PUBLIC          reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    PROTECTED       reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    REQUIRE         reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    INCLUDE         reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    CLASS           reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    IF              reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    SWITCH          reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    CASE            reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    DEFAULT         reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    FOR             reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    WHILE           reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    DO              reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    ID              reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    ECHO            reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    SEMI            reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    RBLOCK          reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    LBLOCK          reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    RETURN          reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    LPAREN          reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    NUM             reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    TRUE            reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)
    FALSE           reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMI var_declaration .)


state 151

    (41) var_declaration -> AMPERSANT IDVAR EQUAL IDVAR . SEMI selection_stmt

    SEMI            shift and go to state 197


state 152

    (72) iteration_stmt -> FOR LPAREN var_declaration SEMI . expression SEMI additive_expression RPAREN statement
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

    term                           shift and go to state 72
    boolean                        shift and go to state 75
    factor                         shift and go to state 68
    var                            shift and go to state 66
    simple_expression              shift and go to state 58
    expression                     shift and go to state 198
    additive_expression            shift and go to state 60

state 153

    (20) header_declaration -> INCLUDE LPAREN STRING RPAREN . SEMI

    SEMI            shift and go to state 199


state 154

    (13) echo_stmt -> echo_stmt ECHO STRING SEMI .

    ECHO            reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    ELSE            reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    ELSEIF          reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    LBLOCK          reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    IF              reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    SWITCH          reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    CASE            reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    DEFAULT         reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    FOR             reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    WHILE           reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    DO              reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    RETURN          reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    CLASS           reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    PRIVATE         reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    PUBLIC          reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    PROTECTED       reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    IDVAR           reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    LPAREN          reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    NUM             reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    TRUE            reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    FALSE           reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    RBLOCK          reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    SEMI            reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    TIMESTIMES      reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    AMPERSANT       reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    BREAK           reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    CLOSETAG        reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    FUNCTION        reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    REQUIRE         reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    INCLUDE         reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    ID              reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMI .)


state 155

    (17) echo_stmt -> echo_stmt ECHO boolean SEMI .

    ECHO            reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    ELSE            reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    ELSEIF          reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    LBLOCK          reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    IF              reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    SWITCH          reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    CASE            reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    DEFAULT         reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    FOR             reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    WHILE           reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    DO              reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    RETURN          reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    CLASS           reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    PRIVATE         reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    PUBLIC          reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    PROTECTED       reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    IDVAR           reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    LPAREN          reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    NUM             reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    TRUE            reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    FALSE           reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    RBLOCK          reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    SEMI            reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    TIMESTIMES      reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    AMPERSANT       reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    BREAK           reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    CLOSETAG        reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    FUNCTION        reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    REQUIRE         reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    INCLUDE         reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    ID              reduce using rule 17 (echo_stmt -> echo_stmt ECHO boolean SEMI .)


state 156

    (18) echo_stmt -> echo_stmt ECHO fun_declaration SEMI .

    ECHO            reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    ELSE            reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    ELSEIF          reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    LBLOCK          reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    IF              reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    SWITCH          reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    CASE            reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    DEFAULT         reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    FOR             reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    WHILE           reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    DO              reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    RETURN          reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    CLASS           reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    PRIVATE         reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    PUBLIC          reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    PROTECTED       reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    IDVAR           reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    LPAREN          reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    NUM             reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    TRUE            reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    FALSE           reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    RBLOCK          reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    SEMI            reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    TIMESTIMES      reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    AMPERSANT       reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    BREAK           reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    CLOSETAG        reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    FUNCTION        reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    REQUIRE         reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    INCLUDE         reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    ID              reduce using rule 18 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)


state 157

    (16) echo_stmt -> echo_stmt ECHO NUM SEMI .

    ECHO            reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    ELSE            reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    ELSEIF          reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    LBLOCK          reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    IF              reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    SWITCH          reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    CASE            reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    DEFAULT         reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    FOR             reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    WHILE           reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    DO              reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    RETURN          reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    CLASS           reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    PRIVATE         reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    PUBLIC          reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    PROTECTED       reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    IDVAR           reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    LPAREN          reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    NUM             reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    TRUE            reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    FALSE           reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    RBLOCK          reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    SEMI            reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    TIMESTIMES      reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    AMPERSANT       reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    BREAK           reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    CLOSETAG        reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    FUNCTION        reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    REQUIRE         reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    INCLUDE         reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    ID              reduce using rule 16 (echo_stmt -> echo_stmt ECHO NUM SEMI .)


state 158

    (14) echo_stmt -> echo_stmt ECHO IDVAR SEMI .

    ECHO            reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    ELSE            reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    ELSEIF          reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    LBLOCK          reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    IF              reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    SWITCH          reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    CASE            reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    DEFAULT         reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    FOR             reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    WHILE           reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    DO              reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    RETURN          reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    CLASS           reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    PRIVATE         reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    PUBLIC          reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    PROTECTED       reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    IDVAR           reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    LPAREN          reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    NUM             reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    TRUE            reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    FALSE           reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    RBLOCK          reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    SEMI            reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    TIMESTIMES      reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    AMPERSANT       reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    BREAK           reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    CLOSETAG        reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    FUNCTION        reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    REQUIRE         reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    INCLUDE         reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)
    ID              reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMI .)


state 159

    (65) selection_stmt -> IF LPAREN expression RPAREN . statement
    (66) selection_stmt -> IF LPAREN expression RPAREN . statement selection
    (57) statement -> . expression_stmt
    (58) statement -> . compount_stmt
    (59) statement -> . selection_stmt
    (60) statement -> . iteration_stmt
    (61) statement -> . return_stmt
    (62) statement -> . class_declaration
    (63) statement -> . echo_stmt
    (64) expression_stmt -> . expression SEMI
    (52) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (75) return_stmt -> . RETURN SEMI
    (76) return_stmt -> . RETURN expression SEMI
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (15) echo_stmt -> . empty
    (16) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (17) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (18) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (118) empty -> .
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LBLOCK          shift and go to state 57
    IF              shift and go to state 27
    SWITCH          shift and go to state 15
    CASE            shift and go to state 10
    DEFAULT         shift and go to state 5
    FOR             shift and go to state 22
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    RETURN          shift and go to state 55
    CLASS           shift and go to state 18
    PRIVATE         shift and go to state 12
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 31
    ECHO            reduce using rule 118 (empty -> .)
    CLOSETAG        reduce using rule 118 (empty -> .)
    TIMESTIMES      reduce using rule 118 (empty -> .)
    AMPERSANT       reduce using rule 118 (empty -> .)
    FUNCTION        reduce using rule 118 (empty -> .)
    REQUIRE         reduce using rule 118 (empty -> .)
    INCLUDE         reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    SEMI            reduce using rule 118 (empty -> .)
    BREAK           reduce using rule 118 (empty -> .)
    ELSE            reduce using rule 118 (empty -> .)
    ELSEIF          reduce using rule 118 (empty -> .)
    RBLOCK          reduce using rule 118 (empty -> .)
    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

  ! IDVAR           [ reduce using rule 118 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 118 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 118 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 118 (empty -> .) ]
  ! CLASS           [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! SWITCH          [ reduce using rule 118 (empty -> .) ]
  ! CASE            [ reduce using rule 118 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! DO              [ reduce using rule 118 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 118 (empty -> .) ]
  ! RETURN          [ reduce using rule 118 (empty -> .) ]
  ! LPAREN          [ reduce using rule 118 (empty -> .) ]
  ! NUM             [ reduce using rule 118 (empty -> .) ]
  ! TRUE            [ reduce using rule 118 (empty -> .) ]
  ! FALSE           [ reduce using rule 118 (empty -> .) ]

    boolean                        shift and go to state 75
    return_stmt                    shift and go to state 56
    simple_expression              shift and go to state 58
    additive_expression            shift and go to state 60
    area                           shift and go to state 61
    expression_stmt                shift and go to state 63
    statement                      shift and go to state 200
    factor                         shift and go to state 68
    var                            shift and go to state 66
    selection_stmt                 shift and go to state 67
    empty                          shift and go to state 19
    compount_stmt                  shift and go to state 69
    echo_stmt                      shift and go to state 71
    term                           shift and go to state 72
    class_declaration              shift and go to state 74
    iteration_stmt                 shift and go to state 76
    expression                     shift and go to state 77

state 160

    (48) param_list -> param_list COMMA . param_list
    (48) param_list -> . param_list COMMA param_list
    (49) param_list -> . param
    (50) param -> . IDVAR
    (51) param -> . IDVAR LBRACKET RBRACKET

    IDVAR           shift and go to state 107

    param_list                     shift and go to state 201
    param                          shift and go to state 105

state 161

    (44) fun_declaration -> FUNCTION ID LPAREN params RPAREN .
    (45) fun_declaration -> FUNCTION ID LPAREN params RPAREN . compount_stmt
    (52) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK

    CLOSETAG        reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    IDVAR           reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    TIMESTIMES      reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    AMPERSANT       reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    FUNCTION        reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    PRIVATE         reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    PUBLIC          reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    PROTECTED       reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    REQUIRE         reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    INCLUDE         reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    CLASS           reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    IF              reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    SWITCH          reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    CASE            reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    DEFAULT         reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    FOR             reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    WHILE           reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    DO              reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    ID              reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    ECHO            reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    RBLOCK          reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    SEMI            reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    LBLOCK          shift and go to state 57

    compount_stmt                  shift and go to state 202

state 162

    (51) param -> IDVAR LBRACKET . RBRACKET

    RBRACKET        shift and go to state 203


state 163

    (76) return_stmt -> RETURN expression SEMI .

    CLOSETAG        reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    IDVAR           reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    TIMESTIMES      reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    AMPERSANT       reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    FUNCTION        reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    PRIVATE         reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    PUBLIC          reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    PROTECTED       reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    REQUIRE         reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    INCLUDE         reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    CLASS           reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    IF              reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    SWITCH          reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    CASE            reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    DEFAULT         reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    FOR             reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    WHILE           reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    DO              reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    ID              reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    ECHO            reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    SEMI            reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    BREAK           reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    ELSE            reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    ELSEIF          reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    RBLOCK          reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    LBLOCK          reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    RETURN          reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    LPAREN          reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    NUM             reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    TRUE            reduce using rule 76 (return_stmt -> RETURN expression SEMI .)
    FALSE           reduce using rule 76 (return_stmt -> RETURN expression SEMI .)


state 164

    (52) compount_stmt -> LBLOCK echo_stmt local_declarations . echo_stmt statement_list echo_stmt RBLOCK
    (53) local_declarations -> local_declarations . var_declaration
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (15) echo_stmt -> . empty
    (16) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (17) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (18) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (30) var_declaration -> . IDVAR SEMI var_declaration
    (31) var_declaration -> . IDVAR SEMI
    (32) var_declaration -> . TIMESTIMES IDVAR SEMI
    (33) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUM SEMI
    (36) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMI
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (40) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMI
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMI
    (118) empty -> .

  ! shift/reduce conflict for IDVAR resolved as shift
    IDVAR           shift and go to state 16
    TIMESTIMES      shift and go to state 7
    AMPERSANT       shift and go to state 21
    ECHO            reduce using rule 118 (empty -> .)
    LBLOCK          reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    SWITCH          reduce using rule 118 (empty -> .)
    CASE            reduce using rule 118 (empty -> .)
    DEFAULT         reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    DO              reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)
    CLASS           reduce using rule 118 (empty -> .)
    PRIVATE         reduce using rule 118 (empty -> .)
    PUBLIC          reduce using rule 118 (empty -> .)
    PROTECTED       reduce using rule 118 (empty -> .)
    LPAREN          reduce using rule 118 (empty -> .)
    NUM             reduce using rule 118 (empty -> .)
    TRUE            reduce using rule 118 (empty -> .)
    FALSE           reduce using rule 118 (empty -> .)
    RBLOCK          reduce using rule 118 (empty -> .)

  ! IDVAR           [ reduce using rule 118 (empty -> .) ]

    var_declaration                shift and go to state 204
    echo_stmt                      shift and go to state 205
    empty                          shift and go to state 19

state 165

    (54) local_declarations -> empty .

    IDVAR           reduce using rule 54 (local_declarations -> empty .)
    TIMESTIMES      reduce using rule 54 (local_declarations -> empty .)
    AMPERSANT       reduce using rule 54 (local_declarations -> empty .)
    ECHO            reduce using rule 54 (local_declarations -> empty .)
    LBLOCK          reduce using rule 54 (local_declarations -> empty .)
    IF              reduce using rule 54 (local_declarations -> empty .)
    SWITCH          reduce using rule 54 (local_declarations -> empty .)
    CASE            reduce using rule 54 (local_declarations -> empty .)
    DEFAULT         reduce using rule 54 (local_declarations -> empty .)
    FOR             reduce using rule 54 (local_declarations -> empty .)
    WHILE           reduce using rule 54 (local_declarations -> empty .)
    DO              reduce using rule 54 (local_declarations -> empty .)
    RETURN          reduce using rule 54 (local_declarations -> empty .)
    CLASS           reduce using rule 54 (local_declarations -> empty .)
    PRIVATE         reduce using rule 54 (local_declarations -> empty .)
    PUBLIC          reduce using rule 54 (local_declarations -> empty .)
    PROTECTED       reduce using rule 54 (local_declarations -> empty .)
    LPAREN          reduce using rule 54 (local_declarations -> empty .)
    NUM             reduce using rule 54 (local_declarations -> empty .)
    TRUE            reduce using rule 54 (local_declarations -> empty .)
    FALSE           reduce using rule 54 (local_declarations -> empty .)
    RBLOCK          reduce using rule 54 (local_declarations -> empty .)


state 166

    (93) additive_expression -> additive_expression addop term .
    (99) term -> term . mulop factor
    (101) mulop -> . TIMES
    (102) mulop -> . DIVIDE

    LESS            reduce using rule 93 (additive_expression -> additive_expression addop term .)
    LESSEQUAL       reduce using rule 93 (additive_expression -> additive_expression addop term .)
    GREATER         reduce using rule 93 (additive_expression -> additive_expression addop term .)
    GREATEREQUAL    reduce using rule 93 (additive_expression -> additive_expression addop term .)
    DEQUAL          reduce using rule 93 (additive_expression -> additive_expression addop term .)
    DISTINT         reduce using rule 93 (additive_expression -> additive_expression addop term .)
    ISEQUAL         reduce using rule 93 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 93 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 93 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 93 (additive_expression -> additive_expression addop term .)
    AND             reduce using rule 93 (additive_expression -> additive_expression addop term .)
    OR              reduce using rule 93 (additive_expression -> additive_expression addop term .)
    SEMI            reduce using rule 93 (additive_expression -> additive_expression addop term .)
    RBRACKET        reduce using rule 93 (additive_expression -> additive_expression addop term .)
    COMMA           reduce using rule 93 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 130
    DIVIDE          shift and go to state 128

    mulop                          shift and go to state 131

state 167

    (107) factor -> IDVAR . LPAREN args RPAREN
    (82) var -> IDVAR .
    (83) var -> IDVAR . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 125
    MINUSMINUS      reduce using rule 82 (var -> IDVAR .)
    PLUSPLUS        reduce using rule 82 (var -> IDVAR .)
    TIMES           reduce using rule 82 (var -> IDVAR .)
    DIVIDE          reduce using rule 82 (var -> IDVAR .)
    RPAREN          reduce using rule 82 (var -> IDVAR .)
    PLUS            reduce using rule 82 (var -> IDVAR .)
    MINUS           reduce using rule 82 (var -> IDVAR .)
    SEMI            reduce using rule 82 (var -> IDVAR .)
    AND             reduce using rule 82 (var -> IDVAR .)
    OR              reduce using rule 82 (var -> IDVAR .)
    RBRACKET        reduce using rule 82 (var -> IDVAR .)
    COMMA           reduce using rule 82 (var -> IDVAR .)
    LESS            reduce using rule 82 (var -> IDVAR .)
    LESSEQUAL       reduce using rule 82 (var -> IDVAR .)
    GREATER         reduce using rule 82 (var -> IDVAR .)
    GREATEREQUAL    reduce using rule 82 (var -> IDVAR .)
    DEQUAL          reduce using rule 82 (var -> IDVAR .)
    DISTINT         reduce using rule 82 (var -> IDVAR .)
    ISEQUAL         reduce using rule 82 (var -> IDVAR .)
    LBRACKET        shift and go to state 124


state 168

    (84) simple_expression -> additive_expression relop additive_expression .
    (93) additive_expression -> additive_expression . addop term
    (97) addop -> . PLUS
    (98) addop -> . MINUS

    RPAREN          reduce using rule 84 (simple_expression -> additive_expression relop additive_expression .)
    AND             reduce using rule 84 (simple_expression -> additive_expression relop additive_expression .)
    OR              reduce using rule 84 (simple_expression -> additive_expression relop additive_expression .)
    SEMI            reduce using rule 84 (simple_expression -> additive_expression relop additive_expression .)
    COMMA           reduce using rule 84 (simple_expression -> additive_expression relop additive_expression .)
    RBRACKET        reduce using rule 84 (simple_expression -> additive_expression relop additive_expression .)
    PLUS            shift and go to state 118
    MINUS           shift and go to state 121

    addop                          shift and go to state 112

state 169

    (74) iteration_stmt -> DO LBLOCK statement SEMI RBLOCK . WHILE LPAREN expression RPAREN

    WHILE           shift and go to state 206


state 170

    (83) var -> IDVAR LBRACKET expression . RBRACKET
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    RBRACKET        shift and go to state 207
    AND             shift and go to state 133
    OR              shift and go to state 134


state 171

    (110) args -> VOID .

    RPAREN          reduce using rule 110 (args -> VOID .)


state 172

    (109) args -> empty .

    RPAREN          reduce using rule 109 (args -> empty .)


state 173

    (107) factor -> IDVAR LPAREN args . RPAREN

    RPAREN          shift and go to state 208


state 174

    (108) args -> args_list .
    (111) args_list -> args_list . COMMA expression

    RPAREN          reduce using rule 108 (args -> args_list .)
    COMMA           shift and go to state 209


state 175

    (112) args_list -> expression .
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    COMMA           reduce using rule 112 (args_list -> expression .)
    RPAREN          reduce using rule 112 (args_list -> expression .)
    AND             shift and go to state 133
    OR              shift and go to state 134


state 176

    (79) expression -> var EQUAL AMPERSANT . IDVAR

    IDVAR           shift and go to state 210


state 177

    (77) expression -> var EQUAL expression .
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    COMMA           reduce using rule 77 (expression -> var EQUAL expression .)
    RPAREN          reduce using rule 77 (expression -> var EQUAL expression .)
    SEMI            reduce using rule 77 (expression -> var EQUAL expression .)
    RBRACKET        reduce using rule 77 (expression -> var EQUAL expression .)
    AND             shift and go to state 133
    OR              shift and go to state 134

  ! AND             [ reduce using rule 77 (expression -> var EQUAL expression .) ]
  ! OR              [ reduce using rule 77 (expression -> var EQUAL expression .) ]


state 178

    (103) factor -> LPAREN expression RPAREN .

    MINUSMINUS      reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    ISEQUAL         reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 103 (factor -> LPAREN expression RPAREN .)


state 179

    (99) term -> term mulop factor .

    MINUSMINUS      reduce using rule 99 (term -> term mulop factor .)
    PLUSPLUS        reduce using rule 99 (term -> term mulop factor .)
    TIMES           reduce using rule 99 (term -> term mulop factor .)
    DIVIDE          reduce using rule 99 (term -> term mulop factor .)
    LESS            reduce using rule 99 (term -> term mulop factor .)
    LESSEQUAL       reduce using rule 99 (term -> term mulop factor .)
    GREATER         reduce using rule 99 (term -> term mulop factor .)
    GREATEREQUAL    reduce using rule 99 (term -> term mulop factor .)
    DEQUAL          reduce using rule 99 (term -> term mulop factor .)
    DISTINT         reduce using rule 99 (term -> term mulop factor .)
    ISEQUAL         reduce using rule 99 (term -> term mulop factor .)
    PLUS            reduce using rule 99 (term -> term mulop factor .)
    MINUS           reduce using rule 99 (term -> term mulop factor .)
    AND             reduce using rule 99 (term -> term mulop factor .)
    OR              reduce using rule 99 (term -> term mulop factor .)
    COMMA           reduce using rule 99 (term -> term mulop factor .)
    RPAREN          reduce using rule 99 (term -> term mulop factor .)
    SEMI            reduce using rule 99 (term -> term mulop factor .)
    RBRACKET        reduce using rule 99 (term -> term mulop factor .)


state 180

    (80) expression -> expression AND expression .
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    AND             reduce using rule 80 (expression -> expression AND expression .)
    OR              reduce using rule 80 (expression -> expression AND expression .)
    COMMA           reduce using rule 80 (expression -> expression AND expression .)
    RPAREN          reduce using rule 80 (expression -> expression AND expression .)
    SEMI            reduce using rule 80 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 80 (expression -> expression AND expression .)

  ! AND             [ shift and go to state 133 ]
  ! OR              [ shift and go to state 134 ]


state 181

    (81) expression -> expression OR expression .
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    OR              reduce using rule 81 (expression -> expression OR expression .)
    COMMA           reduce using rule 81 (expression -> expression OR expression .)
    RPAREN          reduce using rule 81 (expression -> expression OR expression .)
    SEMI            reduce using rule 81 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 81 (expression -> expression OR expression .)
    AND             shift and go to state 133

  ! AND             [ reduce using rule 81 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 134 ]


state 182

    (71) selection_stmt -> DEFAULT COLON statement BREAK SEMI .

    CLOSETAG        reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    IDVAR           reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    TIMESTIMES      reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    AMPERSANT       reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    FUNCTION        reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    PRIVATE         reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    PUBLIC          reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    PROTECTED       reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    REQUIRE         reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    INCLUDE         reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    CLASS           reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    IF              reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    SWITCH          reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    CASE            reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    DEFAULT         reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    FOR             reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    WHILE           reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    DO              reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    ID              reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    ECHO            reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    LBLOCK          reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    RETURN          reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    LPAREN          reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    NUM             reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    TRUE            reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    FALSE           reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    RBLOCK          reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    SEMI            reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    BREAK           reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    ELSE            reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    ELSEIF          reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)


state 183

    (19) header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .

    CLOSETAG        reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    IDVAR           reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    TIMESTIMES      reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    AMPERSANT       reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    FUNCTION        reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    PRIVATE         reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    PUBLIC          reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    PROTECTED       reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    REQUIRE         reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    INCLUDE         reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    CLASS           reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    IF              reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    SWITCH          reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    CASE            reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    DEFAULT         reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    FOR             reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    WHILE           reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    DO              reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    ID              reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    ECHO            reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)


state 184

    (73) iteration_stmt -> WHILE LPAREN expression RPAREN statement .

    CLOSETAG        reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    IDVAR           reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    TIMESTIMES      reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    AMPERSANT       reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    PRIVATE         reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    PUBLIC          reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    PROTECTED       reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    REQUIRE         reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    INCLUDE         reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ECHO            reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ELSEIF          reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RBLOCK          reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    NUM             reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)


state 185

    (70) selection_stmt -> CASE NUM COLON statement BREAK . SEMI

    SEMI            shift and go to state 211


state 186

    (21) class_declaration -> area CLASS ID LBLOCK attribute . RBLOCK
    (23) attribute -> attribute . area var_declaration
    (25) attribute -> attribute . area fun_declaration
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED

    RBLOCK          shift and go to state 212
    PRIVATE         shift and go to state 12
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 31

    area                           shift and go to state 195

state 187

    (115) typeclass -> ID IDVAR EQUAL NEW constructor . SEMI

    SEMI            shift and go to state 213


state 188

    (116) constructor -> ID . LPAREN RPAREN
    (117) constructor -> ID . LPAREN args RPAREN

    LPAREN          shift and go to state 214


state 189

    (69) selection_stmt -> SWITCH LPAREN var RPAREN statement .

    CLOSETAG        reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    IDVAR           reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    TIMESTIMES      reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    AMPERSANT       reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FUNCTION        reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    PRIVATE         reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    PUBLIC          reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    PROTECTED       reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    REQUIRE         reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    INCLUDE         reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    CLASS           reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    IF              reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    SWITCH          reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    CASE            reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    DEFAULT         reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FOR             reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    WHILE           reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    DO              reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ID              reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ECHO            reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    LBLOCK          reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    RETURN          reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    LPAREN          reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    NUM             reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    TRUE            reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FALSE           reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    RBLOCK          reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    SEMI            reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    BREAK           reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ELSE            reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ELSEIF          reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)


state 190

    (36) var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .

    CLOSETAG        reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    IDVAR           reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    TIMESTIMES      reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    AMPERSANT       reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    FUNCTION        reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    PRIVATE         reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    PUBLIC          reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    PROTECTED       reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    REQUIRE         reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    INCLUDE         reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    CLASS           reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    IF              reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    SWITCH          reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    CASE            reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    DEFAULT         reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    FOR             reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    WHILE           reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    DO              reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    ID              reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    ECHO            reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    SEMI            reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    RBLOCK          reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    LBLOCK          reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    RETURN          reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    LPAREN          reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    NUM             reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    TRUE            reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)
    FALSE           reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMI var_declaration .)


state 191

    (34) var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .

    CLOSETAG        reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    IDVAR           reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    TIMESTIMES      reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    AMPERSANT       reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    FUNCTION        reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    PRIVATE         reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    PUBLIC          reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    PROTECTED       reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    REQUIRE         reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    INCLUDE         reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    CLASS           reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    IF              reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    SWITCH          reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    CASE            reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    DEFAULT         reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    FOR             reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    WHILE           reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    DO              reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    ID              reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    ECHO            reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    SEMI            reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    RBLOCK          reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    LBLOCK          reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    RETURN          reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    LPAREN          reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    NUM             reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    TRUE            reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)
    FALSE           reduce using rule 34 (var_declaration -> IDVAR EQUAL NUM SEMI var_declaration .)


state 192

    (38) var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .

    CLOSETAG        reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    IDVAR           reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    TIMESTIMES      reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    AMPERSANT       reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    FUNCTION        reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    PRIVATE         reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    PUBLIC          reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    PROTECTED       reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    REQUIRE         reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    INCLUDE         reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    CLASS           reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    IF              reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    SWITCH          reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    CASE            reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    DEFAULT         reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    FOR             reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    WHILE           reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    DO              reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    ID              reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    ECHO            reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    SEMI            reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    RBLOCK          reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    LBLOCK          reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    RETURN          reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    LPAREN          reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    NUM             reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    TRUE            reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)
    FALSE           reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMI var_declaration .)


state 193

    (26) attribute -> area fun_declaration .

    RBLOCK          reduce using rule 26 (attribute -> area fun_declaration .)
    PRIVATE         reduce using rule 26 (attribute -> area fun_declaration .)
    PUBLIC          reduce using rule 26 (attribute -> area fun_declaration .)
    PROTECTED       reduce using rule 26 (attribute -> area fun_declaration .)


state 194

    (24) attribute -> area var_declaration .

    RBLOCK          reduce using rule 24 (attribute -> area var_declaration .)
    PRIVATE         reduce using rule 24 (attribute -> area var_declaration .)
    PUBLIC          reduce using rule 24 (attribute -> area var_declaration .)
    PROTECTED       reduce using rule 24 (attribute -> area var_declaration .)


state 195

    (23) attribute -> attribute area . var_declaration
    (25) attribute -> attribute area . fun_declaration
    (30) var_declaration -> . IDVAR SEMI var_declaration
    (31) var_declaration -> . IDVAR SEMI
    (32) var_declaration -> . TIMESTIMES IDVAR SEMI
    (33) var_declaration -> . TIMESTIMES IDVAR SEMI var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUM SEMI var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUM SEMI
    (36) var_declaration -> . IDVAR EQUAL boolean SEMI var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMI
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMI var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMI
    (40) var_declaration -> . AMPERSANT IDVAR SEMI var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMI
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMI
    (44) fun_declaration -> . FUNCTION ID LPAREN params RPAREN
    (45) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt

    IDVAR           shift and go to state 16
    TIMESTIMES      shift and go to state 7
    AMPERSANT       shift and go to state 21
    FUNCTION        shift and go to state 3

    var_declaration                shift and go to state 215
    fun_declaration                shift and go to state 216

state 196

    (22) class_declaration -> CLASS ID LBLOCK attribute RBLOCK .

    CLOSETAG        reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    IDVAR           reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    TIMESTIMES      reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    AMPERSANT       reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    FUNCTION        reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    PRIVATE         reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    PUBLIC          reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    PROTECTED       reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    REQUIRE         reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    INCLUDE         reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    CLASS           reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    IF              reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    SWITCH          reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    CASE            reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    DEFAULT         reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    FOR             reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    WHILE           reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    DO              reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    ID              reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    ECHO            reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    SEMI            reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    BREAK           reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    ELSE            reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    ELSEIF          reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    RBLOCK          reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    LBLOCK          reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    RETURN          reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    LPAREN          reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    NUM             reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    TRUE            reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    FALSE           reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)


state 197

    (41) var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI . selection_stmt
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMI

    IF              shift and go to state 27
    SWITCH          shift and go to state 15
    CASE            shift and go to state 10
    DEFAULT         shift and go to state 5

    selection_stmt                 shift and go to state 217

state 198

    (72) iteration_stmt -> FOR LPAREN var_declaration SEMI expression . SEMI additive_expression RPAREN statement
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    SEMI            shift and go to state 218
    AND             shift and go to state 133
    OR              shift and go to state 134


state 199

    (20) header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .

    CLOSETAG        reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    IDVAR           reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    TIMESTIMES      reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    AMPERSANT       reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    FUNCTION        reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    PRIVATE         reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    PUBLIC          reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    PROTECTED       reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    REQUIRE         reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    INCLUDE         reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    CLASS           reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    IF              reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    SWITCH          reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    CASE            reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    DEFAULT         reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    FOR             reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    WHILE           reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    DO              reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    ID              reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    ECHO            reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)


state 200

    (65) selection_stmt -> IF LPAREN expression RPAREN statement .
    (66) selection_stmt -> IF LPAREN expression RPAREN statement . selection
    (67) selection -> . ELSE statement
    (68) selection -> . ELSEIF statement selection

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    CLOSETAG        reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    IDVAR           reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    TIMESTIMES      reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    AMPERSANT       reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    PRIVATE         reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    PUBLIC          reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    PROTECTED       reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    REQUIRE         reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    INCLUDE         reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ECHO            reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    NUM             reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RBLOCK          reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 220
    ELSEIF          shift and go to state 221

  ! ELSE            [ reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]
  ! ELSEIF          [ reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]

    selection                      shift and go to state 219

state 201

    (48) param_list -> param_list COMMA param_list .
    (48) param_list -> param_list . COMMA param_list

    COMMA           reduce using rule 48 (param_list -> param_list COMMA param_list .)
    RPAREN          reduce using rule 48 (param_list -> param_list COMMA param_list .)

  ! COMMA           [ shift and go to state 160 ]


state 202

    (45) fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .

    CLOSETAG        reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    IDVAR           reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    TIMESTIMES      reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    AMPERSANT       reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    FUNCTION        reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    PRIVATE         reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    PUBLIC          reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    PROTECTED       reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    REQUIRE         reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    INCLUDE         reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    CLASS           reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    IF              reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    SWITCH          reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    CASE            reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    DEFAULT         reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    FOR             reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    WHILE           reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    DO              reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    ID              reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    ECHO            reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    RBLOCK          reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    SEMI            reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)


state 203

    (51) param -> IDVAR LBRACKET RBRACKET .

    COMMA           reduce using rule 51 (param -> IDVAR LBRACKET RBRACKET .)
    RPAREN          reduce using rule 51 (param -> IDVAR LBRACKET RBRACKET .)


state 204

    (53) local_declarations -> local_declarations var_declaration .

    IDVAR           reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    TIMESTIMES      reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    AMPERSANT       reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    ECHO            reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    LBLOCK          reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    IF              reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    SWITCH          reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    CASE            reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    DEFAULT         reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    FOR             reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    WHILE           reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    DO              reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    RETURN          reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    CLASS           reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    PRIVATE         reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    PUBLIC          reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    PROTECTED       reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    LPAREN          reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    NUM             reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    TRUE            reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    FALSE           reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    RBLOCK          reduce using rule 53 (local_declarations -> local_declarations var_declaration .)


state 205

    (52) compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt . statement_list echo_stmt RBLOCK
    (13) echo_stmt -> echo_stmt . ECHO STRING SEMI
    (14) echo_stmt -> echo_stmt . ECHO IDVAR SEMI
    (16) echo_stmt -> echo_stmt . ECHO NUM SEMI
    (17) echo_stmt -> echo_stmt . ECHO boolean SEMI
    (18) echo_stmt -> echo_stmt . ECHO fun_declaration SEMI
    (55) statement_list -> . statement_list statement
    (56) statement_list -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ECHO resolved as shift
    ECHO            shift and go to state 50
    LBLOCK          reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    SWITCH          reduce using rule 118 (empty -> .)
    CASE            reduce using rule 118 (empty -> .)
    DEFAULT         reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    DO              reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)
    CLASS           reduce using rule 118 (empty -> .)
    PRIVATE         reduce using rule 118 (empty -> .)
    PUBLIC          reduce using rule 118 (empty -> .)
    PROTECTED       reduce using rule 118 (empty -> .)
    IDVAR           reduce using rule 118 (empty -> .)
    LPAREN          reduce using rule 118 (empty -> .)
    NUM             reduce using rule 118 (empty -> .)
    TRUE            reduce using rule 118 (empty -> .)
    FALSE           reduce using rule 118 (empty -> .)
    RBLOCK          reduce using rule 118 (empty -> .)

  ! ECHO            [ reduce using rule 118 (empty -> .) ]

    statement_list                 shift and go to state 222
    empty                          shift and go to state 223

state 206

    (74) iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 224


state 207

    (83) var -> IDVAR LBRACKET expression RBRACKET .

    EQUAL           reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    LESS            reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    ISEQUAL         reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    AND             reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    OR              reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)


state 208

    (107) factor -> IDVAR LPAREN args RPAREN .

    MINUSMINUS      reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    PLUSPLUS        reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    TIMES           reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    DIVIDE          reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    LESS            reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    LESSEQUAL       reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    GREATER         reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    GREATEREQUAL    reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    DEQUAL          reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    DISTINT         reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    ISEQUAL         reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    PLUS            reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    MINUS           reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    SEMI            reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    AND             reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    OR              reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    RPAREN          reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    RBRACKET        reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    COMMA           reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)


state 209

    (111) args_list -> args_list COMMA . expression
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

    term                           shift and go to state 72
    boolean                        shift and go to state 75
    factor                         shift and go to state 68
    var                            shift and go to state 66
    simple_expression              shift and go to state 58
    expression                     shift and go to state 225
    additive_expression            shift and go to state 60

state 210

    (79) expression -> var EQUAL AMPERSANT IDVAR .

    AND             reduce using rule 79 (expression -> var EQUAL AMPERSANT IDVAR .)
    OR              reduce using rule 79 (expression -> var EQUAL AMPERSANT IDVAR .)
    COMMA           reduce using rule 79 (expression -> var EQUAL AMPERSANT IDVAR .)
    RPAREN          reduce using rule 79 (expression -> var EQUAL AMPERSANT IDVAR .)
    SEMI            reduce using rule 79 (expression -> var EQUAL AMPERSANT IDVAR .)
    RBRACKET        reduce using rule 79 (expression -> var EQUAL AMPERSANT IDVAR .)


state 211

    (70) selection_stmt -> CASE NUM COLON statement BREAK SEMI .

    CLOSETAG        reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    IDVAR           reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    TIMESTIMES      reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    AMPERSANT       reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    FUNCTION        reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    PRIVATE         reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    PUBLIC          reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    PROTECTED       reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    REQUIRE         reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    INCLUDE         reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    CLASS           reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    IF              reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    SWITCH          reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    CASE            reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    DEFAULT         reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    FOR             reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    WHILE           reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    DO              reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    ID              reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    ECHO            reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    LBLOCK          reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    RETURN          reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    LPAREN          reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    NUM             reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    TRUE            reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    FALSE           reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    RBLOCK          reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    SEMI            reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    BREAK           reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    ELSE            reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    ELSEIF          reduce using rule 70 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)


state 212

    (21) class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .

    CLOSETAG        reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    IDVAR           reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    TIMESTIMES      reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    AMPERSANT       reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    FUNCTION        reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    PRIVATE         reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    PUBLIC          reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    PROTECTED       reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    REQUIRE         reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    INCLUDE         reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    CLASS           reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    IF              reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    SWITCH          reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    CASE            reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    DEFAULT         reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    FOR             reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    WHILE           reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    DO              reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    ID              reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    ECHO            reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    SEMI            reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    BREAK           reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    ELSE            reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    ELSEIF          reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    RBLOCK          reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    LBLOCK          reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    RETURN          reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    LPAREN          reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    NUM             reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    TRUE            reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    FALSE           reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)


state 213

    (115) typeclass -> ID IDVAR EQUAL NEW constructor SEMI .

    CLOSETAG        reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    IDVAR           reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    TIMESTIMES      reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    AMPERSANT       reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    FUNCTION        reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    PRIVATE         reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    PUBLIC          reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    PROTECTED       reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    REQUIRE         reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    INCLUDE         reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    CLASS           reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    IF              reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    SWITCH          reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    CASE            reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    DEFAULT         reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    FOR             reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    WHILE           reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    DO              reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    ID              reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)
    ECHO            reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMI .)


state 214

    (116) constructor -> ID LPAREN . RPAREN
    (117) constructor -> ID LPAREN . args RPAREN
    (108) args -> . args_list
    (109) args -> . empty
    (110) args -> . VOID
    (111) args_list -> . args_list COMMA expression
    (112) args_list -> . expression
    (118) empty -> .
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 226
    VOID            shift and go to state 171
    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

  ! RPAREN          [ reduce using rule 118 (empty -> .) ]

    term                           shift and go to state 72
    args                           shift and go to state 227
    args_list                      shift and go to state 174
    boolean                        shift and go to state 75
    additive_expression            shift and go to state 60
    factor                         shift and go to state 68
    var                            shift and go to state 66
    simple_expression              shift and go to state 58
    expression                     shift and go to state 175
    empty                          shift and go to state 172

state 215

    (23) attribute -> attribute area var_declaration .

    RBLOCK          reduce using rule 23 (attribute -> attribute area var_declaration .)
    PRIVATE         reduce using rule 23 (attribute -> attribute area var_declaration .)
    PUBLIC          reduce using rule 23 (attribute -> attribute area var_declaration .)
    PROTECTED       reduce using rule 23 (attribute -> attribute area var_declaration .)


state 216

    (25) attribute -> attribute area fun_declaration .

    RBLOCK          reduce using rule 25 (attribute -> attribute area fun_declaration .)
    PRIVATE         reduce using rule 25 (attribute -> attribute area fun_declaration .)
    PUBLIC          reduce using rule 25 (attribute -> attribute area fun_declaration .)
    PROTECTED       reduce using rule 25 (attribute -> attribute area fun_declaration .)


state 217

    (41) var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .

    CLOSETAG        reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    IDVAR           reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    TIMESTIMES      reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    AMPERSANT       reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    FUNCTION        reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    PRIVATE         reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    PUBLIC          reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    PROTECTED       reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    REQUIRE         reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    INCLUDE         reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    CLASS           reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    IF              reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    SWITCH          reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    CASE            reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    DEFAULT         reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    FOR             reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    WHILE           reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    DO              reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    ID              reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    ECHO            reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    SEMI            reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    RBLOCK          reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    LBLOCK          reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    RETURN          reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    LPAREN          reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    NUM             reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    TRUE            reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)
    FALSE           reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMI selection_stmt .)


state 218

    (72) iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI . additive_expression RPAREN statement
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    IDVAR           shift and go to state 167
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

    term                           shift and go to state 72
    boolean                        shift and go to state 75
    factor                         shift and go to state 68
    var                            shift and go to state 91
    additive_expression            shift and go to state 228

state 219

    (66) selection_stmt -> IF LPAREN expression RPAREN statement selection .

    CLOSETAG        reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    IDVAR           reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    TIMESTIMES      reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    AMPERSANT       reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    FUNCTION        reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    PRIVATE         reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    PUBLIC          reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    PROTECTED       reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    REQUIRE         reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    INCLUDE         reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    CLASS           reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    IF              reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    SWITCH          reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    CASE            reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    DEFAULT         reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    FOR             reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    WHILE           reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    DO              reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    ID              reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    ECHO            reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    LBLOCK          reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    RETURN          reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    LPAREN          reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    NUM             reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    TRUE            reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    FALSE           reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    RBLOCK          reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    SEMI            reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    BREAK           reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    ELSE            reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    ELSEIF          reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)


state 220

    (67) selection -> ELSE . statement
    (57) statement -> . expression_stmt
    (58) statement -> . compount_stmt
    (59) statement -> . selection_stmt
    (60) statement -> . iteration_stmt
    (61) statement -> . return_stmt
    (62) statement -> . class_declaration
    (63) statement -> . echo_stmt
    (64) expression_stmt -> . expression SEMI
    (52) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (75) return_stmt -> . RETURN SEMI
    (76) return_stmt -> . RETURN expression SEMI
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (15) echo_stmt -> . empty
    (16) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (17) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (18) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (118) empty -> .
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LBLOCK          shift and go to state 57
    IF              shift and go to state 27
    SWITCH          shift and go to state 15
    CASE            shift and go to state 10
    DEFAULT         shift and go to state 5
    FOR             shift and go to state 22
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    RETURN          shift and go to state 55
    CLASS           shift and go to state 18
    PRIVATE         shift and go to state 12
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 31
    ECHO            reduce using rule 118 (empty -> .)
    CLOSETAG        reduce using rule 118 (empty -> .)
    TIMESTIMES      reduce using rule 118 (empty -> .)
    AMPERSANT       reduce using rule 118 (empty -> .)
    FUNCTION        reduce using rule 118 (empty -> .)
    REQUIRE         reduce using rule 118 (empty -> .)
    INCLUDE         reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    SEMI            reduce using rule 118 (empty -> .)
    BREAK           reduce using rule 118 (empty -> .)
    ELSE            reduce using rule 118 (empty -> .)
    ELSEIF          reduce using rule 118 (empty -> .)
    RBLOCK          reduce using rule 118 (empty -> .)
    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

  ! IDVAR           [ reduce using rule 118 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 118 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 118 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 118 (empty -> .) ]
  ! CLASS           [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! SWITCH          [ reduce using rule 118 (empty -> .) ]
  ! CASE            [ reduce using rule 118 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! DO              [ reduce using rule 118 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 118 (empty -> .) ]
  ! RETURN          [ reduce using rule 118 (empty -> .) ]
  ! LPAREN          [ reduce using rule 118 (empty -> .) ]
  ! NUM             [ reduce using rule 118 (empty -> .) ]
  ! TRUE            [ reduce using rule 118 (empty -> .) ]
  ! FALSE           [ reduce using rule 118 (empty -> .) ]

    boolean                        shift and go to state 75
    iteration_stmt                 shift and go to state 76
    simple_expression              shift and go to state 58
    additive_expression            shift and go to state 60
    area                           shift and go to state 61
    expression_stmt                shift and go to state 63
    statement                      shift and go to state 229
    factor                         shift and go to state 68
    var                            shift and go to state 66
    selection_stmt                 shift and go to state 67
    empty                          shift and go to state 19
    compount_stmt                  shift and go to state 69
    echo_stmt                      shift and go to state 71
    term                           shift and go to state 72
    class_declaration              shift and go to state 74
    return_stmt                    shift and go to state 56
    expression                     shift and go to state 77

state 221

    (68) selection -> ELSEIF . statement selection
    (57) statement -> . expression_stmt
    (58) statement -> . compount_stmt
    (59) statement -> . selection_stmt
    (60) statement -> . iteration_stmt
    (61) statement -> . return_stmt
    (62) statement -> . class_declaration
    (63) statement -> . echo_stmt
    (64) expression_stmt -> . expression SEMI
    (52) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (75) return_stmt -> . RETURN SEMI
    (76) return_stmt -> . RETURN expression SEMI
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (15) echo_stmt -> . empty
    (16) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (17) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (18) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (118) empty -> .
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    LBLOCK          shift and go to state 57
    IF              shift and go to state 27
    SWITCH          shift and go to state 15
    CASE            shift and go to state 10
    DEFAULT         shift and go to state 5
    FOR             shift and go to state 22
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    RETURN          shift and go to state 55
    CLASS           shift and go to state 18
    PRIVATE         shift and go to state 12
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 31
    ECHO            reduce using rule 118 (empty -> .)
    ELSE            reduce using rule 118 (empty -> .)
    ELSEIF          reduce using rule 118 (empty -> .)
    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

    boolean                        shift and go to state 75
    return_stmt                    shift and go to state 56
    simple_expression              shift and go to state 58
    additive_expression            shift and go to state 60
    area                           shift and go to state 61
    expression_stmt                shift and go to state 63
    statement                      shift and go to state 230
    factor                         shift and go to state 68
    var                            shift and go to state 66
    selection_stmt                 shift and go to state 67
    empty                          shift and go to state 19
    compount_stmt                  shift and go to state 69
    echo_stmt                      shift and go to state 71
    term                           shift and go to state 72
    class_declaration              shift and go to state 74
    iteration_stmt                 shift and go to state 76
    expression                     shift and go to state 77

state 222

    (52) compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list . echo_stmt RBLOCK
    (55) statement_list -> statement_list . statement
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (15) echo_stmt -> . empty
    (16) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (17) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (18) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (57) statement -> . expression_stmt
    (58) statement -> . compount_stmt
    (59) statement -> . selection_stmt
    (60) statement -> . iteration_stmt
    (61) statement -> . return_stmt
    (62) statement -> . class_declaration
    (63) statement -> . echo_stmt
    (118) empty -> .
    (64) expression_stmt -> . expression SEMI
    (52) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (75) return_stmt -> . RETURN SEMI
    (76) return_stmt -> . RETURN expression SEMI
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBLOCK          reduce using rule 118 (empty -> .)
    ECHO            reduce using rule 118 (empty -> .)
    LBLOCK          shift and go to state 57
    IF              shift and go to state 27
    SWITCH          shift and go to state 15
    CASE            shift and go to state 10
    DEFAULT         shift and go to state 5
    FOR             shift and go to state 22
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    RETURN          shift and go to state 55
    CLASS           shift and go to state 18
    PRIVATE         shift and go to state 12
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 31
    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

  ! LBLOCK          [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! SWITCH          [ reduce using rule 118 (empty -> .) ]
  ! CASE            [ reduce using rule 118 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! DO              [ reduce using rule 118 (empty -> .) ]
  ! RETURN          [ reduce using rule 118 (empty -> .) ]
  ! CLASS           [ reduce using rule 118 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 118 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 118 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 118 (empty -> .) ]
  ! IDVAR           [ reduce using rule 118 (empty -> .) ]
  ! LPAREN          [ reduce using rule 118 (empty -> .) ]
  ! NUM             [ reduce using rule 118 (empty -> .) ]
  ! TRUE            [ reduce using rule 118 (empty -> .) ]
  ! FALSE           [ reduce using rule 118 (empty -> .) ]

    boolean                        shift and go to state 75
    return_stmt                    shift and go to state 56
    simple_expression              shift and go to state 58
    additive_expression            shift and go to state 60
    area                           shift and go to state 61
    expression_stmt                shift and go to state 63
    statement                      shift and go to state 231
    factor                         shift and go to state 68
    var                            shift and go to state 66
    selection_stmt                 shift and go to state 67
    empty                          shift and go to state 19
    compount_stmt                  shift and go to state 69
    echo_stmt                      shift and go to state 232
    term                           shift and go to state 72
    class_declaration              shift and go to state 74
    iteration_stmt                 shift and go to state 76
    expression                     shift and go to state 77

state 223

    (56) statement_list -> empty .

    LBLOCK          reduce using rule 56 (statement_list -> empty .)
    IF              reduce using rule 56 (statement_list -> empty .)
    SWITCH          reduce using rule 56 (statement_list -> empty .)
    CASE            reduce using rule 56 (statement_list -> empty .)
    DEFAULT         reduce using rule 56 (statement_list -> empty .)
    FOR             reduce using rule 56 (statement_list -> empty .)
    WHILE           reduce using rule 56 (statement_list -> empty .)
    DO              reduce using rule 56 (statement_list -> empty .)
    RETURN          reduce using rule 56 (statement_list -> empty .)
    CLASS           reduce using rule 56 (statement_list -> empty .)
    PRIVATE         reduce using rule 56 (statement_list -> empty .)
    PUBLIC          reduce using rule 56 (statement_list -> empty .)
    PROTECTED       reduce using rule 56 (statement_list -> empty .)
    IDVAR           reduce using rule 56 (statement_list -> empty .)
    LPAREN          reduce using rule 56 (statement_list -> empty .)
    NUM             reduce using rule 56 (statement_list -> empty .)
    TRUE            reduce using rule 56 (statement_list -> empty .)
    FALSE           reduce using rule 56 (statement_list -> empty .)
    RBLOCK          reduce using rule 56 (statement_list -> empty .)
    ECHO            reduce using rule 56 (statement_list -> empty .)


state 224

    (74) iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN . expression RPAREN
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

    term                           shift and go to state 72
    boolean                        shift and go to state 75
    factor                         shift and go to state 68
    var                            shift and go to state 66
    simple_expression              shift and go to state 58
    expression                     shift and go to state 233
    additive_expression            shift and go to state 60

state 225

    (111) args_list -> args_list COMMA expression .
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    COMMA           reduce using rule 111 (args_list -> args_list COMMA expression .)
    RPAREN          reduce using rule 111 (args_list -> args_list COMMA expression .)
    AND             shift and go to state 133
    OR              shift and go to state 134


state 226

    (116) constructor -> ID LPAREN RPAREN .

    SEMI            reduce using rule 116 (constructor -> ID LPAREN RPAREN .)


state 227

    (117) constructor -> ID LPAREN args . RPAREN

    RPAREN          shift and go to state 234


state 228

    (72) iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression . RPAREN statement
    (93) additive_expression -> additive_expression . addop term
    (97) addop -> . PLUS
    (98) addop -> . MINUS

    RPAREN          shift and go to state 235
    PLUS            shift and go to state 118
    MINUS           shift and go to state 121

    addop                          shift and go to state 112

state 229

    (67) selection -> ELSE statement .

    CLOSETAG        reduce using rule 67 (selection -> ELSE statement .)
    IDVAR           reduce using rule 67 (selection -> ELSE statement .)
    TIMESTIMES      reduce using rule 67 (selection -> ELSE statement .)
    AMPERSANT       reduce using rule 67 (selection -> ELSE statement .)
    FUNCTION        reduce using rule 67 (selection -> ELSE statement .)
    PRIVATE         reduce using rule 67 (selection -> ELSE statement .)
    PUBLIC          reduce using rule 67 (selection -> ELSE statement .)
    PROTECTED       reduce using rule 67 (selection -> ELSE statement .)
    REQUIRE         reduce using rule 67 (selection -> ELSE statement .)
    INCLUDE         reduce using rule 67 (selection -> ELSE statement .)
    CLASS           reduce using rule 67 (selection -> ELSE statement .)
    IF              reduce using rule 67 (selection -> ELSE statement .)
    SWITCH          reduce using rule 67 (selection -> ELSE statement .)
    CASE            reduce using rule 67 (selection -> ELSE statement .)
    DEFAULT         reduce using rule 67 (selection -> ELSE statement .)
    FOR             reduce using rule 67 (selection -> ELSE statement .)
    WHILE           reduce using rule 67 (selection -> ELSE statement .)
    DO              reduce using rule 67 (selection -> ELSE statement .)
    ID              reduce using rule 67 (selection -> ELSE statement .)
    ECHO            reduce using rule 67 (selection -> ELSE statement .)
    SEMI            reduce using rule 67 (selection -> ELSE statement .)
    BREAK           reduce using rule 67 (selection -> ELSE statement .)
    ELSE            reduce using rule 67 (selection -> ELSE statement .)
    ELSEIF          reduce using rule 67 (selection -> ELSE statement .)
    RBLOCK          reduce using rule 67 (selection -> ELSE statement .)
    LBLOCK          reduce using rule 67 (selection -> ELSE statement .)
    RETURN          reduce using rule 67 (selection -> ELSE statement .)
    LPAREN          reduce using rule 67 (selection -> ELSE statement .)
    NUM             reduce using rule 67 (selection -> ELSE statement .)
    TRUE            reduce using rule 67 (selection -> ELSE statement .)
    FALSE           reduce using rule 67 (selection -> ELSE statement .)


state 230

    (68) selection -> ELSEIF statement . selection
    (67) selection -> . ELSE statement
    (68) selection -> . ELSEIF statement selection

    ELSE            shift and go to state 220
    ELSEIF          shift and go to state 221

    selection                      shift and go to state 236

state 231

    (55) statement_list -> statement_list statement .

    LBLOCK          reduce using rule 55 (statement_list -> statement_list statement .)
    IF              reduce using rule 55 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 55 (statement_list -> statement_list statement .)
    CASE            reduce using rule 55 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 55 (statement_list -> statement_list statement .)
    FOR             reduce using rule 55 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 55 (statement_list -> statement_list statement .)
    DO              reduce using rule 55 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 55 (statement_list -> statement_list statement .)
    CLASS           reduce using rule 55 (statement_list -> statement_list statement .)
    PRIVATE         reduce using rule 55 (statement_list -> statement_list statement .)
    PUBLIC          reduce using rule 55 (statement_list -> statement_list statement .)
    PROTECTED       reduce using rule 55 (statement_list -> statement_list statement .)
    IDVAR           reduce using rule 55 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 55 (statement_list -> statement_list statement .)
    NUM             reduce using rule 55 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 55 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 55 (statement_list -> statement_list statement .)
    RBLOCK          reduce using rule 55 (statement_list -> statement_list statement .)
    ECHO            reduce using rule 55 (statement_list -> statement_list statement .)


state 232

    (52) compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt . RBLOCK
    (13) echo_stmt -> echo_stmt . ECHO STRING SEMI
    (14) echo_stmt -> echo_stmt . ECHO IDVAR SEMI
    (16) echo_stmt -> echo_stmt . ECHO NUM SEMI
    (17) echo_stmt -> echo_stmt . ECHO boolean SEMI
    (18) echo_stmt -> echo_stmt . ECHO fun_declaration SEMI
    (63) statement -> echo_stmt .

  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
    RBLOCK          shift and go to state 237
    ECHO            shift and go to state 50
    LBLOCK          reduce using rule 63 (statement -> echo_stmt .)
    IF              reduce using rule 63 (statement -> echo_stmt .)
    SWITCH          reduce using rule 63 (statement -> echo_stmt .)
    CASE            reduce using rule 63 (statement -> echo_stmt .)
    DEFAULT         reduce using rule 63 (statement -> echo_stmt .)
    FOR             reduce using rule 63 (statement -> echo_stmt .)
    WHILE           reduce using rule 63 (statement -> echo_stmt .)
    DO              reduce using rule 63 (statement -> echo_stmt .)
    RETURN          reduce using rule 63 (statement -> echo_stmt .)
    CLASS           reduce using rule 63 (statement -> echo_stmt .)
    PRIVATE         reduce using rule 63 (statement -> echo_stmt .)
    PUBLIC          reduce using rule 63 (statement -> echo_stmt .)
    PROTECTED       reduce using rule 63 (statement -> echo_stmt .)
    IDVAR           reduce using rule 63 (statement -> echo_stmt .)
    LPAREN          reduce using rule 63 (statement -> echo_stmt .)
    NUM             reduce using rule 63 (statement -> echo_stmt .)
    TRUE            reduce using rule 63 (statement -> echo_stmt .)
    FALSE           reduce using rule 63 (statement -> echo_stmt .)

  ! RBLOCK          [ reduce using rule 63 (statement -> echo_stmt .) ]
  ! ECHO            [ reduce using rule 63 (statement -> echo_stmt .) ]


state 233

    (74) iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression . RPAREN
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    RPAREN          shift and go to state 238
    AND             shift and go to state 133
    OR              shift and go to state 134


state 234

    (117) constructor -> ID LPAREN args RPAREN .

    SEMI            reduce using rule 117 (constructor -> ID LPAREN args RPAREN .)


state 235

    (72) iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN . statement
    (57) statement -> . expression_stmt
    (58) statement -> . compount_stmt
    (59) statement -> . selection_stmt
    (60) statement -> . iteration_stmt
    (61) statement -> . return_stmt
    (62) statement -> . class_declaration
    (63) statement -> . echo_stmt
    (64) expression_stmt -> . expression SEMI
    (52) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (75) return_stmt -> . RETURN SEMI
    (76) return_stmt -> . RETURN expression SEMI
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMI
    (15) echo_stmt -> . empty
    (16) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (17) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (18) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (118) empty -> .
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUM
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LBLOCK          shift and go to state 57
    IF              shift and go to state 27
    SWITCH          shift and go to state 15
    CASE            shift and go to state 10
    DEFAULT         shift and go to state 5
    FOR             shift and go to state 22
    WHILE           shift and go to state 8
    DO              shift and go to state 4
    RETURN          shift and go to state 55
    CLASS           shift and go to state 18
    PRIVATE         shift and go to state 12
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 31
    ECHO            reduce using rule 118 (empty -> .)
    CLOSETAG        reduce using rule 118 (empty -> .)
    TIMESTIMES      reduce using rule 118 (empty -> .)
    AMPERSANT       reduce using rule 118 (empty -> .)
    FUNCTION        reduce using rule 118 (empty -> .)
    REQUIRE         reduce using rule 118 (empty -> .)
    INCLUDE         reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    SEMI            reduce using rule 118 (empty -> .)
    BREAK           reduce using rule 118 (empty -> .)
    ELSE            reduce using rule 118 (empty -> .)
    ELSEIF          reduce using rule 118 (empty -> .)
    RBLOCK          reduce using rule 118 (empty -> .)
    IDVAR           shift and go to state 65
    LPAREN          shift and go to state 70
    NUM             shift and go to state 62
    TRUE            shift and go to state 59
    FALSE           shift and go to state 73

  ! IDVAR           [ reduce using rule 118 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 118 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 118 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 118 (empty -> .) ]
  ! CLASS           [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! SWITCH          [ reduce using rule 118 (empty -> .) ]
  ! CASE            [ reduce using rule 118 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! DO              [ reduce using rule 118 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 118 (empty -> .) ]
  ! RETURN          [ reduce using rule 118 (empty -> .) ]
  ! LPAREN          [ reduce using rule 118 (empty -> .) ]
  ! NUM             [ reduce using rule 118 (empty -> .) ]
  ! TRUE            [ reduce using rule 118 (empty -> .) ]
  ! FALSE           [ reduce using rule 118 (empty -> .) ]

    boolean                        shift and go to state 75
    return_stmt                    shift and go to state 56
    simple_expression              shift and go to state 58
    additive_expression            shift and go to state 60
    area                           shift and go to state 61
    expression_stmt                shift and go to state 63
    statement                      shift and go to state 239
    factor                         shift and go to state 68
    var                            shift and go to state 66
    selection_stmt                 shift and go to state 67
    empty                          shift and go to state 19
    compount_stmt                  shift and go to state 69
    echo_stmt                      shift and go to state 71
    term                           shift and go to state 72
    class_declaration              shift and go to state 74
    iteration_stmt                 shift and go to state 76
    expression                     shift and go to state 77

state 236

    (68) selection -> ELSEIF statement selection .

    CLOSETAG        reduce using rule 68 (selection -> ELSEIF statement selection .)
    IDVAR           reduce using rule 68 (selection -> ELSEIF statement selection .)
    TIMESTIMES      reduce using rule 68 (selection -> ELSEIF statement selection .)
    AMPERSANT       reduce using rule 68 (selection -> ELSEIF statement selection .)
    FUNCTION        reduce using rule 68 (selection -> ELSEIF statement selection .)
    PRIVATE         reduce using rule 68 (selection -> ELSEIF statement selection .)
    PUBLIC          reduce using rule 68 (selection -> ELSEIF statement selection .)
    PROTECTED       reduce using rule 68 (selection -> ELSEIF statement selection .)
    REQUIRE         reduce using rule 68 (selection -> ELSEIF statement selection .)
    INCLUDE         reduce using rule 68 (selection -> ELSEIF statement selection .)
    CLASS           reduce using rule 68 (selection -> ELSEIF statement selection .)
    IF              reduce using rule 68 (selection -> ELSEIF statement selection .)
    SWITCH          reduce using rule 68 (selection -> ELSEIF statement selection .)
    CASE            reduce using rule 68 (selection -> ELSEIF statement selection .)
    DEFAULT         reduce using rule 68 (selection -> ELSEIF statement selection .)
    FOR             reduce using rule 68 (selection -> ELSEIF statement selection .)
    WHILE           reduce using rule 68 (selection -> ELSEIF statement selection .)
    DO              reduce using rule 68 (selection -> ELSEIF statement selection .)
    ID              reduce using rule 68 (selection -> ELSEIF statement selection .)
    ECHO            reduce using rule 68 (selection -> ELSEIF statement selection .)
    SEMI            reduce using rule 68 (selection -> ELSEIF statement selection .)
    BREAK           reduce using rule 68 (selection -> ELSEIF statement selection .)
    ELSE            reduce using rule 68 (selection -> ELSEIF statement selection .)
    ELSEIF          reduce using rule 68 (selection -> ELSEIF statement selection .)
    RBLOCK          reduce using rule 68 (selection -> ELSEIF statement selection .)
    LBLOCK          reduce using rule 68 (selection -> ELSEIF statement selection .)
    RETURN          reduce using rule 68 (selection -> ELSEIF statement selection .)
    LPAREN          reduce using rule 68 (selection -> ELSEIF statement selection .)
    NUM             reduce using rule 68 (selection -> ELSEIF statement selection .)
    TRUE            reduce using rule 68 (selection -> ELSEIF statement selection .)
    FALSE           reduce using rule 68 (selection -> ELSEIF statement selection .)


state 237

    (52) compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .

    CLOSETAG        reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    IDVAR           reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    TIMESTIMES      reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    AMPERSANT       reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    FUNCTION        reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    PRIVATE         reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    PUBLIC          reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    PROTECTED       reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    REQUIRE         reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    INCLUDE         reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    CLASS           reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    IF              reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    SWITCH          reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    CASE            reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    DEFAULT         reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    FOR             reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    WHILE           reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    DO              reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    ID              reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    ECHO            reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    SEMI            reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    BREAK           reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    ELSE            reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    ELSEIF          reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    RBLOCK          reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    LBLOCK          reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    RETURN          reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    LPAREN          reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    NUM             reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    TRUE            reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    FALSE           reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)


state 238

    (74) iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .

    CLOSETAG        reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    IDVAR           reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    TIMESTIMES      reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    AMPERSANT       reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    PRIVATE         reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    PUBLIC          reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    PROTECTED       reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    REQUIRE         reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    INCLUDE         reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    CLASS           reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    IF              reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    SWITCH          reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    CASE            reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    FOR             reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    WHILE           reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    DO              reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    ID              reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    ECHO            reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    SEMI            reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    BREAK           reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    ELSE            reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    ELSEIF          reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    RBLOCK          reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    LBLOCK          reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    RETURN          reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    LPAREN          reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    NUM             reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    TRUE            reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    FALSE           reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)


state 239

    (72) iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .

    CLOSETAG        reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    IDVAR           reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    TIMESTIMES      reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    AMPERSANT       reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    FUNCTION        reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    PRIVATE         reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    PUBLIC          reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    PROTECTED       reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    REQUIRE         reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    INCLUDE         reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    CLASS           reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    IF              reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    SWITCH          reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    CASE            reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    DEFAULT         reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    FOR             reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    WHILE           reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    DO              reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    ID              reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    ECHO            reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    SEMI            reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    BREAK           reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    ELSE            reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    ELSEIF          reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    RBLOCK          reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    LBLOCK          reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    RETURN          reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    LPAREN          reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    NUM             reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    TRUE            reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    FALSE           reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDVAR in state 2 resolved as shift
WARNING: shift/reduce conflict for TIMESTIMES in state 2 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 2 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 2 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 2 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 2 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 2 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 2 resolved as shift
WARNING: shift/reduce conflict for CASE in state 2 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for DO in state 2 resolved as shift
WARNING: shift/reduce conflict for ID in state 2 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 26 resolved as shift
WARNING: shift/reduce conflict for CLOSETAG in state 28 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 28 resolved as shift
WARNING: shift/reduce conflict for TIMESTIMES in state 28 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 28 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 28 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 28 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 28 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 28 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 28 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 28 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 28 resolved as shift
WARNING: shift/reduce conflict for IF in state 28 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 28 resolved as shift
WARNING: shift/reduce conflict for CASE in state 28 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 28 resolved as shift
WARNING: shift/reduce conflict for FOR in state 28 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 28 resolved as shift
WARNING: shift/reduce conflict for DO in state 28 resolved as shift
WARNING: shift/reduce conflict for ID in state 28 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 71 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 88 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 90 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 92 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 111 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 139 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 139 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 139 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 139 resolved as shift
WARNING: shift/reduce conflict for IF in state 139 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 139 resolved as shift
WARNING: shift/reduce conflict for CASE in state 139 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 139 resolved as shift
WARNING: shift/reduce conflict for FOR in state 139 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 139 resolved as shift
WARNING: shift/reduce conflict for DO in state 139 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 139 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 139 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 139 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 139 resolved as shift
WARNING: shift/reduce conflict for NUM in state 139 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 139 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 139 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 143 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 143 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 143 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 143 resolved as shift
WARNING: shift/reduce conflict for IF in state 143 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 143 resolved as shift
WARNING: shift/reduce conflict for CASE in state 143 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 143 resolved as shift
WARNING: shift/reduce conflict for FOR in state 143 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 143 resolved as shift
WARNING: shift/reduce conflict for DO in state 143 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 143 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 143 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 143 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 143 resolved as shift
WARNING: shift/reduce conflict for NUM in state 143 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 143 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 143 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 159 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 159 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 159 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 159 resolved as shift
WARNING: shift/reduce conflict for IF in state 159 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 159 resolved as shift
WARNING: shift/reduce conflict for CASE in state 159 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 159 resolved as shift
WARNING: shift/reduce conflict for FOR in state 159 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 159 resolved as shift
WARNING: shift/reduce conflict for DO in state 159 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 159 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 159 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 159 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 159 resolved as shift
WARNING: shift/reduce conflict for NUM in state 159 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 159 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 159 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 164 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 200 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 200 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 205 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 214 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 220 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 220 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 220 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 220 resolved as shift
WARNING: shift/reduce conflict for IF in state 220 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 220 resolved as shift
WARNING: shift/reduce conflict for CASE in state 220 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 220 resolved as shift
WARNING: shift/reduce conflict for FOR in state 220 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 220 resolved as shift
WARNING: shift/reduce conflict for DO in state 220 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 220 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 220 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 220 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 220 resolved as shift
WARNING: shift/reduce conflict for NUM in state 220 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 220 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 220 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 222 resolved as shift
WARNING: shift/reduce conflict for IF in state 222 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 222 resolved as shift
WARNING: shift/reduce conflict for CASE in state 222 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 222 resolved as shift
WARNING: shift/reduce conflict for FOR in state 222 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 222 resolved as shift
WARNING: shift/reduce conflict for DO in state 222 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 222 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 222 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 222 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 222 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 222 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 222 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 222 resolved as shift
WARNING: shift/reduce conflict for NUM in state 222 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 222 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 222 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 232 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 232 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 235 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 235 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 235 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 235 resolved as shift
WARNING: shift/reduce conflict for IF in state 235 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 235 resolved as shift
WARNING: shift/reduce conflict for CASE in state 235 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 235 resolved as shift
WARNING: shift/reduce conflict for FOR in state 235 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 235 resolved as shift
WARNING: shift/reduce conflict for DO in state 235 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 235 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 235 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 235 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 235 resolved as shift
WARNING: shift/reduce conflict for NUM in state 235 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 235 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 235 resolved as shift

Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AMPERSAND
    ARRAY_ASSIGNATION
    AS
    BOOL
    BOOLAND
    BOOLOR
    BREAK
    CASE
    CHR
    CLASS
    CLONE
    COMMENTMC
    COMMENTMO
    COMMENTMULTIPLELINE
    COMMENTO
    COMMENTONELINE
    CONSTRUCTOR
    CONTINUE
    CQUESTION
    CSBRACKET
    DECLARE
    DESTRUCTOR
    DOUBLEPOINTS
    DQUOTATION
    ELSEIF
    ENDIF
    ENDSWITCH
    ENDWHILE
    EXTENDS
    FINAL
    FLOAT
    FOREACH
    GLOBAL
    GOTO
    HASHTAG
    IMPLEMENTS
    INCLUDE
    INCLUDE_ONCE
    INT
    INTERFACE
    NEW
    NULL
    OSBRACKET
    POINT
    PRINT
    PRIVATE
    PROTECTED
    PUBLIC
    REQUIRE
    REQUIRE_ONCE
    SPACE
    SQUOTATION
    STATIC
    STRING
    SWITCH
    TRAIT
    UNDERSCORE
    VAR
    VARIABLE
    VOID

Grammar

Rule 0     S' -> program
Rule 1     program -> PHPDECLARATION declaracion_sentencias PHPCLOSING
Rule 2     declaracion_sentencias -> sentencias declaracion_sentencias
Rule 3     declaracion_sentencias -> sentencias
Rule 4     sentencias -> sentassign
Rule 5     sentencias -> call_function SEMICOLON
Rule 6     sentencias -> sentif
Rule 7     sentencias -> sentecho
Rule 8     sentencias -> sentfunc
Rule 9     sentencias -> sentreturn
Rule 10    sentencias -> sentfor
Rule 11    sentencias -> sentwhile
Rule 12    sentencias -> sentdowhile
Rule 13    sentreturn -> RETURN type SEMICOLON
Rule 14    sentreturn -> RETURN cond SEMICOLON
Rule 15    sentecho -> ECHO typevar SEMICOLON
Rule 16    sentecho -> ECHO exp SEMICOLON
Rule 17    sentecho -> ECHO cond SEMICOLON
Rule 18    sentif -> IF genif auxsentif
Rule 19    auxsentif -> ELSE IF genif auxsentif
Rule 20    auxsentif -> ELSE OCBRACKET declaracion_sentencias CCBRACKET
Rule 21    auxsentif -> empty
Rule 22    genif -> OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
Rule 23    sentassign -> ID EQUAL exp SEMICOLON
Rule 24    sentassign -> ID PLUSPLUS SEMICOLON
Rule 25    sentassign -> ID MINUSMINUS SEMICOLON
Rule 26    bool -> TRUE
Rule 27    bool -> FALSE
Rule 28    oplogicos -> AND
Rule 29    oplogicos -> OR
Rule 30    oplogicos -> XOR
Rule 31    oplogicos -> NOT
Rule 32    exp -> expsimple opcomparacion expsimple
Rule 33    exp -> OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS
Rule 34    exp -> expsimple
Rule 35    opcomparacion -> EQUALE
Rule 36    opcomparacion -> DEQUAL
Rule 37    opcomparacion -> IDENTIC
Rule 38    opcomparacion -> GREAT
Rule 39    opcomparacion -> GREATE
Rule 40    opcomparacion -> LESS
Rule 41    opcomparacion -> LESSE
Rule 42    expsimple -> expsimple opsuma term
Rule 43    expsimple -> term
Rule 44    term -> term opmult factor
Rule 45    term -> factor
Rule 46    factor -> NUMBER
Rule 47    factor -> ID
Rule 48    factor -> call_function
Rule 49    factor -> OPARENTHESIS expsimple CPARENTHESIS
Rule 50    typevar -> NUMBER
Rule 51    typevar -> STRINGWR
Rule 52    typevar -> STRINGGWR
Rule 53    typevar -> TRUE
Rule 54    typevar -> FALSE
Rule 55    opsuma -> PLUS
Rule 56    opsuma -> SCORE
Rule 57    opmult -> TIMES
Rule 58    opmult -> SLASH
Rule 59    opmult -> PERCENTAGE
Rule 60    opmult -> POW
Rule 61    cond -> type
Rule 62    cond -> cond opcomparacion cond
Rule 63    cond -> cond oplogicos cond
Rule 64    cond -> OPARENTHESIS type CPARENTHESIS
Rule 65    cond -> OPARENTHESIS cond CPARENTHESIS
Rule 66    type -> typevar
Rule 67    type -> var_declaration_gen
Rule 68    var_declaration_gen -> ID
Rule 69    var_declaration_gen -> ID PLUSPLUS
Rule 70    var_declaration_gen -> ID MINUSMINUS
Rule 71    var_declaration_gen -> MINUSMINUS ID
Rule 72    var_declaration_gen -> PLUSPLUS ID
Rule 73    var_declaration_gen -> typevar
Rule 74    var_declaration_gen -> exp
Rule 75    arg -> var_declaration_gen
Rule 76    arg -> type
Rule 77    arg -> expsimple
Rule 78    arg -> type COMMA arg
Rule 79    arg -> STRINGWR
Rule 80    arg -> STRINGGWR
Rule 81    arg -> var_declaration_gen COMMA arg
Rule 82    arg -> STRINGWR COMMA arg
Rule 83    arg -> STRINGGWR COMMA arg
Rule 84    arg -> <empty>
Rule 85    argfunc -> ID
Rule 86    argfunc -> ID COMMA argfunc
Rule 87    argfunc -> <empty>
Rule 88    sentfunc -> FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
Rule 89    call_function -> NAMEFUNCTION
Rule 90    call_function -> NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS
Rule 91    sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
Rule 92    sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
Rule 93    sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
Rule 94    sentwhile -> WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
Rule 95    sentdowhile -> DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON
Rule 96    empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 
AMPERSAND            : 
AND                  : 28
ARRAY_ASSIGNATION    : 
AS                   : 
BOOL                 : 
BOOLAND              : 
BOOLOR               : 
BREAK                : 
CASE                 : 
CCBRACKET            : 20 22 88 91 92 93 94 95
CHR                  : 
CLASS                : 
CLONE                : 
COMMA                : 78 81 82 83 86
COMMENTMC            : 
COMMENTMO            : 
COMMENTMULTIPLELINE  : 
COMMENTO             : 
COMMENTONELINE       : 
CONSTRUCTOR          : 
CONTINUE             : 
CPARENTHESIS         : 22 33 49 64 65 88 90 91 92 93 94 95
CQUESTION            : 
CSBRACKET            : 
DECLARE              : 
DEQUAL               : 36
DESTRUCTOR           : 
DO                   : 95
DOUBLEPOINTS         : 
DQUOTATION           : 
ECHO                 : 15 16 17
ELSE                 : 19 20
ELSEIF               : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
EQUAL                : 23 91 92 93
EQUALE               : 35
EXTENDS              : 
FALSE                : 27 54
FINAL                : 
FLOAT                : 
FOR                  : 91 92 93
FOREACH              : 
FUNCTION             : 88
GLOBAL               : 
GOTO                 : 
GREAT                : 38
GREATE               : 39
HASHTAG              : 
ID                   : 23 24 25 47 68 69 70 71 72 85 86 91 92 92 93 93
IDENTIC              : 37
IF                   : 18 19
IMPLEMENTS           : 
INCLUDE              : 
INCLUDE_ONCE         : 
INT                  : 
INTERFACE            : 
LESS                 : 40
LESSE                : 41
MINUSMINUS           : 25 70 71 93
NAMEFUNCTION         : 88 89 90
NEW                  : 
NOT                  : 31
NULL                 : 
NUMBER               : 46 50
OCBRACKET            : 20 22 88 91 92 93 94 95
OPARENTHESIS         : 22 33 49 64 65 88 90 91 92 93 94 95
OR                   : 29
OSBRACKET            : 
PERCENTAGE           : 59
PHPCLOSING           : 1
PHPDECLARATION       : 1
PLUS                 : 55
PLUSPLUS             : 24 69 72 92
POINT                : 
POW                  : 60
PRINT                : 
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
REQUIRE              : 
REQUIRE_ONCE         : 
RETURN               : 13 14
SCORE                : 56
SEMICOLON            : 5 13 14 15 16 17 23 24 25 91 91 92 92 93 93 95
SLASH                : 58
SPACE                : 
SQUOTATION           : 
STATIC               : 
STRING               : 
STRINGGWR            : 52 80 83
STRINGWR             : 51 79 82
SWITCH               : 
TIMES                : 57
TRAIT                : 
TRUE                 : 26 53
UNDERSCORE           : 
VAR                  : 
VARIABLE             : 
VOID                 : 
WHILE                : 94 95
XOR                  : 30
error                : 

Nonterminals, with rules where they appear

arg                  : 78 81 82 83 90
argfunc              : 86 88
auxsentif            : 18 19
bool                 : 
call_function        : 5 48
cond                 : 14 17 22 62 62 63 63 65 91 92 93 94 95
declaracion_sentencias : 1 2 20 22 88 91 92 93 94 95
empty                : 21
exp                  : 16 23 74
expsimple            : 32 32 33 33 34 42 49 77 91 91 92 93
factor               : 44 45
genif                : 18 19
opcomparacion        : 32 33 62
oplogicos            : 63
opmult               : 44
opsuma               : 42
program              : 0
sentassign           : 4
sentdowhile          : 12
sentecho             : 7
sentencias           : 2 3
sentfor              : 10
sentfunc             : 8
sentif               : 6
sentreturn           : 9
sentwhile            : 11
term                 : 42 43 44
type                 : 13 61 64 76 78
typevar              : 15 66 73
var_declaration_gen  : 67 75 81

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PHPDECLARATION declaracion_sentencias PHPCLOSING

    PHPDECLARATION  shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PHPDECLARATION . declaracion_sentencias PHPCLOSING
    (2) declaracion_sentencias -> . sentencias declaracion_sentencias
    (3) declaracion_sentencias -> . sentencias
    (4) sentencias -> . sentassign
    (5) sentencias -> . call_function SEMICOLON
    (6) sentencias -> . sentif
    (7) sentencias -> . sentecho
    (8) sentencias -> . sentfunc
    (9) sentencias -> . sentreturn
    (10) sentencias -> . sentfor
    (11) sentencias -> . sentwhile
    (12) sentencias -> . sentdowhile
    (23) sentassign -> . ID EQUAL exp SEMICOLON
    (24) sentassign -> . ID PLUSPLUS SEMICOLON
    (25) sentassign -> . ID MINUSMINUS SEMICOLON
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS
    (18) sentif -> . IF genif auxsentif
    (15) sentecho -> . ECHO typevar SEMICOLON
    (16) sentecho -> . ECHO exp SEMICOLON
    (17) sentecho -> . ECHO cond SEMICOLON
    (88) sentfunc -> . FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (13) sentreturn -> . RETURN type SEMICOLON
    (14) sentreturn -> . RETURN cond SEMICOLON
    (91) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (92) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (93) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (94) sentwhile -> . WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (95) sentdowhile -> . DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON

    ID              shift and go to state 14
    NAMEFUNCTION    shift and go to state 15
    IF              shift and go to state 16
    ECHO            shift and go to state 17
    FUNCTION        shift and go to state 18
    RETURN          shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22

    declaracion_sentencias         shift and go to state 3
    sentencias                     shift and go to state 4
    sentassign                     shift and go to state 5
    call_function                  shift and go to state 6
    sentif                         shift and go to state 7
    sentecho                       shift and go to state 8
    sentfunc                       shift and go to state 9
    sentreturn                     shift and go to state 10
    sentfor                        shift and go to state 11
    sentwhile                      shift and go to state 12
    sentdowhile                    shift and go to state 13

state 3

    (1) program -> PHPDECLARATION declaracion_sentencias . PHPCLOSING

    PHPCLOSING      shift and go to state 23


state 4

    (2) declaracion_sentencias -> sentencias . declaracion_sentencias
    (3) declaracion_sentencias -> sentencias .
    (2) declaracion_sentencias -> . sentencias declaracion_sentencias
    (3) declaracion_sentencias -> . sentencias
    (4) sentencias -> . sentassign
    (5) sentencias -> . call_function SEMICOLON
    (6) sentencias -> . sentif
    (7) sentencias -> . sentecho
    (8) sentencias -> . sentfunc
    (9) sentencias -> . sentreturn
    (10) sentencias -> . sentfor
    (11) sentencias -> . sentwhile
    (12) sentencias -> . sentdowhile
    (23) sentassign -> . ID EQUAL exp SEMICOLON
    (24) sentassign -> . ID PLUSPLUS SEMICOLON
    (25) sentassign -> . ID MINUSMINUS SEMICOLON
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS
    (18) sentif -> . IF genif auxsentif
    (15) sentecho -> . ECHO typevar SEMICOLON
    (16) sentecho -> . ECHO exp SEMICOLON
    (17) sentecho -> . ECHO cond SEMICOLON
    (88) sentfunc -> . FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (13) sentreturn -> . RETURN type SEMICOLON
    (14) sentreturn -> . RETURN cond SEMICOLON
    (91) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (92) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (93) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (94) sentwhile -> . WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (95) sentdowhile -> . DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON

    PHPCLOSING      reduce using rule 3 (declaracion_sentencias -> sentencias .)
    CCBRACKET       reduce using rule 3 (declaracion_sentencias -> sentencias .)
    ID              shift and go to state 14
    NAMEFUNCTION    shift and go to state 15
    IF              shift and go to state 16
    ECHO            shift and go to state 17
    FUNCTION        shift and go to state 18
    RETURN          shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22

    sentencias                     shift and go to state 4
    declaracion_sentencias         shift and go to state 24
    sentassign                     shift and go to state 5
    call_function                  shift and go to state 6
    sentif                         shift and go to state 7
    sentecho                       shift and go to state 8
    sentfunc                       shift and go to state 9
    sentreturn                     shift and go to state 10
    sentfor                        shift and go to state 11
    sentwhile                      shift and go to state 12
    sentdowhile                    shift and go to state 13

state 5

    (4) sentencias -> sentassign .

    ID              reduce using rule 4 (sentencias -> sentassign .)
    NAMEFUNCTION    reduce using rule 4 (sentencias -> sentassign .)
    IF              reduce using rule 4 (sentencias -> sentassign .)
    ECHO            reduce using rule 4 (sentencias -> sentassign .)
    FUNCTION        reduce using rule 4 (sentencias -> sentassign .)
    RETURN          reduce using rule 4 (sentencias -> sentassign .)
    FOR             reduce using rule 4 (sentencias -> sentassign .)
    WHILE           reduce using rule 4 (sentencias -> sentassign .)
    DO              reduce using rule 4 (sentencias -> sentassign .)
    PHPCLOSING      reduce using rule 4 (sentencias -> sentassign .)
    CCBRACKET       reduce using rule 4 (sentencias -> sentassign .)


state 6

    (5) sentencias -> call_function . SEMICOLON

    SEMICOLON       shift and go to state 25


state 7

    (6) sentencias -> sentif .

    ID              reduce using rule 6 (sentencias -> sentif .)
    NAMEFUNCTION    reduce using rule 6 (sentencias -> sentif .)
    IF              reduce using rule 6 (sentencias -> sentif .)
    ECHO            reduce using rule 6 (sentencias -> sentif .)
    FUNCTION        reduce using rule 6 (sentencias -> sentif .)
    RETURN          reduce using rule 6 (sentencias -> sentif .)
    FOR             reduce using rule 6 (sentencias -> sentif .)
    WHILE           reduce using rule 6 (sentencias -> sentif .)
    DO              reduce using rule 6 (sentencias -> sentif .)
    PHPCLOSING      reduce using rule 6 (sentencias -> sentif .)
    CCBRACKET       reduce using rule 6 (sentencias -> sentif .)


state 8

    (7) sentencias -> sentecho .

    ID              reduce using rule 7 (sentencias -> sentecho .)
    NAMEFUNCTION    reduce using rule 7 (sentencias -> sentecho .)
    IF              reduce using rule 7 (sentencias -> sentecho .)
    ECHO            reduce using rule 7 (sentencias -> sentecho .)
    FUNCTION        reduce using rule 7 (sentencias -> sentecho .)
    RETURN          reduce using rule 7 (sentencias -> sentecho .)
    FOR             reduce using rule 7 (sentencias -> sentecho .)
    WHILE           reduce using rule 7 (sentencias -> sentecho .)
    DO              reduce using rule 7 (sentencias -> sentecho .)
    PHPCLOSING      reduce using rule 7 (sentencias -> sentecho .)
    CCBRACKET       reduce using rule 7 (sentencias -> sentecho .)


state 9

    (8) sentencias -> sentfunc .

    ID              reduce using rule 8 (sentencias -> sentfunc .)
    NAMEFUNCTION    reduce using rule 8 (sentencias -> sentfunc .)
    IF              reduce using rule 8 (sentencias -> sentfunc .)
    ECHO            reduce using rule 8 (sentencias -> sentfunc .)
    FUNCTION        reduce using rule 8 (sentencias -> sentfunc .)
    RETURN          reduce using rule 8 (sentencias -> sentfunc .)
    FOR             reduce using rule 8 (sentencias -> sentfunc .)
    WHILE           reduce using rule 8 (sentencias -> sentfunc .)
    DO              reduce using rule 8 (sentencias -> sentfunc .)
    PHPCLOSING      reduce using rule 8 (sentencias -> sentfunc .)
    CCBRACKET       reduce using rule 8 (sentencias -> sentfunc .)


state 10

    (9) sentencias -> sentreturn .

    ID              reduce using rule 9 (sentencias -> sentreturn .)
    NAMEFUNCTION    reduce using rule 9 (sentencias -> sentreturn .)
    IF              reduce using rule 9 (sentencias -> sentreturn .)
    ECHO            reduce using rule 9 (sentencias -> sentreturn .)
    FUNCTION        reduce using rule 9 (sentencias -> sentreturn .)
    RETURN          reduce using rule 9 (sentencias -> sentreturn .)
    FOR             reduce using rule 9 (sentencias -> sentreturn .)
    WHILE           reduce using rule 9 (sentencias -> sentreturn .)
    DO              reduce using rule 9 (sentencias -> sentreturn .)
    PHPCLOSING      reduce using rule 9 (sentencias -> sentreturn .)
    CCBRACKET       reduce using rule 9 (sentencias -> sentreturn .)


state 11

    (10) sentencias -> sentfor .

    ID              reduce using rule 10 (sentencias -> sentfor .)
    NAMEFUNCTION    reduce using rule 10 (sentencias -> sentfor .)
    IF              reduce using rule 10 (sentencias -> sentfor .)
    ECHO            reduce using rule 10 (sentencias -> sentfor .)
    FUNCTION        reduce using rule 10 (sentencias -> sentfor .)
    RETURN          reduce using rule 10 (sentencias -> sentfor .)
    FOR             reduce using rule 10 (sentencias -> sentfor .)
    WHILE           reduce using rule 10 (sentencias -> sentfor .)
    DO              reduce using rule 10 (sentencias -> sentfor .)
    PHPCLOSING      reduce using rule 10 (sentencias -> sentfor .)
    CCBRACKET       reduce using rule 10 (sentencias -> sentfor .)


state 12

    (11) sentencias -> sentwhile .

    ID              reduce using rule 11 (sentencias -> sentwhile .)
    NAMEFUNCTION    reduce using rule 11 (sentencias -> sentwhile .)
    IF              reduce using rule 11 (sentencias -> sentwhile .)
    ECHO            reduce using rule 11 (sentencias -> sentwhile .)
    FUNCTION        reduce using rule 11 (sentencias -> sentwhile .)
    RETURN          reduce using rule 11 (sentencias -> sentwhile .)
    FOR             reduce using rule 11 (sentencias -> sentwhile .)
    WHILE           reduce using rule 11 (sentencias -> sentwhile .)
    DO              reduce using rule 11 (sentencias -> sentwhile .)
    PHPCLOSING      reduce using rule 11 (sentencias -> sentwhile .)
    CCBRACKET       reduce using rule 11 (sentencias -> sentwhile .)


state 13

    (12) sentencias -> sentdowhile .

    ID              reduce using rule 12 (sentencias -> sentdowhile .)
    NAMEFUNCTION    reduce using rule 12 (sentencias -> sentdowhile .)
    IF              reduce using rule 12 (sentencias -> sentdowhile .)
    ECHO            reduce using rule 12 (sentencias -> sentdowhile .)
    FUNCTION        reduce using rule 12 (sentencias -> sentdowhile .)
    RETURN          reduce using rule 12 (sentencias -> sentdowhile .)
    FOR             reduce using rule 12 (sentencias -> sentdowhile .)
    WHILE           reduce using rule 12 (sentencias -> sentdowhile .)
    DO              reduce using rule 12 (sentencias -> sentdowhile .)
    PHPCLOSING      reduce using rule 12 (sentencias -> sentdowhile .)
    CCBRACKET       reduce using rule 12 (sentencias -> sentdowhile .)


state 14

    (23) sentassign -> ID . EQUAL exp SEMICOLON
    (24) sentassign -> ID . PLUSPLUS SEMICOLON
    (25) sentassign -> ID . MINUSMINUS SEMICOLON

    EQUAL           shift and go to state 26
    PLUSPLUS        shift and go to state 27
    MINUSMINUS      shift and go to state 28


state 15

    (89) call_function -> NAMEFUNCTION .
    (90) call_function -> NAMEFUNCTION . OPARENTHESIS arg CPARENTHESIS

    SEMICOLON       reduce using rule 89 (call_function -> NAMEFUNCTION .)
    TIMES           reduce using rule 89 (call_function -> NAMEFUNCTION .)
    SLASH           reduce using rule 89 (call_function -> NAMEFUNCTION .)
    PERCENTAGE      reduce using rule 89 (call_function -> NAMEFUNCTION .)
    POW             reduce using rule 89 (call_function -> NAMEFUNCTION .)
    EQUALE          reduce using rule 89 (call_function -> NAMEFUNCTION .)
    DEQUAL          reduce using rule 89 (call_function -> NAMEFUNCTION .)
    IDENTIC         reduce using rule 89 (call_function -> NAMEFUNCTION .)
    GREAT           reduce using rule 89 (call_function -> NAMEFUNCTION .)
    GREATE          reduce using rule 89 (call_function -> NAMEFUNCTION .)
    LESS            reduce using rule 89 (call_function -> NAMEFUNCTION .)
    LESSE           reduce using rule 89 (call_function -> NAMEFUNCTION .)
    PLUS            reduce using rule 89 (call_function -> NAMEFUNCTION .)
    SCORE           reduce using rule 89 (call_function -> NAMEFUNCTION .)
    AND             reduce using rule 89 (call_function -> NAMEFUNCTION .)
    OR              reduce using rule 89 (call_function -> NAMEFUNCTION .)
    XOR             reduce using rule 89 (call_function -> NAMEFUNCTION .)
    NOT             reduce using rule 89 (call_function -> NAMEFUNCTION .)
    CPARENTHESIS    reduce using rule 89 (call_function -> NAMEFUNCTION .)
    COMMA           reduce using rule 89 (call_function -> NAMEFUNCTION .)
    OPARENTHESIS    shift and go to state 29


state 16

    (18) sentif -> IF . genif auxsentif
    (22) genif -> . OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET

    OPARENTHESIS    shift and go to state 31

    genif                          shift and go to state 30

state 17

    (15) sentecho -> ECHO . typevar SEMICOLON
    (16) sentecho -> ECHO . exp SEMICOLON
    (17) sentecho -> ECHO . cond SEMICOLON
    (50) typevar -> . NUMBER
    (51) typevar -> . STRINGWR
    (52) typevar -> . STRINGGWR
    (53) typevar -> . TRUE
    (54) typevar -> . FALSE
    (32) exp -> . expsimple opcomparacion expsimple
    (33) exp -> . OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS
    (34) exp -> . expsimple
    (61) cond -> . type
    (62) cond -> . cond opcomparacion cond
    (63) cond -> . cond oplogicos cond
    (64) cond -> . OPARENTHESIS type CPARENTHESIS
    (65) cond -> . OPARENTHESIS cond CPARENTHESIS
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (66) type -> . typevar
    (67) type -> . var_declaration_gen
    (44) term -> . term opmult factor
    (45) term -> . factor
    (68) var_declaration_gen -> . ID
    (69) var_declaration_gen -> . ID PLUSPLUS
    (70) var_declaration_gen -> . ID MINUSMINUS
    (71) var_declaration_gen -> . MINUSMINUS ID
    (72) var_declaration_gen -> . PLUSPLUS ID
    (73) var_declaration_gen -> . typevar
    (74) var_declaration_gen -> . exp
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    NUMBER          shift and go to state 35
    STRINGWR        shift and go to state 36
    STRINGGWR       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    OPARENTHESIS    shift and go to state 41
    ID              shift and go to state 46
    MINUSMINUS      shift and go to state 48
    PLUSPLUS        shift and go to state 47
    NAMEFUNCTION    shift and go to state 15

    typevar                        shift and go to state 32
    exp                            shift and go to state 33
    cond                           shift and go to state 34
    expsimple                      shift and go to state 40
    type                           shift and go to state 42
    term                           shift and go to state 43
    var_declaration_gen            shift and go to state 44
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 18

    (88) sentfunc -> FUNCTION . NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET

    NAMEFUNCTION    shift and go to state 50


state 19

    (13) sentreturn -> RETURN . type SEMICOLON
    (14) sentreturn -> RETURN . cond SEMICOLON
    (66) type -> . typevar
    (67) type -> . var_declaration_gen
    (61) cond -> . type
    (62) cond -> . cond opcomparacion cond
    (63) cond -> . cond oplogicos cond
    (64) cond -> . OPARENTHESIS type CPARENTHESIS
    (65) cond -> . OPARENTHESIS cond CPARENTHESIS
    (50) typevar -> . NUMBER
    (51) typevar -> . STRINGWR
    (52) typevar -> . STRINGGWR
    (53) typevar -> . TRUE
    (54) typevar -> . FALSE
    (68) var_declaration_gen -> . ID
    (69) var_declaration_gen -> . ID PLUSPLUS
    (70) var_declaration_gen -> . ID MINUSMINUS
    (71) var_declaration_gen -> . MINUSMINUS ID
    (72) var_declaration_gen -> . PLUSPLUS ID
    (73) var_declaration_gen -> . typevar
    (74) var_declaration_gen -> . exp
    (32) exp -> . expsimple opcomparacion expsimple
    (33) exp -> . OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS
    (34) exp -> . expsimple
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (44) term -> . term opmult factor
    (45) term -> . factor
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    OPARENTHESIS    shift and go to state 54
    NUMBER          shift and go to state 35
    STRINGWR        shift and go to state 36
    STRINGGWR       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 46
    MINUSMINUS      shift and go to state 48
    PLUSPLUS        shift and go to state 47
    NAMEFUNCTION    shift and go to state 15

    type                           shift and go to state 51
    cond                           shift and go to state 52
    typevar                        shift and go to state 53
    var_declaration_gen            shift and go to state 44
    exp                            shift and go to state 55
    expsimple                      shift and go to state 40
    term                           shift and go to state 43
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 20

    (91) sentfor -> FOR . OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (92) sentfor -> FOR . OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (93) sentfor -> FOR . OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET

    OPARENTHESIS    shift and go to state 56


state 21

    (94) sentwhile -> WHILE . OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET

    OPARENTHESIS    shift and go to state 57


state 22

    (95) sentdowhile -> DO . OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON

    OCBRACKET       shift and go to state 58


state 23

    (1) program -> PHPDECLARATION declaracion_sentencias PHPCLOSING .

    $end            reduce using rule 1 (program -> PHPDECLARATION declaracion_sentencias PHPCLOSING .)


state 24

    (2) declaracion_sentencias -> sentencias declaracion_sentencias .

    PHPCLOSING      reduce using rule 2 (declaracion_sentencias -> sentencias declaracion_sentencias .)
    CCBRACKET       reduce using rule 2 (declaracion_sentencias -> sentencias declaracion_sentencias .)


state 25

    (5) sentencias -> call_function SEMICOLON .

    ID              reduce using rule 5 (sentencias -> call_function SEMICOLON .)
    NAMEFUNCTION    reduce using rule 5 (sentencias -> call_function SEMICOLON .)
    IF              reduce using rule 5 (sentencias -> call_function SEMICOLON .)
    ECHO            reduce using rule 5 (sentencias -> call_function SEMICOLON .)
    FUNCTION        reduce using rule 5 (sentencias -> call_function SEMICOLON .)
    RETURN          reduce using rule 5 (sentencias -> call_function SEMICOLON .)
    FOR             reduce using rule 5 (sentencias -> call_function SEMICOLON .)
    WHILE           reduce using rule 5 (sentencias -> call_function SEMICOLON .)
    DO              reduce using rule 5 (sentencias -> call_function SEMICOLON .)
    PHPCLOSING      reduce using rule 5 (sentencias -> call_function SEMICOLON .)
    CCBRACKET       reduce using rule 5 (sentencias -> call_function SEMICOLON .)


state 26

    (23) sentassign -> ID EQUAL . exp SEMICOLON
    (32) exp -> . expsimple opcomparacion expsimple
    (33) exp -> . OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS
    (34) exp -> . expsimple
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (44) term -> . term opmult factor
    (45) term -> . factor
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    OPARENTHESIS    shift and go to state 61
    NUMBER          shift and go to state 62
    ID              shift and go to state 59
    NAMEFUNCTION    shift and go to state 15

    exp                            shift and go to state 60
    expsimple                      shift and go to state 40
    term                           shift and go to state 43
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 27

    (24) sentassign -> ID PLUSPLUS . SEMICOLON

    SEMICOLON       shift and go to state 63


state 28

    (25) sentassign -> ID MINUSMINUS . SEMICOLON

    SEMICOLON       shift and go to state 64


state 29

    (90) call_function -> NAMEFUNCTION OPARENTHESIS . arg CPARENTHESIS
    (75) arg -> . var_declaration_gen
    (76) arg -> . type
    (77) arg -> . expsimple
    (78) arg -> . type COMMA arg
    (79) arg -> . STRINGWR
    (80) arg -> . STRINGGWR
    (81) arg -> . var_declaration_gen COMMA arg
    (82) arg -> . STRINGWR COMMA arg
    (83) arg -> . STRINGGWR COMMA arg
    (84) arg -> .
    (68) var_declaration_gen -> . ID
    (69) var_declaration_gen -> . ID PLUSPLUS
    (70) var_declaration_gen -> . ID MINUSMINUS
    (71) var_declaration_gen -> . MINUSMINUS ID
    (72) var_declaration_gen -> . PLUSPLUS ID
    (73) var_declaration_gen -> . typevar
    (74) var_declaration_gen -> . exp
    (66) type -> . typevar
    (67) type -> . var_declaration_gen
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (50) typevar -> . NUMBER
    (51) typevar -> . STRINGWR
    (52) typevar -> . STRINGGWR
    (53) typevar -> . TRUE
    (54) typevar -> . FALSE
    (32) exp -> . expsimple opcomparacion expsimple
    (33) exp -> . OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS
    (34) exp -> . expsimple
    (44) term -> . term opmult factor
    (45) term -> . factor
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    STRINGWR        shift and go to state 69
    STRINGGWR       shift and go to state 70
    CPARENTHESIS    reduce using rule 84 (arg -> .)
    ID              shift and go to state 46
    MINUSMINUS      shift and go to state 48
    PLUSPLUS        shift and go to state 47
    NUMBER          shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    OPARENTHESIS    shift and go to state 61
    NAMEFUNCTION    shift and go to state 15

    arg                            shift and go to state 65
    var_declaration_gen            shift and go to state 66
    type                           shift and go to state 67
    expsimple                      shift and go to state 68
    typevar                        shift and go to state 71
    exp                            shift and go to state 55
    term                           shift and go to state 43
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 30

    (18) sentif -> IF genif . auxsentif
    (19) auxsentif -> . ELSE IF genif auxsentif
    (20) auxsentif -> . ELSE OCBRACKET declaracion_sentencias CCBRACKET
    (21) auxsentif -> . empty
    (96) empty -> .

    ELSE            shift and go to state 73
    ID              reduce using rule 96 (empty -> .)
    NAMEFUNCTION    reduce using rule 96 (empty -> .)
    IF              reduce using rule 96 (empty -> .)
    ECHO            reduce using rule 96 (empty -> .)
    FUNCTION        reduce using rule 96 (empty -> .)
    RETURN          reduce using rule 96 (empty -> .)
    FOR             reduce using rule 96 (empty -> .)
    WHILE           reduce using rule 96 (empty -> .)
    DO              reduce using rule 96 (empty -> .)
    PHPCLOSING      reduce using rule 96 (empty -> .)
    CCBRACKET       reduce using rule 96 (empty -> .)

    auxsentif                      shift and go to state 72
    empty                          shift and go to state 74

state 31

    (22) genif -> OPARENTHESIS . cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (61) cond -> . type
    (62) cond -> . cond opcomparacion cond
    (63) cond -> . cond oplogicos cond
    (64) cond -> . OPARENTHESIS type CPARENTHESIS
    (65) cond -> . OPARENTHESIS cond CPARENTHESIS
    (66) type -> . typevar
    (67) type -> . var_declaration_gen
    (50) typevar -> . NUMBER
    (51) typevar -> . STRINGWR
    (52) typevar -> . STRINGGWR
    (53) typevar -> . TRUE
    (54) typevar -> . FALSE
    (68) var_declaration_gen -> . ID
    (69) var_declaration_gen -> . ID PLUSPLUS
    (70) var_declaration_gen -> . ID MINUSMINUS
    (71) var_declaration_gen -> . MINUSMINUS ID
    (72) var_declaration_gen -> . PLUSPLUS ID
    (73) var_declaration_gen -> . typevar
    (74) var_declaration_gen -> . exp
    (32) exp -> . expsimple opcomparacion expsimple
    (33) exp -> . OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS
    (34) exp -> . expsimple
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (44) term -> . term opmult factor
    (45) term -> . factor
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    OPARENTHESIS    shift and go to state 54
    NUMBER          shift and go to state 35
    STRINGWR        shift and go to state 36
    STRINGGWR       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 46
    MINUSMINUS      shift and go to state 48
    PLUSPLUS        shift and go to state 47
    NAMEFUNCTION    shift and go to state 15

    cond                           shift and go to state 75
    type                           shift and go to state 42
    typevar                        shift and go to state 53
    var_declaration_gen            shift and go to state 44
    exp                            shift and go to state 55
    expsimple                      shift and go to state 40
    term                           shift and go to state 43
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 32

    (15) sentecho -> ECHO typevar . SEMICOLON
    (66) type -> typevar .
    (73) var_declaration_gen -> typevar .

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! reduce/reduce conflict for EQUALE resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for DEQUAL resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for IDENTIC resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for GREAT resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for GREATE resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for LESS resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for LESSE resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for AND resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for OR resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for XOR resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for NOT resolved using rule 66 (type -> typevar .)
    SEMICOLON       shift and go to state 76
    EQUALE          reduce using rule 66 (type -> typevar .)
    DEQUAL          reduce using rule 66 (type -> typevar .)
    IDENTIC         reduce using rule 66 (type -> typevar .)
    GREAT           reduce using rule 66 (type -> typevar .)
    GREATE          reduce using rule 66 (type -> typevar .)
    LESS            reduce using rule 66 (type -> typevar .)
    LESSE           reduce using rule 66 (type -> typevar .)
    AND             reduce using rule 66 (type -> typevar .)
    OR              reduce using rule 66 (type -> typevar .)
    XOR             reduce using rule 66 (type -> typevar .)
    NOT             reduce using rule 66 (type -> typevar .)

  ! SEMICOLON       [ reduce using rule 66 (type -> typevar .) ]
  ! SEMICOLON       [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! EQUALE          [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! DEQUAL          [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! IDENTIC         [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! GREAT           [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! GREATE          [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! LESS            [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! LESSE           [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! AND             [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! OR              [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! XOR             [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! NOT             [ reduce using rule 73 (var_declaration_gen -> typevar .) ]


state 33

    (16) sentecho -> ECHO exp . SEMICOLON
    (74) var_declaration_gen -> exp .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 77
    EQUALE          reduce using rule 74 (var_declaration_gen -> exp .)
    DEQUAL          reduce using rule 74 (var_declaration_gen -> exp .)
    IDENTIC         reduce using rule 74 (var_declaration_gen -> exp .)
    GREAT           reduce using rule 74 (var_declaration_gen -> exp .)
    GREATE          reduce using rule 74 (var_declaration_gen -> exp .)
    LESS            reduce using rule 74 (var_declaration_gen -> exp .)
    LESSE           reduce using rule 74 (var_declaration_gen -> exp .)
    AND             reduce using rule 74 (var_declaration_gen -> exp .)
    OR              reduce using rule 74 (var_declaration_gen -> exp .)
    XOR             reduce using rule 74 (var_declaration_gen -> exp .)
    NOT             reduce using rule 74 (var_declaration_gen -> exp .)

  ! SEMICOLON       [ reduce using rule 74 (var_declaration_gen -> exp .) ]


state 34

    (17) sentecho -> ECHO cond . SEMICOLON
    (62) cond -> cond . opcomparacion cond
    (63) cond -> cond . oplogicos cond
    (35) opcomparacion -> . EQUALE
    (36) opcomparacion -> . DEQUAL
    (37) opcomparacion -> . IDENTIC
    (38) opcomparacion -> . GREAT
    (39) opcomparacion -> . GREATE
    (40) opcomparacion -> . LESS
    (41) opcomparacion -> . LESSE
    (28) oplogicos -> . AND
    (29) oplogicos -> . OR
    (30) oplogicos -> . XOR
    (31) oplogicos -> . NOT

    SEMICOLON       shift and go to state 78
    EQUALE          shift and go to state 81
    DEQUAL          shift and go to state 82
    IDENTIC         shift and go to state 83
    GREAT           shift and go to state 84
    GREATE          shift and go to state 85
    LESS            shift and go to state 86
    LESSE           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    XOR             shift and go to state 90
    NOT             shift and go to state 91

    opcomparacion                  shift and go to state 79
    oplogicos                      shift and go to state 80

state 35

    (50) typevar -> NUMBER .
    (46) factor -> NUMBER .

  ! reduce/reduce conflict for EQUALE resolved using rule 46 (factor -> NUMBER .)
  ! reduce/reduce conflict for DEQUAL resolved using rule 46 (factor -> NUMBER .)
  ! reduce/reduce conflict for IDENTIC resolved using rule 46 (factor -> NUMBER .)
  ! reduce/reduce conflict for GREAT resolved using rule 46 (factor -> NUMBER .)
  ! reduce/reduce conflict for GREATE resolved using rule 46 (factor -> NUMBER .)
  ! reduce/reduce conflict for LESS resolved using rule 46 (factor -> NUMBER .)
  ! reduce/reduce conflict for LESSE resolved using rule 46 (factor -> NUMBER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 46 (factor -> NUMBER .)
  ! reduce/reduce conflict for AND resolved using rule 46 (factor -> NUMBER .)
  ! reduce/reduce conflict for OR resolved using rule 46 (factor -> NUMBER .)
  ! reduce/reduce conflict for XOR resolved using rule 46 (factor -> NUMBER .)
  ! reduce/reduce conflict for NOT resolved using rule 46 (factor -> NUMBER .)
  ! reduce/reduce conflict for CPARENTHESIS resolved using rule 46 (factor -> NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 46 (factor -> NUMBER .)
    TIMES           reduce using rule 46 (factor -> NUMBER .)
    SLASH           reduce using rule 46 (factor -> NUMBER .)
    PERCENTAGE      reduce using rule 46 (factor -> NUMBER .)
    POW             reduce using rule 46 (factor -> NUMBER .)
    EQUALE          reduce using rule 46 (factor -> NUMBER .)
    DEQUAL          reduce using rule 46 (factor -> NUMBER .)
    IDENTIC         reduce using rule 46 (factor -> NUMBER .)
    GREAT           reduce using rule 46 (factor -> NUMBER .)
    GREATE          reduce using rule 46 (factor -> NUMBER .)
    LESS            reduce using rule 46 (factor -> NUMBER .)
    LESSE           reduce using rule 46 (factor -> NUMBER .)
    PLUS            reduce using rule 46 (factor -> NUMBER .)
    SCORE           reduce using rule 46 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 46 (factor -> NUMBER .)
    AND             reduce using rule 46 (factor -> NUMBER .)
    OR              reduce using rule 46 (factor -> NUMBER .)
    XOR             reduce using rule 46 (factor -> NUMBER .)
    NOT             reduce using rule 46 (factor -> NUMBER .)
    CPARENTHESIS    reduce using rule 46 (factor -> NUMBER .)
    COMMA           reduce using rule 46 (factor -> NUMBER .)

  ! SEMICOLON       [ reduce using rule 50 (typevar -> NUMBER .) ]
  ! EQUALE          [ reduce using rule 50 (typevar -> NUMBER .) ]
  ! DEQUAL          [ reduce using rule 50 (typevar -> NUMBER .) ]
  ! IDENTIC         [ reduce using rule 50 (typevar -> NUMBER .) ]
  ! GREAT           [ reduce using rule 50 (typevar -> NUMBER .) ]
  ! GREATE          [ reduce using rule 50 (typevar -> NUMBER .) ]
  ! LESS            [ reduce using rule 50 (typevar -> NUMBER .) ]
  ! LESSE           [ reduce using rule 50 (typevar -> NUMBER .) ]
  ! AND             [ reduce using rule 50 (typevar -> NUMBER .) ]
  ! OR              [ reduce using rule 50 (typevar -> NUMBER .) ]
  ! XOR             [ reduce using rule 50 (typevar -> NUMBER .) ]
  ! NOT             [ reduce using rule 50 (typevar -> NUMBER .) ]
  ! COMMA           [ reduce using rule 50 (typevar -> NUMBER .) ]
  ! CPARENTHESIS    [ reduce using rule 50 (typevar -> NUMBER .) ]


state 36

    (51) typevar -> STRINGWR .

    SEMICOLON       reduce using rule 51 (typevar -> STRINGWR .)
    EQUALE          reduce using rule 51 (typevar -> STRINGWR .)
    DEQUAL          reduce using rule 51 (typevar -> STRINGWR .)
    IDENTIC         reduce using rule 51 (typevar -> STRINGWR .)
    GREAT           reduce using rule 51 (typevar -> STRINGWR .)
    GREATE          reduce using rule 51 (typevar -> STRINGWR .)
    LESS            reduce using rule 51 (typevar -> STRINGWR .)
    LESSE           reduce using rule 51 (typevar -> STRINGWR .)
    AND             reduce using rule 51 (typevar -> STRINGWR .)
    OR              reduce using rule 51 (typevar -> STRINGWR .)
    XOR             reduce using rule 51 (typevar -> STRINGWR .)
    NOT             reduce using rule 51 (typevar -> STRINGWR .)
    CPARENTHESIS    reduce using rule 51 (typevar -> STRINGWR .)


state 37

    (52) typevar -> STRINGGWR .

    SEMICOLON       reduce using rule 52 (typevar -> STRINGGWR .)
    EQUALE          reduce using rule 52 (typevar -> STRINGGWR .)
    DEQUAL          reduce using rule 52 (typevar -> STRINGGWR .)
    IDENTIC         reduce using rule 52 (typevar -> STRINGGWR .)
    GREAT           reduce using rule 52 (typevar -> STRINGGWR .)
    GREATE          reduce using rule 52 (typevar -> STRINGGWR .)
    LESS            reduce using rule 52 (typevar -> STRINGGWR .)
    LESSE           reduce using rule 52 (typevar -> STRINGGWR .)
    AND             reduce using rule 52 (typevar -> STRINGGWR .)
    OR              reduce using rule 52 (typevar -> STRINGGWR .)
    XOR             reduce using rule 52 (typevar -> STRINGGWR .)
    NOT             reduce using rule 52 (typevar -> STRINGGWR .)
    CPARENTHESIS    reduce using rule 52 (typevar -> STRINGGWR .)


state 38

    (53) typevar -> TRUE .

    SEMICOLON       reduce using rule 53 (typevar -> TRUE .)
    EQUALE          reduce using rule 53 (typevar -> TRUE .)
    DEQUAL          reduce using rule 53 (typevar -> TRUE .)
    IDENTIC         reduce using rule 53 (typevar -> TRUE .)
    GREAT           reduce using rule 53 (typevar -> TRUE .)
    GREATE          reduce using rule 53 (typevar -> TRUE .)
    LESS            reduce using rule 53 (typevar -> TRUE .)
    LESSE           reduce using rule 53 (typevar -> TRUE .)
    AND             reduce using rule 53 (typevar -> TRUE .)
    OR              reduce using rule 53 (typevar -> TRUE .)
    XOR             reduce using rule 53 (typevar -> TRUE .)
    NOT             reduce using rule 53 (typevar -> TRUE .)
    COMMA           reduce using rule 53 (typevar -> TRUE .)
    CPARENTHESIS    reduce using rule 53 (typevar -> TRUE .)


state 39

    (54) typevar -> FALSE .

    SEMICOLON       reduce using rule 54 (typevar -> FALSE .)
    EQUALE          reduce using rule 54 (typevar -> FALSE .)
    DEQUAL          reduce using rule 54 (typevar -> FALSE .)
    IDENTIC         reduce using rule 54 (typevar -> FALSE .)
    GREAT           reduce using rule 54 (typevar -> FALSE .)
    GREATE          reduce using rule 54 (typevar -> FALSE .)
    LESS            reduce using rule 54 (typevar -> FALSE .)
    LESSE           reduce using rule 54 (typevar -> FALSE .)
    AND             reduce using rule 54 (typevar -> FALSE .)
    OR              reduce using rule 54 (typevar -> FALSE .)
    XOR             reduce using rule 54 (typevar -> FALSE .)
    NOT             reduce using rule 54 (typevar -> FALSE .)
    COMMA           reduce using rule 54 (typevar -> FALSE .)
    CPARENTHESIS    reduce using rule 54 (typevar -> FALSE .)


state 40

    (32) exp -> expsimple . opcomparacion expsimple
    (34) exp -> expsimple .
    (42) expsimple -> expsimple . opsuma term
    (35) opcomparacion -> . EQUALE
    (36) opcomparacion -> . DEQUAL
    (37) opcomparacion -> . IDENTIC
    (38) opcomparacion -> . GREAT
    (39) opcomparacion -> . GREATE
    (40) opcomparacion -> . LESS
    (41) opcomparacion -> . LESSE
    (55) opsuma -> . PLUS
    (56) opsuma -> . SCORE

  ! shift/reduce conflict for EQUALE resolved as shift
  ! shift/reduce conflict for DEQUAL resolved as shift
  ! shift/reduce conflict for IDENTIC resolved as shift
  ! shift/reduce conflict for GREAT resolved as shift
  ! shift/reduce conflict for GREATE resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESSE resolved as shift
    SEMICOLON       reduce using rule 34 (exp -> expsimple .)
    AND             reduce using rule 34 (exp -> expsimple .)
    OR              reduce using rule 34 (exp -> expsimple .)
    XOR             reduce using rule 34 (exp -> expsimple .)
    NOT             reduce using rule 34 (exp -> expsimple .)
    CPARENTHESIS    reduce using rule 34 (exp -> expsimple .)
    EQUALE          shift and go to state 81
    DEQUAL          shift and go to state 82
    IDENTIC         shift and go to state 83
    GREAT           shift and go to state 84
    GREATE          shift and go to state 85
    LESS            shift and go to state 86
    LESSE           shift and go to state 87
    PLUS            shift and go to state 94
    SCORE           shift and go to state 95

  ! EQUALE          [ reduce using rule 34 (exp -> expsimple .) ]
  ! DEQUAL          [ reduce using rule 34 (exp -> expsimple .) ]
  ! IDENTIC         [ reduce using rule 34 (exp -> expsimple .) ]
  ! GREAT           [ reduce using rule 34 (exp -> expsimple .) ]
  ! GREATE          [ reduce using rule 34 (exp -> expsimple .) ]
  ! LESS            [ reduce using rule 34 (exp -> expsimple .) ]
  ! LESSE           [ reduce using rule 34 (exp -> expsimple .) ]

    opcomparacion                  shift and go to state 92
    opsuma                         shift and go to state 93

state 41

    (33) exp -> OPARENTHESIS . expsimple opcomparacion expsimple CPARENTHESIS
    (64) cond -> OPARENTHESIS . type CPARENTHESIS
    (65) cond -> OPARENTHESIS . cond CPARENTHESIS
    (49) factor -> OPARENTHESIS . expsimple CPARENTHESIS
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (66) type -> . typevar
    (67) type -> . var_declaration_gen
    (61) cond -> . type
    (62) cond -> . cond opcomparacion cond
    (63) cond -> . cond oplogicos cond
    (64) cond -> . OPARENTHESIS type CPARENTHESIS
    (65) cond -> . OPARENTHESIS cond CPARENTHESIS
    (44) term -> . term opmult factor
    (45) term -> . factor
    (50) typevar -> . NUMBER
    (51) typevar -> . STRINGWR
    (52) typevar -> . STRINGGWR
    (53) typevar -> . TRUE
    (54) typevar -> . FALSE
    (68) var_declaration_gen -> . ID
    (69) var_declaration_gen -> . ID PLUSPLUS
    (70) var_declaration_gen -> . ID MINUSMINUS
    (71) var_declaration_gen -> . MINUSMINUS ID
    (72) var_declaration_gen -> . PLUSPLUS ID
    (73) var_declaration_gen -> . typevar
    (74) var_declaration_gen -> . exp
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (32) exp -> . expsimple opcomparacion expsimple
    (33) exp -> . OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS
    (34) exp -> . expsimple
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    OPARENTHESIS    shift and go to state 96
    NUMBER          shift and go to state 35
    STRINGWR        shift and go to state 36
    STRINGGWR       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 46
    MINUSMINUS      shift and go to state 48
    PLUSPLUS        shift and go to state 47
    NAMEFUNCTION    shift and go to state 15

    expsimple                      shift and go to state 97
    type                           shift and go to state 98
    cond                           shift and go to state 99
    term                           shift and go to state 43
    typevar                        shift and go to state 53
    var_declaration_gen            shift and go to state 44
    factor                         shift and go to state 45
    exp                            shift and go to state 55
    call_function                  shift and go to state 49

state 42

    (61) cond -> type .

    SEMICOLON       reduce using rule 61 (cond -> type .)
    EQUALE          reduce using rule 61 (cond -> type .)
    DEQUAL          reduce using rule 61 (cond -> type .)
    IDENTIC         reduce using rule 61 (cond -> type .)
    GREAT           reduce using rule 61 (cond -> type .)
    GREATE          reduce using rule 61 (cond -> type .)
    LESS            reduce using rule 61 (cond -> type .)
    LESSE           reduce using rule 61 (cond -> type .)
    AND             reduce using rule 61 (cond -> type .)
    OR              reduce using rule 61 (cond -> type .)
    XOR             reduce using rule 61 (cond -> type .)
    NOT             reduce using rule 61 (cond -> type .)
    CPARENTHESIS    reduce using rule 61 (cond -> type .)


state 43

    (43) expsimple -> term .
    (44) term -> term . opmult factor
    (57) opmult -> . TIMES
    (58) opmult -> . SLASH
    (59) opmult -> . PERCENTAGE
    (60) opmult -> . POW

    EQUALE          reduce using rule 43 (expsimple -> term .)
    DEQUAL          reduce using rule 43 (expsimple -> term .)
    IDENTIC         reduce using rule 43 (expsimple -> term .)
    GREAT           reduce using rule 43 (expsimple -> term .)
    GREATE          reduce using rule 43 (expsimple -> term .)
    LESS            reduce using rule 43 (expsimple -> term .)
    LESSE           reduce using rule 43 (expsimple -> term .)
    PLUS            reduce using rule 43 (expsimple -> term .)
    SCORE           reduce using rule 43 (expsimple -> term .)
    SEMICOLON       reduce using rule 43 (expsimple -> term .)
    AND             reduce using rule 43 (expsimple -> term .)
    OR              reduce using rule 43 (expsimple -> term .)
    XOR             reduce using rule 43 (expsimple -> term .)
    NOT             reduce using rule 43 (expsimple -> term .)
    CPARENTHESIS    reduce using rule 43 (expsimple -> term .)
    COMMA           reduce using rule 43 (expsimple -> term .)
    TIMES           shift and go to state 101
    SLASH           shift and go to state 102
    PERCENTAGE      shift and go to state 103
    POW             shift and go to state 104

    opmult                         shift and go to state 100

state 44

    (67) type -> var_declaration_gen .

    SEMICOLON       reduce using rule 67 (type -> var_declaration_gen .)
    EQUALE          reduce using rule 67 (type -> var_declaration_gen .)
    DEQUAL          reduce using rule 67 (type -> var_declaration_gen .)
    IDENTIC         reduce using rule 67 (type -> var_declaration_gen .)
    GREAT           reduce using rule 67 (type -> var_declaration_gen .)
    GREATE          reduce using rule 67 (type -> var_declaration_gen .)
    LESS            reduce using rule 67 (type -> var_declaration_gen .)
    LESSE           reduce using rule 67 (type -> var_declaration_gen .)
    AND             reduce using rule 67 (type -> var_declaration_gen .)
    OR              reduce using rule 67 (type -> var_declaration_gen .)
    XOR             reduce using rule 67 (type -> var_declaration_gen .)
    NOT             reduce using rule 67 (type -> var_declaration_gen .)
    CPARENTHESIS    reduce using rule 67 (type -> var_declaration_gen .)


state 45

    (45) term -> factor .

    TIMES           reduce using rule 45 (term -> factor .)
    SLASH           reduce using rule 45 (term -> factor .)
    PERCENTAGE      reduce using rule 45 (term -> factor .)
    POW             reduce using rule 45 (term -> factor .)
    EQUALE          reduce using rule 45 (term -> factor .)
    DEQUAL          reduce using rule 45 (term -> factor .)
    IDENTIC         reduce using rule 45 (term -> factor .)
    GREAT           reduce using rule 45 (term -> factor .)
    GREATE          reduce using rule 45 (term -> factor .)
    LESS            reduce using rule 45 (term -> factor .)
    LESSE           reduce using rule 45 (term -> factor .)
    PLUS            reduce using rule 45 (term -> factor .)
    SCORE           reduce using rule 45 (term -> factor .)
    SEMICOLON       reduce using rule 45 (term -> factor .)
    AND             reduce using rule 45 (term -> factor .)
    OR              reduce using rule 45 (term -> factor .)
    XOR             reduce using rule 45 (term -> factor .)
    NOT             reduce using rule 45 (term -> factor .)
    CPARENTHESIS    reduce using rule 45 (term -> factor .)
    COMMA           reduce using rule 45 (term -> factor .)


state 46

    (68) var_declaration_gen -> ID .
    (69) var_declaration_gen -> ID . PLUSPLUS
    (70) var_declaration_gen -> ID . MINUSMINUS
    (47) factor -> ID .

  ! reduce/reduce conflict for EQUALE resolved using rule 47 (factor -> ID .)
  ! reduce/reduce conflict for DEQUAL resolved using rule 47 (factor -> ID .)
  ! reduce/reduce conflict for IDENTIC resolved using rule 47 (factor -> ID .)
  ! reduce/reduce conflict for GREAT resolved using rule 47 (factor -> ID .)
  ! reduce/reduce conflict for GREATE resolved using rule 47 (factor -> ID .)
  ! reduce/reduce conflict for LESS resolved using rule 47 (factor -> ID .)
  ! reduce/reduce conflict for LESSE resolved using rule 47 (factor -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 47 (factor -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 47 (factor -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 47 (factor -> ID .)
  ! reduce/reduce conflict for XOR resolved using rule 47 (factor -> ID .)
  ! reduce/reduce conflict for NOT resolved using rule 47 (factor -> ID .)
  ! reduce/reduce conflict for CPARENTHESIS resolved using rule 47 (factor -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 47 (factor -> ID .)
    PLUSPLUS        shift and go to state 105
    MINUSMINUS      shift and go to state 106
    TIMES           reduce using rule 47 (factor -> ID .)
    SLASH           reduce using rule 47 (factor -> ID .)
    PERCENTAGE      reduce using rule 47 (factor -> ID .)
    POW             reduce using rule 47 (factor -> ID .)
    EQUALE          reduce using rule 47 (factor -> ID .)
    DEQUAL          reduce using rule 47 (factor -> ID .)
    IDENTIC         reduce using rule 47 (factor -> ID .)
    GREAT           reduce using rule 47 (factor -> ID .)
    GREATE          reduce using rule 47 (factor -> ID .)
    LESS            reduce using rule 47 (factor -> ID .)
    LESSE           reduce using rule 47 (factor -> ID .)
    PLUS            reduce using rule 47 (factor -> ID .)
    SCORE           reduce using rule 47 (factor -> ID .)
    SEMICOLON       reduce using rule 47 (factor -> ID .)
    AND             reduce using rule 47 (factor -> ID .)
    OR              reduce using rule 47 (factor -> ID .)
    XOR             reduce using rule 47 (factor -> ID .)
    NOT             reduce using rule 47 (factor -> ID .)
    CPARENTHESIS    reduce using rule 47 (factor -> ID .)
    COMMA           reduce using rule 47 (factor -> ID .)

  ! SEMICOLON       [ reduce using rule 68 (var_declaration_gen -> ID .) ]
  ! EQUALE          [ reduce using rule 68 (var_declaration_gen -> ID .) ]
  ! DEQUAL          [ reduce using rule 68 (var_declaration_gen -> ID .) ]
  ! IDENTIC         [ reduce using rule 68 (var_declaration_gen -> ID .) ]
  ! GREAT           [ reduce using rule 68 (var_declaration_gen -> ID .) ]
  ! GREATE          [ reduce using rule 68 (var_declaration_gen -> ID .) ]
  ! LESS            [ reduce using rule 68 (var_declaration_gen -> ID .) ]
  ! LESSE           [ reduce using rule 68 (var_declaration_gen -> ID .) ]
  ! AND             [ reduce using rule 68 (var_declaration_gen -> ID .) ]
  ! OR              [ reduce using rule 68 (var_declaration_gen -> ID .) ]
  ! XOR             [ reduce using rule 68 (var_declaration_gen -> ID .) ]
  ! NOT             [ reduce using rule 68 (var_declaration_gen -> ID .) ]
  ! COMMA           [ reduce using rule 68 (var_declaration_gen -> ID .) ]
  ! CPARENTHESIS    [ reduce using rule 68 (var_declaration_gen -> ID .) ]


state 47

    (72) var_declaration_gen -> PLUSPLUS . ID

    ID              shift and go to state 107


state 48

    (71) var_declaration_gen -> MINUSMINUS . ID

    ID              shift and go to state 108


state 49

    (48) factor -> call_function .

    TIMES           reduce using rule 48 (factor -> call_function .)
    SLASH           reduce using rule 48 (factor -> call_function .)
    PERCENTAGE      reduce using rule 48 (factor -> call_function .)
    POW             reduce using rule 48 (factor -> call_function .)
    EQUALE          reduce using rule 48 (factor -> call_function .)
    DEQUAL          reduce using rule 48 (factor -> call_function .)
    IDENTIC         reduce using rule 48 (factor -> call_function .)
    GREAT           reduce using rule 48 (factor -> call_function .)
    GREATE          reduce using rule 48 (factor -> call_function .)
    LESS            reduce using rule 48 (factor -> call_function .)
    LESSE           reduce using rule 48 (factor -> call_function .)
    PLUS            reduce using rule 48 (factor -> call_function .)
    SCORE           reduce using rule 48 (factor -> call_function .)
    SEMICOLON       reduce using rule 48 (factor -> call_function .)
    AND             reduce using rule 48 (factor -> call_function .)
    OR              reduce using rule 48 (factor -> call_function .)
    XOR             reduce using rule 48 (factor -> call_function .)
    NOT             reduce using rule 48 (factor -> call_function .)
    CPARENTHESIS    reduce using rule 48 (factor -> call_function .)
    COMMA           reduce using rule 48 (factor -> call_function .)


state 50

    (88) sentfunc -> FUNCTION NAMEFUNCTION . OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET

    OPARENTHESIS    shift and go to state 109


state 51

    (13) sentreturn -> RETURN type . SEMICOLON
    (61) cond -> type .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 110
    EQUALE          reduce using rule 61 (cond -> type .)
    DEQUAL          reduce using rule 61 (cond -> type .)
    IDENTIC         reduce using rule 61 (cond -> type .)
    GREAT           reduce using rule 61 (cond -> type .)
    GREATE          reduce using rule 61 (cond -> type .)
    LESS            reduce using rule 61 (cond -> type .)
    LESSE           reduce using rule 61 (cond -> type .)
    AND             reduce using rule 61 (cond -> type .)
    OR              reduce using rule 61 (cond -> type .)
    XOR             reduce using rule 61 (cond -> type .)
    NOT             reduce using rule 61 (cond -> type .)

  ! SEMICOLON       [ reduce using rule 61 (cond -> type .) ]


state 52

    (14) sentreturn -> RETURN cond . SEMICOLON
    (62) cond -> cond . opcomparacion cond
    (63) cond -> cond . oplogicos cond
    (35) opcomparacion -> . EQUALE
    (36) opcomparacion -> . DEQUAL
    (37) opcomparacion -> . IDENTIC
    (38) opcomparacion -> . GREAT
    (39) opcomparacion -> . GREATE
    (40) opcomparacion -> . LESS
    (41) opcomparacion -> . LESSE
    (28) oplogicos -> . AND
    (29) oplogicos -> . OR
    (30) oplogicos -> . XOR
    (31) oplogicos -> . NOT

    SEMICOLON       shift and go to state 111
    EQUALE          shift and go to state 81
    DEQUAL          shift and go to state 82
    IDENTIC         shift and go to state 83
    GREAT           shift and go to state 84
    GREATE          shift and go to state 85
    LESS            shift and go to state 86
    LESSE           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    XOR             shift and go to state 90
    NOT             shift and go to state 91

    opcomparacion                  shift and go to state 79
    oplogicos                      shift and go to state 80

state 53

    (66) type -> typevar .
    (73) var_declaration_gen -> typevar .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for EQUALE resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for DEQUAL resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for IDENTIC resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for GREAT resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for GREATE resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for LESS resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for LESSE resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for AND resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for OR resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for XOR resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for NOT resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for CPARENTHESIS resolved using rule 66 (type -> typevar .)
    SEMICOLON       reduce using rule 66 (type -> typevar .)
    EQUALE          reduce using rule 66 (type -> typevar .)
    DEQUAL          reduce using rule 66 (type -> typevar .)
    IDENTIC         reduce using rule 66 (type -> typevar .)
    GREAT           reduce using rule 66 (type -> typevar .)
    GREATE          reduce using rule 66 (type -> typevar .)
    LESS            reduce using rule 66 (type -> typevar .)
    LESSE           reduce using rule 66 (type -> typevar .)
    AND             reduce using rule 66 (type -> typevar .)
    OR              reduce using rule 66 (type -> typevar .)
    XOR             reduce using rule 66 (type -> typevar .)
    NOT             reduce using rule 66 (type -> typevar .)
    CPARENTHESIS    reduce using rule 66 (type -> typevar .)

  ! SEMICOLON       [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! EQUALE          [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! DEQUAL          [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! IDENTIC         [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! GREAT           [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! GREATE          [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! LESS            [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! LESSE           [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! AND             [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! OR              [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! XOR             [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! NOT             [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! CPARENTHESIS    [ reduce using rule 73 (var_declaration_gen -> typevar .) ]


state 54

    (64) cond -> OPARENTHESIS . type CPARENTHESIS
    (65) cond -> OPARENTHESIS . cond CPARENTHESIS
    (33) exp -> OPARENTHESIS . expsimple opcomparacion expsimple CPARENTHESIS
    (49) factor -> OPARENTHESIS . expsimple CPARENTHESIS
    (66) type -> . typevar
    (67) type -> . var_declaration_gen
    (61) cond -> . type
    (62) cond -> . cond opcomparacion cond
    (63) cond -> . cond oplogicos cond
    (64) cond -> . OPARENTHESIS type CPARENTHESIS
    (65) cond -> . OPARENTHESIS cond CPARENTHESIS
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (50) typevar -> . NUMBER
    (51) typevar -> . STRINGWR
    (52) typevar -> . STRINGGWR
    (53) typevar -> . TRUE
    (54) typevar -> . FALSE
    (68) var_declaration_gen -> . ID
    (69) var_declaration_gen -> . ID PLUSPLUS
    (70) var_declaration_gen -> . ID MINUSMINUS
    (71) var_declaration_gen -> . MINUSMINUS ID
    (72) var_declaration_gen -> . PLUSPLUS ID
    (73) var_declaration_gen -> . typevar
    (74) var_declaration_gen -> . exp
    (44) term -> . term opmult factor
    (45) term -> . factor
    (32) exp -> . expsimple opcomparacion expsimple
    (33) exp -> . OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS
    (34) exp -> . expsimple
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    OPARENTHESIS    shift and go to state 54
    NUMBER          shift and go to state 35
    STRINGWR        shift and go to state 36
    STRINGGWR       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 46
    MINUSMINUS      shift and go to state 48
    PLUSPLUS        shift and go to state 47
    NAMEFUNCTION    shift and go to state 15

    type                           shift and go to state 98
    cond                           shift and go to state 99
    expsimple                      shift and go to state 97
    typevar                        shift and go to state 53
    var_declaration_gen            shift and go to state 44
    term                           shift and go to state 43
    exp                            shift and go to state 55
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 55

    (74) var_declaration_gen -> exp .

    SEMICOLON       reduce using rule 74 (var_declaration_gen -> exp .)
    EQUALE          reduce using rule 74 (var_declaration_gen -> exp .)
    DEQUAL          reduce using rule 74 (var_declaration_gen -> exp .)
    IDENTIC         reduce using rule 74 (var_declaration_gen -> exp .)
    GREAT           reduce using rule 74 (var_declaration_gen -> exp .)
    GREATE          reduce using rule 74 (var_declaration_gen -> exp .)
    LESS            reduce using rule 74 (var_declaration_gen -> exp .)
    LESSE           reduce using rule 74 (var_declaration_gen -> exp .)
    AND             reduce using rule 74 (var_declaration_gen -> exp .)
    OR              reduce using rule 74 (var_declaration_gen -> exp .)
    XOR             reduce using rule 74 (var_declaration_gen -> exp .)
    NOT             reduce using rule 74 (var_declaration_gen -> exp .)
    COMMA           reduce using rule 74 (var_declaration_gen -> exp .)
    CPARENTHESIS    reduce using rule 74 (var_declaration_gen -> exp .)


state 56

    (91) sentfor -> FOR OPARENTHESIS . ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (92) sentfor -> FOR OPARENTHESIS . ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (93) sentfor -> FOR OPARENTHESIS . ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET

    ID              shift and go to state 112


state 57

    (94) sentwhile -> WHILE OPARENTHESIS . cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (61) cond -> . type
    (62) cond -> . cond opcomparacion cond
    (63) cond -> . cond oplogicos cond
    (64) cond -> . OPARENTHESIS type CPARENTHESIS
    (65) cond -> . OPARENTHESIS cond CPARENTHESIS
    (66) type -> . typevar
    (67) type -> . var_declaration_gen
    (50) typevar -> . NUMBER
    (51) typevar -> . STRINGWR
    (52) typevar -> . STRINGGWR
    (53) typevar -> . TRUE
    (54) typevar -> . FALSE
    (68) var_declaration_gen -> . ID
    (69) var_declaration_gen -> . ID PLUSPLUS
    (70) var_declaration_gen -> . ID MINUSMINUS
    (71) var_declaration_gen -> . MINUSMINUS ID
    (72) var_declaration_gen -> . PLUSPLUS ID
    (73) var_declaration_gen -> . typevar
    (74) var_declaration_gen -> . exp
    (32) exp -> . expsimple opcomparacion expsimple
    (33) exp -> . OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS
    (34) exp -> . expsimple
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (44) term -> . term opmult factor
    (45) term -> . factor
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    OPARENTHESIS    shift and go to state 54
    NUMBER          shift and go to state 35
    STRINGWR        shift and go to state 36
    STRINGGWR       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 46
    MINUSMINUS      shift and go to state 48
    PLUSPLUS        shift and go to state 47
    NAMEFUNCTION    shift and go to state 15

    cond                           shift and go to state 113
    type                           shift and go to state 42
    typevar                        shift and go to state 53
    var_declaration_gen            shift and go to state 44
    exp                            shift and go to state 55
    expsimple                      shift and go to state 40
    term                           shift and go to state 43
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 58

    (95) sentdowhile -> DO OCBRACKET . declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON
    (2) declaracion_sentencias -> . sentencias declaracion_sentencias
    (3) declaracion_sentencias -> . sentencias
    (4) sentencias -> . sentassign
    (5) sentencias -> . call_function SEMICOLON
    (6) sentencias -> . sentif
    (7) sentencias -> . sentecho
    (8) sentencias -> . sentfunc
    (9) sentencias -> . sentreturn
    (10) sentencias -> . sentfor
    (11) sentencias -> . sentwhile
    (12) sentencias -> . sentdowhile
    (23) sentassign -> . ID EQUAL exp SEMICOLON
    (24) sentassign -> . ID PLUSPLUS SEMICOLON
    (25) sentassign -> . ID MINUSMINUS SEMICOLON
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS
    (18) sentif -> . IF genif auxsentif
    (15) sentecho -> . ECHO typevar SEMICOLON
    (16) sentecho -> . ECHO exp SEMICOLON
    (17) sentecho -> . ECHO cond SEMICOLON
    (88) sentfunc -> . FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (13) sentreturn -> . RETURN type SEMICOLON
    (14) sentreturn -> . RETURN cond SEMICOLON
    (91) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (92) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (93) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (94) sentwhile -> . WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (95) sentdowhile -> . DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON

    ID              shift and go to state 14
    NAMEFUNCTION    shift and go to state 15
    IF              shift and go to state 16
    ECHO            shift and go to state 17
    FUNCTION        shift and go to state 18
    RETURN          shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22

    declaracion_sentencias         shift and go to state 114
    sentencias                     shift and go to state 4
    sentassign                     shift and go to state 5
    call_function                  shift and go to state 6
    sentif                         shift and go to state 7
    sentecho                       shift and go to state 8
    sentfunc                       shift and go to state 9
    sentreturn                     shift and go to state 10
    sentfor                        shift and go to state 11
    sentwhile                      shift and go to state 12
    sentdowhile                    shift and go to state 13

state 59

    (47) factor -> ID .

    TIMES           reduce using rule 47 (factor -> ID .)
    SLASH           reduce using rule 47 (factor -> ID .)
    PERCENTAGE      reduce using rule 47 (factor -> ID .)
    POW             reduce using rule 47 (factor -> ID .)
    EQUALE          reduce using rule 47 (factor -> ID .)
    DEQUAL          reduce using rule 47 (factor -> ID .)
    IDENTIC         reduce using rule 47 (factor -> ID .)
    GREAT           reduce using rule 47 (factor -> ID .)
    GREATE          reduce using rule 47 (factor -> ID .)
    LESS            reduce using rule 47 (factor -> ID .)
    LESSE           reduce using rule 47 (factor -> ID .)
    PLUS            reduce using rule 47 (factor -> ID .)
    SCORE           reduce using rule 47 (factor -> ID .)
    SEMICOLON       reduce using rule 47 (factor -> ID .)
    CPARENTHESIS    reduce using rule 47 (factor -> ID .)
    AND             reduce using rule 47 (factor -> ID .)
    OR              reduce using rule 47 (factor -> ID .)
    XOR             reduce using rule 47 (factor -> ID .)
    NOT             reduce using rule 47 (factor -> ID .)
    COMMA           reduce using rule 47 (factor -> ID .)


state 60

    (23) sentassign -> ID EQUAL exp . SEMICOLON

    SEMICOLON       shift and go to state 115


state 61

    (33) exp -> OPARENTHESIS . expsimple opcomparacion expsimple CPARENTHESIS
    (49) factor -> OPARENTHESIS . expsimple CPARENTHESIS
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (44) term -> . term opmult factor
    (45) term -> . factor
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    NUMBER          shift and go to state 62
    ID              shift and go to state 59
    OPARENTHESIS    shift and go to state 116
    NAMEFUNCTION    shift and go to state 15

    expsimple                      shift and go to state 117
    term                           shift and go to state 43
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 62

    (46) factor -> NUMBER .

    TIMES           reduce using rule 46 (factor -> NUMBER .)
    SLASH           reduce using rule 46 (factor -> NUMBER .)
    PERCENTAGE      reduce using rule 46 (factor -> NUMBER .)
    POW             reduce using rule 46 (factor -> NUMBER .)
    EQUALE          reduce using rule 46 (factor -> NUMBER .)
    DEQUAL          reduce using rule 46 (factor -> NUMBER .)
    IDENTIC         reduce using rule 46 (factor -> NUMBER .)
    GREAT           reduce using rule 46 (factor -> NUMBER .)
    GREATE          reduce using rule 46 (factor -> NUMBER .)
    LESS            reduce using rule 46 (factor -> NUMBER .)
    LESSE           reduce using rule 46 (factor -> NUMBER .)
    PLUS            reduce using rule 46 (factor -> NUMBER .)
    SCORE           reduce using rule 46 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 46 (factor -> NUMBER .)
    CPARENTHESIS    reduce using rule 46 (factor -> NUMBER .)
    AND             reduce using rule 46 (factor -> NUMBER .)
    OR              reduce using rule 46 (factor -> NUMBER .)
    XOR             reduce using rule 46 (factor -> NUMBER .)
    NOT             reduce using rule 46 (factor -> NUMBER .)
    COMMA           reduce using rule 46 (factor -> NUMBER .)


state 63

    (24) sentassign -> ID PLUSPLUS SEMICOLON .

    ID              reduce using rule 24 (sentassign -> ID PLUSPLUS SEMICOLON .)
    NAMEFUNCTION    reduce using rule 24 (sentassign -> ID PLUSPLUS SEMICOLON .)
    IF              reduce using rule 24 (sentassign -> ID PLUSPLUS SEMICOLON .)
    ECHO            reduce using rule 24 (sentassign -> ID PLUSPLUS SEMICOLON .)
    FUNCTION        reduce using rule 24 (sentassign -> ID PLUSPLUS SEMICOLON .)
    RETURN          reduce using rule 24 (sentassign -> ID PLUSPLUS SEMICOLON .)
    FOR             reduce using rule 24 (sentassign -> ID PLUSPLUS SEMICOLON .)
    WHILE           reduce using rule 24 (sentassign -> ID PLUSPLUS SEMICOLON .)
    DO              reduce using rule 24 (sentassign -> ID PLUSPLUS SEMICOLON .)
    PHPCLOSING      reduce using rule 24 (sentassign -> ID PLUSPLUS SEMICOLON .)
    CCBRACKET       reduce using rule 24 (sentassign -> ID PLUSPLUS SEMICOLON .)


state 64

    (25) sentassign -> ID MINUSMINUS SEMICOLON .

    ID              reduce using rule 25 (sentassign -> ID MINUSMINUS SEMICOLON .)
    NAMEFUNCTION    reduce using rule 25 (sentassign -> ID MINUSMINUS SEMICOLON .)
    IF              reduce using rule 25 (sentassign -> ID MINUSMINUS SEMICOLON .)
    ECHO            reduce using rule 25 (sentassign -> ID MINUSMINUS SEMICOLON .)
    FUNCTION        reduce using rule 25 (sentassign -> ID MINUSMINUS SEMICOLON .)
    RETURN          reduce using rule 25 (sentassign -> ID MINUSMINUS SEMICOLON .)
    FOR             reduce using rule 25 (sentassign -> ID MINUSMINUS SEMICOLON .)
    WHILE           reduce using rule 25 (sentassign -> ID MINUSMINUS SEMICOLON .)
    DO              reduce using rule 25 (sentassign -> ID MINUSMINUS SEMICOLON .)
    PHPCLOSING      reduce using rule 25 (sentassign -> ID MINUSMINUS SEMICOLON .)
    CCBRACKET       reduce using rule 25 (sentassign -> ID MINUSMINUS SEMICOLON .)


state 65

    (90) call_function -> NAMEFUNCTION OPARENTHESIS arg . CPARENTHESIS

    CPARENTHESIS    shift and go to state 118


state 66

    (75) arg -> var_declaration_gen .
    (81) arg -> var_declaration_gen . COMMA arg
    (67) type -> var_declaration_gen .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for CPARENTHESIS resolved using rule 67 (type -> var_declaration_gen .)
    COMMA           shift and go to state 119
    CPARENTHESIS    reduce using rule 67 (type -> var_declaration_gen .)

  ! CPARENTHESIS    [ reduce using rule 75 (arg -> var_declaration_gen .) ]
  ! COMMA           [ reduce using rule 67 (type -> var_declaration_gen .) ]


state 67

    (76) arg -> type .
    (78) arg -> type . COMMA arg

    CPARENTHESIS    reduce using rule 76 (arg -> type .)
    COMMA           shift and go to state 120


state 68

    (77) arg -> expsimple .
    (42) expsimple -> expsimple . opsuma term
    (32) exp -> expsimple . opcomparacion expsimple
    (34) exp -> expsimple .
    (55) opsuma -> . PLUS
    (56) opsuma -> . SCORE
    (35) opcomparacion -> . EQUALE
    (36) opcomparacion -> . DEQUAL
    (37) opcomparacion -> . IDENTIC
    (38) opcomparacion -> . GREAT
    (39) opcomparacion -> . GREATE
    (40) opcomparacion -> . LESS
    (41) opcomparacion -> . LESSE

  ! reduce/reduce conflict for CPARENTHESIS resolved using rule 34 (exp -> expsimple .)
    COMMA           reduce using rule 34 (exp -> expsimple .)
    CPARENTHESIS    reduce using rule 34 (exp -> expsimple .)
    PLUS            shift and go to state 94
    SCORE           shift and go to state 95
    EQUALE          shift and go to state 81
    DEQUAL          shift and go to state 82
    IDENTIC         shift and go to state 83
    GREAT           shift and go to state 84
    GREATE          shift and go to state 85
    LESS            shift and go to state 86
    LESSE           shift and go to state 87

  ! CPARENTHESIS    [ reduce using rule 77 (arg -> expsimple .) ]

    opsuma                         shift and go to state 93
    opcomparacion                  shift and go to state 92

state 69

    (79) arg -> STRINGWR .
    (82) arg -> STRINGWR . COMMA arg
    (51) typevar -> STRINGWR .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for CPARENTHESIS resolved using rule 51 (typevar -> STRINGWR .)
    COMMA           shift and go to state 121
    CPARENTHESIS    reduce using rule 51 (typevar -> STRINGWR .)

  ! CPARENTHESIS    [ reduce using rule 79 (arg -> STRINGWR .) ]
  ! COMMA           [ reduce using rule 51 (typevar -> STRINGWR .) ]


state 70

    (80) arg -> STRINGGWR .
    (83) arg -> STRINGGWR . COMMA arg
    (52) typevar -> STRINGGWR .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for CPARENTHESIS resolved using rule 52 (typevar -> STRINGGWR .)
    COMMA           shift and go to state 122
    CPARENTHESIS    reduce using rule 52 (typevar -> STRINGGWR .)

  ! CPARENTHESIS    [ reduce using rule 80 (arg -> STRINGGWR .) ]
  ! COMMA           [ reduce using rule 52 (typevar -> STRINGGWR .) ]


state 71

    (73) var_declaration_gen -> typevar .
    (66) type -> typevar .

  ! reduce/reduce conflict for COMMA resolved using rule 66 (type -> typevar .)
  ! reduce/reduce conflict for CPARENTHESIS resolved using rule 66 (type -> typevar .)
    COMMA           reduce using rule 66 (type -> typevar .)
    CPARENTHESIS    reduce using rule 66 (type -> typevar .)

  ! COMMA           [ reduce using rule 73 (var_declaration_gen -> typevar .) ]
  ! CPARENTHESIS    [ reduce using rule 73 (var_declaration_gen -> typevar .) ]


state 72

    (18) sentif -> IF genif auxsentif .

    ID              reduce using rule 18 (sentif -> IF genif auxsentif .)
    NAMEFUNCTION    reduce using rule 18 (sentif -> IF genif auxsentif .)
    IF              reduce using rule 18 (sentif -> IF genif auxsentif .)
    ECHO            reduce using rule 18 (sentif -> IF genif auxsentif .)
    FUNCTION        reduce using rule 18 (sentif -> IF genif auxsentif .)
    RETURN          reduce using rule 18 (sentif -> IF genif auxsentif .)
    FOR             reduce using rule 18 (sentif -> IF genif auxsentif .)
    WHILE           reduce using rule 18 (sentif -> IF genif auxsentif .)
    DO              reduce using rule 18 (sentif -> IF genif auxsentif .)
    PHPCLOSING      reduce using rule 18 (sentif -> IF genif auxsentif .)
    CCBRACKET       reduce using rule 18 (sentif -> IF genif auxsentif .)


state 73

    (19) auxsentif -> ELSE . IF genif auxsentif
    (20) auxsentif -> ELSE . OCBRACKET declaracion_sentencias CCBRACKET

    IF              shift and go to state 123
    OCBRACKET       shift and go to state 124


state 74

    (21) auxsentif -> empty .

    ID              reduce using rule 21 (auxsentif -> empty .)
    NAMEFUNCTION    reduce using rule 21 (auxsentif -> empty .)
    IF              reduce using rule 21 (auxsentif -> empty .)
    ECHO            reduce using rule 21 (auxsentif -> empty .)
    FUNCTION        reduce using rule 21 (auxsentif -> empty .)
    RETURN          reduce using rule 21 (auxsentif -> empty .)
    FOR             reduce using rule 21 (auxsentif -> empty .)
    WHILE           reduce using rule 21 (auxsentif -> empty .)
    DO              reduce using rule 21 (auxsentif -> empty .)
    PHPCLOSING      reduce using rule 21 (auxsentif -> empty .)
    CCBRACKET       reduce using rule 21 (auxsentif -> empty .)


state 75

    (22) genif -> OPARENTHESIS cond . CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (62) cond -> cond . opcomparacion cond
    (63) cond -> cond . oplogicos cond
    (35) opcomparacion -> . EQUALE
    (36) opcomparacion -> . DEQUAL
    (37) opcomparacion -> . IDENTIC
    (38) opcomparacion -> . GREAT
    (39) opcomparacion -> . GREATE
    (40) opcomparacion -> . LESS
    (41) opcomparacion -> . LESSE
    (28) oplogicos -> . AND
    (29) oplogicos -> . OR
    (30) oplogicos -> . XOR
    (31) oplogicos -> . NOT

    CPARENTHESIS    shift and go to state 125
    EQUALE          shift and go to state 81
    DEQUAL          shift and go to state 82
    IDENTIC         shift and go to state 83
    GREAT           shift and go to state 84
    GREATE          shift and go to state 85
    LESS            shift and go to state 86
    LESSE           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    XOR             shift and go to state 90
    NOT             shift and go to state 91

    opcomparacion                  shift and go to state 79
    oplogicos                      shift and go to state 80

state 76

    (15) sentecho -> ECHO typevar SEMICOLON .

    ID              reduce using rule 15 (sentecho -> ECHO typevar SEMICOLON .)
    NAMEFUNCTION    reduce using rule 15 (sentecho -> ECHO typevar SEMICOLON .)
    IF              reduce using rule 15 (sentecho -> ECHO typevar SEMICOLON .)
    ECHO            reduce using rule 15 (sentecho -> ECHO typevar SEMICOLON .)
    FUNCTION        reduce using rule 15 (sentecho -> ECHO typevar SEMICOLON .)
    RETURN          reduce using rule 15 (sentecho -> ECHO typevar SEMICOLON .)
    FOR             reduce using rule 15 (sentecho -> ECHO typevar SEMICOLON .)
    WHILE           reduce using rule 15 (sentecho -> ECHO typevar SEMICOLON .)
    DO              reduce using rule 15 (sentecho -> ECHO typevar SEMICOLON .)
    PHPCLOSING      reduce using rule 15 (sentecho -> ECHO typevar SEMICOLON .)
    CCBRACKET       reduce using rule 15 (sentecho -> ECHO typevar SEMICOLON .)


state 77

    (16) sentecho -> ECHO exp SEMICOLON .

    ID              reduce using rule 16 (sentecho -> ECHO exp SEMICOLON .)
    NAMEFUNCTION    reduce using rule 16 (sentecho -> ECHO exp SEMICOLON .)
    IF              reduce using rule 16 (sentecho -> ECHO exp SEMICOLON .)
    ECHO            reduce using rule 16 (sentecho -> ECHO exp SEMICOLON .)
    FUNCTION        reduce using rule 16 (sentecho -> ECHO exp SEMICOLON .)
    RETURN          reduce using rule 16 (sentecho -> ECHO exp SEMICOLON .)
    FOR             reduce using rule 16 (sentecho -> ECHO exp SEMICOLON .)
    WHILE           reduce using rule 16 (sentecho -> ECHO exp SEMICOLON .)
    DO              reduce using rule 16 (sentecho -> ECHO exp SEMICOLON .)
    PHPCLOSING      reduce using rule 16 (sentecho -> ECHO exp SEMICOLON .)
    CCBRACKET       reduce using rule 16 (sentecho -> ECHO exp SEMICOLON .)


state 78

    (17) sentecho -> ECHO cond SEMICOLON .

    ID              reduce using rule 17 (sentecho -> ECHO cond SEMICOLON .)
    NAMEFUNCTION    reduce using rule 17 (sentecho -> ECHO cond SEMICOLON .)
    IF              reduce using rule 17 (sentecho -> ECHO cond SEMICOLON .)
    ECHO            reduce using rule 17 (sentecho -> ECHO cond SEMICOLON .)
    FUNCTION        reduce using rule 17 (sentecho -> ECHO cond SEMICOLON .)
    RETURN          reduce using rule 17 (sentecho -> ECHO cond SEMICOLON .)
    FOR             reduce using rule 17 (sentecho -> ECHO cond SEMICOLON .)
    WHILE           reduce using rule 17 (sentecho -> ECHO cond SEMICOLON .)
    DO              reduce using rule 17 (sentecho -> ECHO cond SEMICOLON .)
    PHPCLOSING      reduce using rule 17 (sentecho -> ECHO cond SEMICOLON .)
    CCBRACKET       reduce using rule 17 (sentecho -> ECHO cond SEMICOLON .)


state 79

    (62) cond -> cond opcomparacion . cond
    (61) cond -> . type
    (62) cond -> . cond opcomparacion cond
    (63) cond -> . cond oplogicos cond
    (64) cond -> . OPARENTHESIS type CPARENTHESIS
    (65) cond -> . OPARENTHESIS cond CPARENTHESIS
    (66) type -> . typevar
    (67) type -> . var_declaration_gen
    (50) typevar -> . NUMBER
    (51) typevar -> . STRINGWR
    (52) typevar -> . STRINGGWR
    (53) typevar -> . TRUE
    (54) typevar -> . FALSE
    (68) var_declaration_gen -> . ID
    (69) var_declaration_gen -> . ID PLUSPLUS
    (70) var_declaration_gen -> . ID MINUSMINUS
    (71) var_declaration_gen -> . MINUSMINUS ID
    (72) var_declaration_gen -> . PLUSPLUS ID
    (73) var_declaration_gen -> . typevar
    (74) var_declaration_gen -> . exp
    (32) exp -> . expsimple opcomparacion expsimple
    (33) exp -> . OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS
    (34) exp -> . expsimple
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (44) term -> . term opmult factor
    (45) term -> . factor
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    OPARENTHESIS    shift and go to state 54
    NUMBER          shift and go to state 35
    STRINGWR        shift and go to state 36
    STRINGGWR       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 46
    MINUSMINUS      shift and go to state 48
    PLUSPLUS        shift and go to state 47
    NAMEFUNCTION    shift and go to state 15

    cond                           shift and go to state 126
    type                           shift and go to state 42
    typevar                        shift and go to state 53
    var_declaration_gen            shift and go to state 44
    exp                            shift and go to state 55
    expsimple                      shift and go to state 40
    term                           shift and go to state 43
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 80

    (63) cond -> cond oplogicos . cond
    (61) cond -> . type
    (62) cond -> . cond opcomparacion cond
    (63) cond -> . cond oplogicos cond
    (64) cond -> . OPARENTHESIS type CPARENTHESIS
    (65) cond -> . OPARENTHESIS cond CPARENTHESIS
    (66) type -> . typevar
    (67) type -> . var_declaration_gen
    (50) typevar -> . NUMBER
    (51) typevar -> . STRINGWR
    (52) typevar -> . STRINGGWR
    (53) typevar -> . TRUE
    (54) typevar -> . FALSE
    (68) var_declaration_gen -> . ID
    (69) var_declaration_gen -> . ID PLUSPLUS
    (70) var_declaration_gen -> . ID MINUSMINUS
    (71) var_declaration_gen -> . MINUSMINUS ID
    (72) var_declaration_gen -> . PLUSPLUS ID
    (73) var_declaration_gen -> . typevar
    (74) var_declaration_gen -> . exp
    (32) exp -> . expsimple opcomparacion expsimple
    (33) exp -> . OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS
    (34) exp -> . expsimple
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (44) term -> . term opmult factor
    (45) term -> . factor
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    OPARENTHESIS    shift and go to state 54
    NUMBER          shift and go to state 35
    STRINGWR        shift and go to state 36
    STRINGGWR       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 46
    MINUSMINUS      shift and go to state 48
    PLUSPLUS        shift and go to state 47
    NAMEFUNCTION    shift and go to state 15

    cond                           shift and go to state 127
    type                           shift and go to state 42
    typevar                        shift and go to state 53
    var_declaration_gen            shift and go to state 44
    exp                            shift and go to state 55
    expsimple                      shift and go to state 40
    term                           shift and go to state 43
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 81

    (35) opcomparacion -> EQUALE .

    OPARENTHESIS    reduce using rule 35 (opcomparacion -> EQUALE .)
    NUMBER          reduce using rule 35 (opcomparacion -> EQUALE .)
    STRINGWR        reduce using rule 35 (opcomparacion -> EQUALE .)
    STRINGGWR       reduce using rule 35 (opcomparacion -> EQUALE .)
    TRUE            reduce using rule 35 (opcomparacion -> EQUALE .)
    FALSE           reduce using rule 35 (opcomparacion -> EQUALE .)
    ID              reduce using rule 35 (opcomparacion -> EQUALE .)
    MINUSMINUS      reduce using rule 35 (opcomparacion -> EQUALE .)
    PLUSPLUS        reduce using rule 35 (opcomparacion -> EQUALE .)
    NAMEFUNCTION    reduce using rule 35 (opcomparacion -> EQUALE .)


state 82

    (36) opcomparacion -> DEQUAL .

    OPARENTHESIS    reduce using rule 36 (opcomparacion -> DEQUAL .)
    NUMBER          reduce using rule 36 (opcomparacion -> DEQUAL .)
    STRINGWR        reduce using rule 36 (opcomparacion -> DEQUAL .)
    STRINGGWR       reduce using rule 36 (opcomparacion -> DEQUAL .)
    TRUE            reduce using rule 36 (opcomparacion -> DEQUAL .)
    FALSE           reduce using rule 36 (opcomparacion -> DEQUAL .)
    ID              reduce using rule 36 (opcomparacion -> DEQUAL .)
    MINUSMINUS      reduce using rule 36 (opcomparacion -> DEQUAL .)
    PLUSPLUS        reduce using rule 36 (opcomparacion -> DEQUAL .)
    NAMEFUNCTION    reduce using rule 36 (opcomparacion -> DEQUAL .)


state 83

    (37) opcomparacion -> IDENTIC .

    OPARENTHESIS    reduce using rule 37 (opcomparacion -> IDENTIC .)
    NUMBER          reduce using rule 37 (opcomparacion -> IDENTIC .)
    STRINGWR        reduce using rule 37 (opcomparacion -> IDENTIC .)
    STRINGGWR       reduce using rule 37 (opcomparacion -> IDENTIC .)
    TRUE            reduce using rule 37 (opcomparacion -> IDENTIC .)
    FALSE           reduce using rule 37 (opcomparacion -> IDENTIC .)
    ID              reduce using rule 37 (opcomparacion -> IDENTIC .)
    MINUSMINUS      reduce using rule 37 (opcomparacion -> IDENTIC .)
    PLUSPLUS        reduce using rule 37 (opcomparacion -> IDENTIC .)
    NAMEFUNCTION    reduce using rule 37 (opcomparacion -> IDENTIC .)


state 84

    (38) opcomparacion -> GREAT .

    OPARENTHESIS    reduce using rule 38 (opcomparacion -> GREAT .)
    NUMBER          reduce using rule 38 (opcomparacion -> GREAT .)
    STRINGWR        reduce using rule 38 (opcomparacion -> GREAT .)
    STRINGGWR       reduce using rule 38 (opcomparacion -> GREAT .)
    TRUE            reduce using rule 38 (opcomparacion -> GREAT .)
    FALSE           reduce using rule 38 (opcomparacion -> GREAT .)
    ID              reduce using rule 38 (opcomparacion -> GREAT .)
    MINUSMINUS      reduce using rule 38 (opcomparacion -> GREAT .)
    PLUSPLUS        reduce using rule 38 (opcomparacion -> GREAT .)
    NAMEFUNCTION    reduce using rule 38 (opcomparacion -> GREAT .)


state 85

    (39) opcomparacion -> GREATE .

    OPARENTHESIS    reduce using rule 39 (opcomparacion -> GREATE .)
    NUMBER          reduce using rule 39 (opcomparacion -> GREATE .)
    STRINGWR        reduce using rule 39 (opcomparacion -> GREATE .)
    STRINGGWR       reduce using rule 39 (opcomparacion -> GREATE .)
    TRUE            reduce using rule 39 (opcomparacion -> GREATE .)
    FALSE           reduce using rule 39 (opcomparacion -> GREATE .)
    ID              reduce using rule 39 (opcomparacion -> GREATE .)
    MINUSMINUS      reduce using rule 39 (opcomparacion -> GREATE .)
    PLUSPLUS        reduce using rule 39 (opcomparacion -> GREATE .)
    NAMEFUNCTION    reduce using rule 39 (opcomparacion -> GREATE .)


state 86

    (40) opcomparacion -> LESS .

    OPARENTHESIS    reduce using rule 40 (opcomparacion -> LESS .)
    NUMBER          reduce using rule 40 (opcomparacion -> LESS .)
    STRINGWR        reduce using rule 40 (opcomparacion -> LESS .)
    STRINGGWR       reduce using rule 40 (opcomparacion -> LESS .)
    TRUE            reduce using rule 40 (opcomparacion -> LESS .)
    FALSE           reduce using rule 40 (opcomparacion -> LESS .)
    ID              reduce using rule 40 (opcomparacion -> LESS .)
    MINUSMINUS      reduce using rule 40 (opcomparacion -> LESS .)
    PLUSPLUS        reduce using rule 40 (opcomparacion -> LESS .)
    NAMEFUNCTION    reduce using rule 40 (opcomparacion -> LESS .)


state 87

    (41) opcomparacion -> LESSE .

    OPARENTHESIS    reduce using rule 41 (opcomparacion -> LESSE .)
    NUMBER          reduce using rule 41 (opcomparacion -> LESSE .)
    STRINGWR        reduce using rule 41 (opcomparacion -> LESSE .)
    STRINGGWR       reduce using rule 41 (opcomparacion -> LESSE .)
    TRUE            reduce using rule 41 (opcomparacion -> LESSE .)
    FALSE           reduce using rule 41 (opcomparacion -> LESSE .)
    ID              reduce using rule 41 (opcomparacion -> LESSE .)
    MINUSMINUS      reduce using rule 41 (opcomparacion -> LESSE .)
    PLUSPLUS        reduce using rule 41 (opcomparacion -> LESSE .)
    NAMEFUNCTION    reduce using rule 41 (opcomparacion -> LESSE .)


state 88

    (28) oplogicos -> AND .

    OPARENTHESIS    reduce using rule 28 (oplogicos -> AND .)
    NUMBER          reduce using rule 28 (oplogicos -> AND .)
    STRINGWR        reduce using rule 28 (oplogicos -> AND .)
    STRINGGWR       reduce using rule 28 (oplogicos -> AND .)
    TRUE            reduce using rule 28 (oplogicos -> AND .)
    FALSE           reduce using rule 28 (oplogicos -> AND .)
    ID              reduce using rule 28 (oplogicos -> AND .)
    MINUSMINUS      reduce using rule 28 (oplogicos -> AND .)
    PLUSPLUS        reduce using rule 28 (oplogicos -> AND .)
    NAMEFUNCTION    reduce using rule 28 (oplogicos -> AND .)


state 89

    (29) oplogicos -> OR .

    OPARENTHESIS    reduce using rule 29 (oplogicos -> OR .)
    NUMBER          reduce using rule 29 (oplogicos -> OR .)
    STRINGWR        reduce using rule 29 (oplogicos -> OR .)
    STRINGGWR       reduce using rule 29 (oplogicos -> OR .)
    TRUE            reduce using rule 29 (oplogicos -> OR .)
    FALSE           reduce using rule 29 (oplogicos -> OR .)
    ID              reduce using rule 29 (oplogicos -> OR .)
    MINUSMINUS      reduce using rule 29 (oplogicos -> OR .)
    PLUSPLUS        reduce using rule 29 (oplogicos -> OR .)
    NAMEFUNCTION    reduce using rule 29 (oplogicos -> OR .)


state 90

    (30) oplogicos -> XOR .

    OPARENTHESIS    reduce using rule 30 (oplogicos -> XOR .)
    NUMBER          reduce using rule 30 (oplogicos -> XOR .)
    STRINGWR        reduce using rule 30 (oplogicos -> XOR .)
    STRINGGWR       reduce using rule 30 (oplogicos -> XOR .)
    TRUE            reduce using rule 30 (oplogicos -> XOR .)
    FALSE           reduce using rule 30 (oplogicos -> XOR .)
    ID              reduce using rule 30 (oplogicos -> XOR .)
    MINUSMINUS      reduce using rule 30 (oplogicos -> XOR .)
    PLUSPLUS        reduce using rule 30 (oplogicos -> XOR .)
    NAMEFUNCTION    reduce using rule 30 (oplogicos -> XOR .)


state 91

    (31) oplogicos -> NOT .

    OPARENTHESIS    reduce using rule 31 (oplogicos -> NOT .)
    NUMBER          reduce using rule 31 (oplogicos -> NOT .)
    STRINGWR        reduce using rule 31 (oplogicos -> NOT .)
    STRINGGWR       reduce using rule 31 (oplogicos -> NOT .)
    TRUE            reduce using rule 31 (oplogicos -> NOT .)
    FALSE           reduce using rule 31 (oplogicos -> NOT .)
    ID              reduce using rule 31 (oplogicos -> NOT .)
    MINUSMINUS      reduce using rule 31 (oplogicos -> NOT .)
    PLUSPLUS        reduce using rule 31 (oplogicos -> NOT .)
    NAMEFUNCTION    reduce using rule 31 (oplogicos -> NOT .)


state 92

    (32) exp -> expsimple opcomparacion . expsimple
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (44) term -> . term opmult factor
    (45) term -> . factor
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    NUMBER          shift and go to state 62
    ID              shift and go to state 59
    OPARENTHESIS    shift and go to state 116
    NAMEFUNCTION    shift and go to state 15

    expsimple                      shift and go to state 128
    term                           shift and go to state 43
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 93

    (42) expsimple -> expsimple opsuma . term
    (44) term -> . term opmult factor
    (45) term -> . factor
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    NUMBER          shift and go to state 62
    ID              shift and go to state 59
    OPARENTHESIS    shift and go to state 116
    NAMEFUNCTION    shift and go to state 15

    term                           shift and go to state 129
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 94

    (55) opsuma -> PLUS .

    NUMBER          reduce using rule 55 (opsuma -> PLUS .)
    ID              reduce using rule 55 (opsuma -> PLUS .)
    OPARENTHESIS    reduce using rule 55 (opsuma -> PLUS .)
    NAMEFUNCTION    reduce using rule 55 (opsuma -> PLUS .)


state 95

    (56) opsuma -> SCORE .

    NUMBER          reduce using rule 56 (opsuma -> SCORE .)
    ID              reduce using rule 56 (opsuma -> SCORE .)
    OPARENTHESIS    reduce using rule 56 (opsuma -> SCORE .)
    NAMEFUNCTION    reduce using rule 56 (opsuma -> SCORE .)


state 96

    (64) cond -> OPARENTHESIS . type CPARENTHESIS
    (65) cond -> OPARENTHESIS . cond CPARENTHESIS
    (49) factor -> OPARENTHESIS . expsimple CPARENTHESIS
    (33) exp -> OPARENTHESIS . expsimple opcomparacion expsimple CPARENTHESIS
    (66) type -> . typevar
    (67) type -> . var_declaration_gen
    (61) cond -> . type
    (62) cond -> . cond opcomparacion cond
    (63) cond -> . cond oplogicos cond
    (64) cond -> . OPARENTHESIS type CPARENTHESIS
    (65) cond -> . OPARENTHESIS cond CPARENTHESIS
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (50) typevar -> . NUMBER
    (51) typevar -> . STRINGWR
    (52) typevar -> . STRINGGWR
    (53) typevar -> . TRUE
    (54) typevar -> . FALSE
    (68) var_declaration_gen -> . ID
    (69) var_declaration_gen -> . ID PLUSPLUS
    (70) var_declaration_gen -> . ID MINUSMINUS
    (71) var_declaration_gen -> . MINUSMINUS ID
    (72) var_declaration_gen -> . PLUSPLUS ID
    (73) var_declaration_gen -> . typevar
    (74) var_declaration_gen -> . exp
    (44) term -> . term opmult factor
    (45) term -> . factor
    (32) exp -> . expsimple opcomparacion expsimple
    (33) exp -> . OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS
    (34) exp -> . expsimple
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    OPARENTHESIS    shift and go to state 54
    NUMBER          shift and go to state 35
    STRINGWR        shift and go to state 36
    STRINGGWR       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 46
    MINUSMINUS      shift and go to state 48
    PLUSPLUS        shift and go to state 47
    NAMEFUNCTION    shift and go to state 15

    type                           shift and go to state 98
    cond                           shift and go to state 99
    expsimple                      shift and go to state 130
    typevar                        shift and go to state 53
    var_declaration_gen            shift and go to state 44
    term                           shift and go to state 43
    exp                            shift and go to state 55
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 97

    (33) exp -> OPARENTHESIS expsimple . opcomparacion expsimple CPARENTHESIS
    (49) factor -> OPARENTHESIS expsimple . CPARENTHESIS
    (42) expsimple -> expsimple . opsuma term
    (32) exp -> expsimple . opcomparacion expsimple
    (34) exp -> expsimple .
    (35) opcomparacion -> . EQUALE
    (36) opcomparacion -> . DEQUAL
    (37) opcomparacion -> . IDENTIC
    (38) opcomparacion -> . GREAT
    (39) opcomparacion -> . GREATE
    (40) opcomparacion -> . LESS
    (41) opcomparacion -> . LESSE
    (55) opsuma -> . PLUS
    (56) opsuma -> . SCORE

  ! shift/reduce conflict for CPARENTHESIS resolved as shift
  ! shift/reduce conflict for EQUALE resolved as shift
  ! shift/reduce conflict for DEQUAL resolved as shift
  ! shift/reduce conflict for IDENTIC resolved as shift
  ! shift/reduce conflict for GREAT resolved as shift
  ! shift/reduce conflict for GREATE resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESSE resolved as shift
    CPARENTHESIS    shift and go to state 132
    AND             reduce using rule 34 (exp -> expsimple .)
    OR              reduce using rule 34 (exp -> expsimple .)
    XOR             reduce using rule 34 (exp -> expsimple .)
    NOT             reduce using rule 34 (exp -> expsimple .)
    EQUALE          shift and go to state 81
    DEQUAL          shift and go to state 82
    IDENTIC         shift and go to state 83
    GREAT           shift and go to state 84
    GREATE          shift and go to state 85
    LESS            shift and go to state 86
    LESSE           shift and go to state 87
    PLUS            shift and go to state 94
    SCORE           shift and go to state 95

  ! CPARENTHESIS    [ reduce using rule 34 (exp -> expsimple .) ]
  ! EQUALE          [ reduce using rule 34 (exp -> expsimple .) ]
  ! DEQUAL          [ reduce using rule 34 (exp -> expsimple .) ]
  ! IDENTIC         [ reduce using rule 34 (exp -> expsimple .) ]
  ! GREAT           [ reduce using rule 34 (exp -> expsimple .) ]
  ! GREATE          [ reduce using rule 34 (exp -> expsimple .) ]
  ! LESS            [ reduce using rule 34 (exp -> expsimple .) ]
  ! LESSE           [ reduce using rule 34 (exp -> expsimple .) ]

    opcomparacion                  shift and go to state 131
    opsuma                         shift and go to state 93

state 98

    (64) cond -> OPARENTHESIS type . CPARENTHESIS
    (61) cond -> type .

  ! shift/reduce conflict for CPARENTHESIS resolved as shift
    CPARENTHESIS    shift and go to state 133
    EQUALE          reduce using rule 61 (cond -> type .)
    DEQUAL          reduce using rule 61 (cond -> type .)
    IDENTIC         reduce using rule 61 (cond -> type .)
    GREAT           reduce using rule 61 (cond -> type .)
    GREATE          reduce using rule 61 (cond -> type .)
    LESS            reduce using rule 61 (cond -> type .)
    LESSE           reduce using rule 61 (cond -> type .)
    AND             reduce using rule 61 (cond -> type .)
    OR              reduce using rule 61 (cond -> type .)
    XOR             reduce using rule 61 (cond -> type .)
    NOT             reduce using rule 61 (cond -> type .)

  ! CPARENTHESIS    [ reduce using rule 61 (cond -> type .) ]


state 99

    (65) cond -> OPARENTHESIS cond . CPARENTHESIS
    (62) cond -> cond . opcomparacion cond
    (63) cond -> cond . oplogicos cond
    (35) opcomparacion -> . EQUALE
    (36) opcomparacion -> . DEQUAL
    (37) opcomparacion -> . IDENTIC
    (38) opcomparacion -> . GREAT
    (39) opcomparacion -> . GREATE
    (40) opcomparacion -> . LESS
    (41) opcomparacion -> . LESSE
    (28) oplogicos -> . AND
    (29) oplogicos -> . OR
    (30) oplogicos -> . XOR
    (31) oplogicos -> . NOT

    CPARENTHESIS    shift and go to state 134
    EQUALE          shift and go to state 81
    DEQUAL          shift and go to state 82
    IDENTIC         shift and go to state 83
    GREAT           shift and go to state 84
    GREATE          shift and go to state 85
    LESS            shift and go to state 86
    LESSE           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    XOR             shift and go to state 90
    NOT             shift and go to state 91

    opcomparacion                  shift and go to state 79
    oplogicos                      shift and go to state 80

state 100

    (44) term -> term opmult . factor
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    NUMBER          shift and go to state 62
    ID              shift and go to state 59
    OPARENTHESIS    shift and go to state 116
    NAMEFUNCTION    shift and go to state 15

    factor                         shift and go to state 135
    call_function                  shift and go to state 49

state 101

    (57) opmult -> TIMES .

    NUMBER          reduce using rule 57 (opmult -> TIMES .)
    ID              reduce using rule 57 (opmult -> TIMES .)
    OPARENTHESIS    reduce using rule 57 (opmult -> TIMES .)
    NAMEFUNCTION    reduce using rule 57 (opmult -> TIMES .)


state 102

    (58) opmult -> SLASH .

    NUMBER          reduce using rule 58 (opmult -> SLASH .)
    ID              reduce using rule 58 (opmult -> SLASH .)
    OPARENTHESIS    reduce using rule 58 (opmult -> SLASH .)
    NAMEFUNCTION    reduce using rule 58 (opmult -> SLASH .)


state 103

    (59) opmult -> PERCENTAGE .

    NUMBER          reduce using rule 59 (opmult -> PERCENTAGE .)
    ID              reduce using rule 59 (opmult -> PERCENTAGE .)
    OPARENTHESIS    reduce using rule 59 (opmult -> PERCENTAGE .)
    NAMEFUNCTION    reduce using rule 59 (opmult -> PERCENTAGE .)


state 104

    (60) opmult -> POW .

    NUMBER          reduce using rule 60 (opmult -> POW .)
    ID              reduce using rule 60 (opmult -> POW .)
    OPARENTHESIS    reduce using rule 60 (opmult -> POW .)
    NAMEFUNCTION    reduce using rule 60 (opmult -> POW .)


state 105

    (69) var_declaration_gen -> ID PLUSPLUS .

    SEMICOLON       reduce using rule 69 (var_declaration_gen -> ID PLUSPLUS .)
    EQUALE          reduce using rule 69 (var_declaration_gen -> ID PLUSPLUS .)
    DEQUAL          reduce using rule 69 (var_declaration_gen -> ID PLUSPLUS .)
    IDENTIC         reduce using rule 69 (var_declaration_gen -> ID PLUSPLUS .)
    GREAT           reduce using rule 69 (var_declaration_gen -> ID PLUSPLUS .)
    GREATE          reduce using rule 69 (var_declaration_gen -> ID PLUSPLUS .)
    LESS            reduce using rule 69 (var_declaration_gen -> ID PLUSPLUS .)
    LESSE           reduce using rule 69 (var_declaration_gen -> ID PLUSPLUS .)
    AND             reduce using rule 69 (var_declaration_gen -> ID PLUSPLUS .)
    OR              reduce using rule 69 (var_declaration_gen -> ID PLUSPLUS .)
    XOR             reduce using rule 69 (var_declaration_gen -> ID PLUSPLUS .)
    NOT             reduce using rule 69 (var_declaration_gen -> ID PLUSPLUS .)
    COMMA           reduce using rule 69 (var_declaration_gen -> ID PLUSPLUS .)
    CPARENTHESIS    reduce using rule 69 (var_declaration_gen -> ID PLUSPLUS .)


state 106

    (70) var_declaration_gen -> ID MINUSMINUS .

    SEMICOLON       reduce using rule 70 (var_declaration_gen -> ID MINUSMINUS .)
    EQUALE          reduce using rule 70 (var_declaration_gen -> ID MINUSMINUS .)
    DEQUAL          reduce using rule 70 (var_declaration_gen -> ID MINUSMINUS .)
    IDENTIC         reduce using rule 70 (var_declaration_gen -> ID MINUSMINUS .)
    GREAT           reduce using rule 70 (var_declaration_gen -> ID MINUSMINUS .)
    GREATE          reduce using rule 70 (var_declaration_gen -> ID MINUSMINUS .)
    LESS            reduce using rule 70 (var_declaration_gen -> ID MINUSMINUS .)
    LESSE           reduce using rule 70 (var_declaration_gen -> ID MINUSMINUS .)
    AND             reduce using rule 70 (var_declaration_gen -> ID MINUSMINUS .)
    OR              reduce using rule 70 (var_declaration_gen -> ID MINUSMINUS .)
    XOR             reduce using rule 70 (var_declaration_gen -> ID MINUSMINUS .)
    NOT             reduce using rule 70 (var_declaration_gen -> ID MINUSMINUS .)
    COMMA           reduce using rule 70 (var_declaration_gen -> ID MINUSMINUS .)
    CPARENTHESIS    reduce using rule 70 (var_declaration_gen -> ID MINUSMINUS .)


state 107

    (72) var_declaration_gen -> PLUSPLUS ID .

    SEMICOLON       reduce using rule 72 (var_declaration_gen -> PLUSPLUS ID .)
    EQUALE          reduce using rule 72 (var_declaration_gen -> PLUSPLUS ID .)
    DEQUAL          reduce using rule 72 (var_declaration_gen -> PLUSPLUS ID .)
    IDENTIC         reduce using rule 72 (var_declaration_gen -> PLUSPLUS ID .)
    GREAT           reduce using rule 72 (var_declaration_gen -> PLUSPLUS ID .)
    GREATE          reduce using rule 72 (var_declaration_gen -> PLUSPLUS ID .)
    LESS            reduce using rule 72 (var_declaration_gen -> PLUSPLUS ID .)
    LESSE           reduce using rule 72 (var_declaration_gen -> PLUSPLUS ID .)
    AND             reduce using rule 72 (var_declaration_gen -> PLUSPLUS ID .)
    OR              reduce using rule 72 (var_declaration_gen -> PLUSPLUS ID .)
    XOR             reduce using rule 72 (var_declaration_gen -> PLUSPLUS ID .)
    NOT             reduce using rule 72 (var_declaration_gen -> PLUSPLUS ID .)
    COMMA           reduce using rule 72 (var_declaration_gen -> PLUSPLUS ID .)
    CPARENTHESIS    reduce using rule 72 (var_declaration_gen -> PLUSPLUS ID .)


state 108

    (71) var_declaration_gen -> MINUSMINUS ID .

    SEMICOLON       reduce using rule 71 (var_declaration_gen -> MINUSMINUS ID .)
    EQUALE          reduce using rule 71 (var_declaration_gen -> MINUSMINUS ID .)
    DEQUAL          reduce using rule 71 (var_declaration_gen -> MINUSMINUS ID .)
    IDENTIC         reduce using rule 71 (var_declaration_gen -> MINUSMINUS ID .)
    GREAT           reduce using rule 71 (var_declaration_gen -> MINUSMINUS ID .)
    GREATE          reduce using rule 71 (var_declaration_gen -> MINUSMINUS ID .)
    LESS            reduce using rule 71 (var_declaration_gen -> MINUSMINUS ID .)
    LESSE           reduce using rule 71 (var_declaration_gen -> MINUSMINUS ID .)
    AND             reduce using rule 71 (var_declaration_gen -> MINUSMINUS ID .)
    OR              reduce using rule 71 (var_declaration_gen -> MINUSMINUS ID .)
    XOR             reduce using rule 71 (var_declaration_gen -> MINUSMINUS ID .)
    NOT             reduce using rule 71 (var_declaration_gen -> MINUSMINUS ID .)
    COMMA           reduce using rule 71 (var_declaration_gen -> MINUSMINUS ID .)
    CPARENTHESIS    reduce using rule 71 (var_declaration_gen -> MINUSMINUS ID .)


state 109

    (88) sentfunc -> FUNCTION NAMEFUNCTION OPARENTHESIS . argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (85) argfunc -> . ID
    (86) argfunc -> . ID COMMA argfunc
    (87) argfunc -> .

    ID              shift and go to state 137
    CPARENTHESIS    reduce using rule 87 (argfunc -> .)

    argfunc                        shift and go to state 136

state 110

    (13) sentreturn -> RETURN type SEMICOLON .

    ID              reduce using rule 13 (sentreturn -> RETURN type SEMICOLON .)
    NAMEFUNCTION    reduce using rule 13 (sentreturn -> RETURN type SEMICOLON .)
    IF              reduce using rule 13 (sentreturn -> RETURN type SEMICOLON .)
    ECHO            reduce using rule 13 (sentreturn -> RETURN type SEMICOLON .)
    FUNCTION        reduce using rule 13 (sentreturn -> RETURN type SEMICOLON .)
    RETURN          reduce using rule 13 (sentreturn -> RETURN type SEMICOLON .)
    FOR             reduce using rule 13 (sentreturn -> RETURN type SEMICOLON .)
    WHILE           reduce using rule 13 (sentreturn -> RETURN type SEMICOLON .)
    DO              reduce using rule 13 (sentreturn -> RETURN type SEMICOLON .)
    PHPCLOSING      reduce using rule 13 (sentreturn -> RETURN type SEMICOLON .)
    CCBRACKET       reduce using rule 13 (sentreturn -> RETURN type SEMICOLON .)


state 111

    (14) sentreturn -> RETURN cond SEMICOLON .

    ID              reduce using rule 14 (sentreturn -> RETURN cond SEMICOLON .)
    NAMEFUNCTION    reduce using rule 14 (sentreturn -> RETURN cond SEMICOLON .)
    IF              reduce using rule 14 (sentreturn -> RETURN cond SEMICOLON .)
    ECHO            reduce using rule 14 (sentreturn -> RETURN cond SEMICOLON .)
    FUNCTION        reduce using rule 14 (sentreturn -> RETURN cond SEMICOLON .)
    RETURN          reduce using rule 14 (sentreturn -> RETURN cond SEMICOLON .)
    FOR             reduce using rule 14 (sentreturn -> RETURN cond SEMICOLON .)
    WHILE           reduce using rule 14 (sentreturn -> RETURN cond SEMICOLON .)
    DO              reduce using rule 14 (sentreturn -> RETURN cond SEMICOLON .)
    PHPCLOSING      reduce using rule 14 (sentreturn -> RETURN cond SEMICOLON .)
    CCBRACKET       reduce using rule 14 (sentreturn -> RETURN cond SEMICOLON .)


state 112

    (91) sentfor -> FOR OPARENTHESIS ID . EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (92) sentfor -> FOR OPARENTHESIS ID . EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (93) sentfor -> FOR OPARENTHESIS ID . EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET

    EQUAL           shift and go to state 138


state 113

    (94) sentwhile -> WHILE OPARENTHESIS cond . CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (62) cond -> cond . opcomparacion cond
    (63) cond -> cond . oplogicos cond
    (35) opcomparacion -> . EQUALE
    (36) opcomparacion -> . DEQUAL
    (37) opcomparacion -> . IDENTIC
    (38) opcomparacion -> . GREAT
    (39) opcomparacion -> . GREATE
    (40) opcomparacion -> . LESS
    (41) opcomparacion -> . LESSE
    (28) oplogicos -> . AND
    (29) oplogicos -> . OR
    (30) oplogicos -> . XOR
    (31) oplogicos -> . NOT

    CPARENTHESIS    shift and go to state 139
    EQUALE          shift and go to state 81
    DEQUAL          shift and go to state 82
    IDENTIC         shift and go to state 83
    GREAT           shift and go to state 84
    GREATE          shift and go to state 85
    LESS            shift and go to state 86
    LESSE           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    XOR             shift and go to state 90
    NOT             shift and go to state 91

    opcomparacion                  shift and go to state 79
    oplogicos                      shift and go to state 80

state 114

    (95) sentdowhile -> DO OCBRACKET declaracion_sentencias . CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON

    CCBRACKET       shift and go to state 140


state 115

    (23) sentassign -> ID EQUAL exp SEMICOLON .

    ID              reduce using rule 23 (sentassign -> ID EQUAL exp SEMICOLON .)
    NAMEFUNCTION    reduce using rule 23 (sentassign -> ID EQUAL exp SEMICOLON .)
    IF              reduce using rule 23 (sentassign -> ID EQUAL exp SEMICOLON .)
    ECHO            reduce using rule 23 (sentassign -> ID EQUAL exp SEMICOLON .)
    FUNCTION        reduce using rule 23 (sentassign -> ID EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 23 (sentassign -> ID EQUAL exp SEMICOLON .)
    FOR             reduce using rule 23 (sentassign -> ID EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 23 (sentassign -> ID EQUAL exp SEMICOLON .)
    DO              reduce using rule 23 (sentassign -> ID EQUAL exp SEMICOLON .)
    PHPCLOSING      reduce using rule 23 (sentassign -> ID EQUAL exp SEMICOLON .)
    CCBRACKET       reduce using rule 23 (sentassign -> ID EQUAL exp SEMICOLON .)


state 116

    (49) factor -> OPARENTHESIS . expsimple CPARENTHESIS
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (44) term -> . term opmult factor
    (45) term -> . factor
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    NUMBER          shift and go to state 62
    ID              shift and go to state 59
    OPARENTHESIS    shift and go to state 116
    NAMEFUNCTION    shift and go to state 15

    expsimple                      shift and go to state 141
    term                           shift and go to state 43
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 117

    (33) exp -> OPARENTHESIS expsimple . opcomparacion expsimple CPARENTHESIS
    (49) factor -> OPARENTHESIS expsimple . CPARENTHESIS
    (42) expsimple -> expsimple . opsuma term
    (35) opcomparacion -> . EQUALE
    (36) opcomparacion -> . DEQUAL
    (37) opcomparacion -> . IDENTIC
    (38) opcomparacion -> . GREAT
    (39) opcomparacion -> . GREATE
    (40) opcomparacion -> . LESS
    (41) opcomparacion -> . LESSE
    (55) opsuma -> . PLUS
    (56) opsuma -> . SCORE

    CPARENTHESIS    shift and go to state 132
    EQUALE          shift and go to state 81
    DEQUAL          shift and go to state 82
    IDENTIC         shift and go to state 83
    GREAT           shift and go to state 84
    GREATE          shift and go to state 85
    LESS            shift and go to state 86
    LESSE           shift and go to state 87
    PLUS            shift and go to state 94
    SCORE           shift and go to state 95

    opcomparacion                  shift and go to state 142
    opsuma                         shift and go to state 93

state 118

    (90) call_function -> NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS .

    SEMICOLON       reduce using rule 90 (call_function -> NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS .)
    TIMES           reduce using rule 90 (call_function -> NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS .)
    SLASH           reduce using rule 90 (call_function -> NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS .)
    PERCENTAGE      reduce using rule 90 (call_function -> NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS .)
    POW             reduce using rule 90 (call_function -> NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS .)
    EQUALE          reduce using rule 90 (call_function -> NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS .)
    DEQUAL          reduce using rule 90 (call_function -> NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS .)
    IDENTIC         reduce using rule 90 (call_function -> NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS .)
    GREAT           reduce using rule 90 (call_function -> NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS .)
    GREATE          reduce using rule 90 (call_function -> NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS .)
    LESS            reduce using rule 90 (call_function -> NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS .)
    LESSE           reduce using rule 90 (call_function -> NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS .)
    PLUS            reduce using rule 90 (call_function -> NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS .)
    SCORE           reduce using rule 90 (call_function -> NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS .)
    AND             reduce using rule 90 (call_function -> NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS .)
    OR              reduce using rule 90 (call_function -> NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS .)
    XOR             reduce using rule 90 (call_function -> NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS .)
    NOT             reduce using rule 90 (call_function -> NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS .)
    CPARENTHESIS    reduce using rule 90 (call_function -> NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS .)
    COMMA           reduce using rule 90 (call_function -> NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS .)


state 119

    (81) arg -> var_declaration_gen COMMA . arg
    (75) arg -> . var_declaration_gen
    (76) arg -> . type
    (77) arg -> . expsimple
    (78) arg -> . type COMMA arg
    (79) arg -> . STRINGWR
    (80) arg -> . STRINGGWR
    (81) arg -> . var_declaration_gen COMMA arg
    (82) arg -> . STRINGWR COMMA arg
    (83) arg -> . STRINGGWR COMMA arg
    (84) arg -> .
    (68) var_declaration_gen -> . ID
    (69) var_declaration_gen -> . ID PLUSPLUS
    (70) var_declaration_gen -> . ID MINUSMINUS
    (71) var_declaration_gen -> . MINUSMINUS ID
    (72) var_declaration_gen -> . PLUSPLUS ID
    (73) var_declaration_gen -> . typevar
    (74) var_declaration_gen -> . exp
    (66) type -> . typevar
    (67) type -> . var_declaration_gen
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (50) typevar -> . NUMBER
    (51) typevar -> . STRINGWR
    (52) typevar -> . STRINGGWR
    (53) typevar -> . TRUE
    (54) typevar -> . FALSE
    (32) exp -> . expsimple opcomparacion expsimple
    (33) exp -> . OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS
    (34) exp -> . expsimple
    (44) term -> . term opmult factor
    (45) term -> . factor
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    STRINGWR        shift and go to state 69
    STRINGGWR       shift and go to state 70
    CPARENTHESIS    reduce using rule 84 (arg -> .)
    ID              shift and go to state 46
    MINUSMINUS      shift and go to state 48
    PLUSPLUS        shift and go to state 47
    NUMBER          shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    OPARENTHESIS    shift and go to state 61
    NAMEFUNCTION    shift and go to state 15

    var_declaration_gen            shift and go to state 66
    arg                            shift and go to state 143
    type                           shift and go to state 67
    expsimple                      shift and go to state 68
    typevar                        shift and go to state 71
    exp                            shift and go to state 55
    term                           shift and go to state 43
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 120

    (78) arg -> type COMMA . arg
    (75) arg -> . var_declaration_gen
    (76) arg -> . type
    (77) arg -> . expsimple
    (78) arg -> . type COMMA arg
    (79) arg -> . STRINGWR
    (80) arg -> . STRINGGWR
    (81) arg -> . var_declaration_gen COMMA arg
    (82) arg -> . STRINGWR COMMA arg
    (83) arg -> . STRINGGWR COMMA arg
    (84) arg -> .
    (68) var_declaration_gen -> . ID
    (69) var_declaration_gen -> . ID PLUSPLUS
    (70) var_declaration_gen -> . ID MINUSMINUS
    (71) var_declaration_gen -> . MINUSMINUS ID
    (72) var_declaration_gen -> . PLUSPLUS ID
    (73) var_declaration_gen -> . typevar
    (74) var_declaration_gen -> . exp
    (66) type -> . typevar
    (67) type -> . var_declaration_gen
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (50) typevar -> . NUMBER
    (51) typevar -> . STRINGWR
    (52) typevar -> . STRINGGWR
    (53) typevar -> . TRUE
    (54) typevar -> . FALSE
    (32) exp -> . expsimple opcomparacion expsimple
    (33) exp -> . OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS
    (34) exp -> . expsimple
    (44) term -> . term opmult factor
    (45) term -> . factor
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    STRINGWR        shift and go to state 69
    STRINGGWR       shift and go to state 70
    CPARENTHESIS    reduce using rule 84 (arg -> .)
    ID              shift and go to state 46
    MINUSMINUS      shift and go to state 48
    PLUSPLUS        shift and go to state 47
    NUMBER          shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    OPARENTHESIS    shift and go to state 61
    NAMEFUNCTION    shift and go to state 15

    type                           shift and go to state 67
    arg                            shift and go to state 144
    var_declaration_gen            shift and go to state 66
    expsimple                      shift and go to state 68
    typevar                        shift and go to state 71
    exp                            shift and go to state 55
    term                           shift and go to state 43
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 121

    (82) arg -> STRINGWR COMMA . arg
    (75) arg -> . var_declaration_gen
    (76) arg -> . type
    (77) arg -> . expsimple
    (78) arg -> . type COMMA arg
    (79) arg -> . STRINGWR
    (80) arg -> . STRINGGWR
    (81) arg -> . var_declaration_gen COMMA arg
    (82) arg -> . STRINGWR COMMA arg
    (83) arg -> . STRINGGWR COMMA arg
    (84) arg -> .
    (68) var_declaration_gen -> . ID
    (69) var_declaration_gen -> . ID PLUSPLUS
    (70) var_declaration_gen -> . ID MINUSMINUS
    (71) var_declaration_gen -> . MINUSMINUS ID
    (72) var_declaration_gen -> . PLUSPLUS ID
    (73) var_declaration_gen -> . typevar
    (74) var_declaration_gen -> . exp
    (66) type -> . typevar
    (67) type -> . var_declaration_gen
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (50) typevar -> . NUMBER
    (51) typevar -> . STRINGWR
    (52) typevar -> . STRINGGWR
    (53) typevar -> . TRUE
    (54) typevar -> . FALSE
    (32) exp -> . expsimple opcomparacion expsimple
    (33) exp -> . OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS
    (34) exp -> . expsimple
    (44) term -> . term opmult factor
    (45) term -> . factor
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    STRINGWR        shift and go to state 69
    STRINGGWR       shift and go to state 70
    CPARENTHESIS    reduce using rule 84 (arg -> .)
    ID              shift and go to state 46
    MINUSMINUS      shift and go to state 48
    PLUSPLUS        shift and go to state 47
    NUMBER          shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    OPARENTHESIS    shift and go to state 61
    NAMEFUNCTION    shift and go to state 15

    arg                            shift and go to state 145
    var_declaration_gen            shift and go to state 66
    type                           shift and go to state 67
    expsimple                      shift and go to state 68
    typevar                        shift and go to state 71
    exp                            shift and go to state 55
    term                           shift and go to state 43
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 122

    (83) arg -> STRINGGWR COMMA . arg
    (75) arg -> . var_declaration_gen
    (76) arg -> . type
    (77) arg -> . expsimple
    (78) arg -> . type COMMA arg
    (79) arg -> . STRINGWR
    (80) arg -> . STRINGGWR
    (81) arg -> . var_declaration_gen COMMA arg
    (82) arg -> . STRINGWR COMMA arg
    (83) arg -> . STRINGGWR COMMA arg
    (84) arg -> .
    (68) var_declaration_gen -> . ID
    (69) var_declaration_gen -> . ID PLUSPLUS
    (70) var_declaration_gen -> . ID MINUSMINUS
    (71) var_declaration_gen -> . MINUSMINUS ID
    (72) var_declaration_gen -> . PLUSPLUS ID
    (73) var_declaration_gen -> . typevar
    (74) var_declaration_gen -> . exp
    (66) type -> . typevar
    (67) type -> . var_declaration_gen
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (50) typevar -> . NUMBER
    (51) typevar -> . STRINGWR
    (52) typevar -> . STRINGGWR
    (53) typevar -> . TRUE
    (54) typevar -> . FALSE
    (32) exp -> . expsimple opcomparacion expsimple
    (33) exp -> . OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS
    (34) exp -> . expsimple
    (44) term -> . term opmult factor
    (45) term -> . factor
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    STRINGWR        shift and go to state 69
    STRINGGWR       shift and go to state 70
    CPARENTHESIS    reduce using rule 84 (arg -> .)
    ID              shift and go to state 46
    MINUSMINUS      shift and go to state 48
    PLUSPLUS        shift and go to state 47
    NUMBER          shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    OPARENTHESIS    shift and go to state 61
    NAMEFUNCTION    shift and go to state 15

    arg                            shift and go to state 146
    var_declaration_gen            shift and go to state 66
    type                           shift and go to state 67
    expsimple                      shift and go to state 68
    typevar                        shift and go to state 71
    exp                            shift and go to state 55
    term                           shift and go to state 43
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 123

    (19) auxsentif -> ELSE IF . genif auxsentif
    (22) genif -> . OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET

    OPARENTHESIS    shift and go to state 31

    genif                          shift and go to state 147

state 124

    (20) auxsentif -> ELSE OCBRACKET . declaracion_sentencias CCBRACKET
    (2) declaracion_sentencias -> . sentencias declaracion_sentencias
    (3) declaracion_sentencias -> . sentencias
    (4) sentencias -> . sentassign
    (5) sentencias -> . call_function SEMICOLON
    (6) sentencias -> . sentif
    (7) sentencias -> . sentecho
    (8) sentencias -> . sentfunc
    (9) sentencias -> . sentreturn
    (10) sentencias -> . sentfor
    (11) sentencias -> . sentwhile
    (12) sentencias -> . sentdowhile
    (23) sentassign -> . ID EQUAL exp SEMICOLON
    (24) sentassign -> . ID PLUSPLUS SEMICOLON
    (25) sentassign -> . ID MINUSMINUS SEMICOLON
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS
    (18) sentif -> . IF genif auxsentif
    (15) sentecho -> . ECHO typevar SEMICOLON
    (16) sentecho -> . ECHO exp SEMICOLON
    (17) sentecho -> . ECHO cond SEMICOLON
    (88) sentfunc -> . FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (13) sentreturn -> . RETURN type SEMICOLON
    (14) sentreturn -> . RETURN cond SEMICOLON
    (91) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (92) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (93) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (94) sentwhile -> . WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (95) sentdowhile -> . DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON

    ID              shift and go to state 14
    NAMEFUNCTION    shift and go to state 15
    IF              shift and go to state 16
    ECHO            shift and go to state 17
    FUNCTION        shift and go to state 18
    RETURN          shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22

    declaracion_sentencias         shift and go to state 148
    sentencias                     shift and go to state 4
    sentassign                     shift and go to state 5
    call_function                  shift and go to state 6
    sentif                         shift and go to state 7
    sentecho                       shift and go to state 8
    sentfunc                       shift and go to state 9
    sentreturn                     shift and go to state 10
    sentfor                        shift and go to state 11
    sentwhile                      shift and go to state 12
    sentdowhile                    shift and go to state 13

state 125

    (22) genif -> OPARENTHESIS cond CPARENTHESIS . OCBRACKET declaracion_sentencias CCBRACKET

    OCBRACKET       shift and go to state 149


state 126

    (62) cond -> cond opcomparacion cond .
    (62) cond -> cond . opcomparacion cond
    (63) cond -> cond . oplogicos cond
    (35) opcomparacion -> . EQUALE
    (36) opcomparacion -> . DEQUAL
    (37) opcomparacion -> . IDENTIC
    (38) opcomparacion -> . GREAT
    (39) opcomparacion -> . GREATE
    (40) opcomparacion -> . LESS
    (41) opcomparacion -> . LESSE
    (28) oplogicos -> . AND
    (29) oplogicos -> . OR
    (30) oplogicos -> . XOR
    (31) oplogicos -> . NOT

  ! shift/reduce conflict for EQUALE resolved as shift
  ! shift/reduce conflict for DEQUAL resolved as shift
  ! shift/reduce conflict for IDENTIC resolved as shift
  ! shift/reduce conflict for GREAT resolved as shift
  ! shift/reduce conflict for GREATE resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESSE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    SEMICOLON       reduce using rule 62 (cond -> cond opcomparacion cond .)
    CPARENTHESIS    reduce using rule 62 (cond -> cond opcomparacion cond .)
    EQUALE          shift and go to state 81
    DEQUAL          shift and go to state 82
    IDENTIC         shift and go to state 83
    GREAT           shift and go to state 84
    GREATE          shift and go to state 85
    LESS            shift and go to state 86
    LESSE           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    XOR             shift and go to state 90
    NOT             shift and go to state 91

  ! EQUALE          [ reduce using rule 62 (cond -> cond opcomparacion cond .) ]
  ! DEQUAL          [ reduce using rule 62 (cond -> cond opcomparacion cond .) ]
  ! IDENTIC         [ reduce using rule 62 (cond -> cond opcomparacion cond .) ]
  ! GREAT           [ reduce using rule 62 (cond -> cond opcomparacion cond .) ]
  ! GREATE          [ reduce using rule 62 (cond -> cond opcomparacion cond .) ]
  ! LESS            [ reduce using rule 62 (cond -> cond opcomparacion cond .) ]
  ! LESSE           [ reduce using rule 62 (cond -> cond opcomparacion cond .) ]
  ! AND             [ reduce using rule 62 (cond -> cond opcomparacion cond .) ]
  ! OR              [ reduce using rule 62 (cond -> cond opcomparacion cond .) ]
  ! XOR             [ reduce using rule 62 (cond -> cond opcomparacion cond .) ]
  ! NOT             [ reduce using rule 62 (cond -> cond opcomparacion cond .) ]

    opcomparacion                  shift and go to state 79
    oplogicos                      shift and go to state 80

state 127

    (63) cond -> cond oplogicos cond .
    (62) cond -> cond . opcomparacion cond
    (63) cond -> cond . oplogicos cond
    (35) opcomparacion -> . EQUALE
    (36) opcomparacion -> . DEQUAL
    (37) opcomparacion -> . IDENTIC
    (38) opcomparacion -> . GREAT
    (39) opcomparacion -> . GREATE
    (40) opcomparacion -> . LESS
    (41) opcomparacion -> . LESSE
    (28) oplogicos -> . AND
    (29) oplogicos -> . OR
    (30) oplogicos -> . XOR
    (31) oplogicos -> . NOT

  ! shift/reduce conflict for EQUALE resolved as shift
  ! shift/reduce conflict for DEQUAL resolved as shift
  ! shift/reduce conflict for IDENTIC resolved as shift
  ! shift/reduce conflict for GREAT resolved as shift
  ! shift/reduce conflict for GREATE resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESSE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    SEMICOLON       reduce using rule 63 (cond -> cond oplogicos cond .)
    CPARENTHESIS    reduce using rule 63 (cond -> cond oplogicos cond .)
    EQUALE          shift and go to state 81
    DEQUAL          shift and go to state 82
    IDENTIC         shift and go to state 83
    GREAT           shift and go to state 84
    GREATE          shift and go to state 85
    LESS            shift and go to state 86
    LESSE           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    XOR             shift and go to state 90
    NOT             shift and go to state 91

  ! EQUALE          [ reduce using rule 63 (cond -> cond oplogicos cond .) ]
  ! DEQUAL          [ reduce using rule 63 (cond -> cond oplogicos cond .) ]
  ! IDENTIC         [ reduce using rule 63 (cond -> cond oplogicos cond .) ]
  ! GREAT           [ reduce using rule 63 (cond -> cond oplogicos cond .) ]
  ! GREATE          [ reduce using rule 63 (cond -> cond oplogicos cond .) ]
  ! LESS            [ reduce using rule 63 (cond -> cond oplogicos cond .) ]
  ! LESSE           [ reduce using rule 63 (cond -> cond oplogicos cond .) ]
  ! AND             [ reduce using rule 63 (cond -> cond oplogicos cond .) ]
  ! OR              [ reduce using rule 63 (cond -> cond oplogicos cond .) ]
  ! XOR             [ reduce using rule 63 (cond -> cond oplogicos cond .) ]
  ! NOT             [ reduce using rule 63 (cond -> cond oplogicos cond .) ]

    oplogicos                      shift and go to state 80
    opcomparacion                  shift and go to state 79

state 128

    (32) exp -> expsimple opcomparacion expsimple .
    (42) expsimple -> expsimple . opsuma term
    (55) opsuma -> . PLUS
    (56) opsuma -> . SCORE

    SEMICOLON       reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    EQUALE          reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    DEQUAL          reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    IDENTIC         reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    GREAT           reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    GREATE          reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    LESS            reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    LESSE           reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    AND             reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    OR              reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    XOR             reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    NOT             reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    COMMA           reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    CPARENTHESIS    reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    PLUS            shift and go to state 94
    SCORE           shift and go to state 95

    opsuma                         shift and go to state 93

state 129

    (42) expsimple -> expsimple opsuma term .
    (44) term -> term . opmult factor
    (57) opmult -> . TIMES
    (58) opmult -> . SLASH
    (59) opmult -> . PERCENTAGE
    (60) opmult -> . POW

    EQUALE          reduce using rule 42 (expsimple -> expsimple opsuma term .)
    DEQUAL          reduce using rule 42 (expsimple -> expsimple opsuma term .)
    IDENTIC         reduce using rule 42 (expsimple -> expsimple opsuma term .)
    GREAT           reduce using rule 42 (expsimple -> expsimple opsuma term .)
    GREATE          reduce using rule 42 (expsimple -> expsimple opsuma term .)
    LESS            reduce using rule 42 (expsimple -> expsimple opsuma term .)
    LESSE           reduce using rule 42 (expsimple -> expsimple opsuma term .)
    PLUS            reduce using rule 42 (expsimple -> expsimple opsuma term .)
    SCORE           reduce using rule 42 (expsimple -> expsimple opsuma term .)
    SEMICOLON       reduce using rule 42 (expsimple -> expsimple opsuma term .)
    AND             reduce using rule 42 (expsimple -> expsimple opsuma term .)
    OR              reduce using rule 42 (expsimple -> expsimple opsuma term .)
    XOR             reduce using rule 42 (expsimple -> expsimple opsuma term .)
    NOT             reduce using rule 42 (expsimple -> expsimple opsuma term .)
    CPARENTHESIS    reduce using rule 42 (expsimple -> expsimple opsuma term .)
    COMMA           reduce using rule 42 (expsimple -> expsimple opsuma term .)
    TIMES           shift and go to state 101
    SLASH           shift and go to state 102
    PERCENTAGE      shift and go to state 103
    POW             shift and go to state 104

    opmult                         shift and go to state 100

state 130

    (49) factor -> OPARENTHESIS expsimple . CPARENTHESIS
    (33) exp -> OPARENTHESIS expsimple . opcomparacion expsimple CPARENTHESIS
    (42) expsimple -> expsimple . opsuma term
    (32) exp -> expsimple . opcomparacion expsimple
    (34) exp -> expsimple .
    (35) opcomparacion -> . EQUALE
    (36) opcomparacion -> . DEQUAL
    (37) opcomparacion -> . IDENTIC
    (38) opcomparacion -> . GREAT
    (39) opcomparacion -> . GREATE
    (40) opcomparacion -> . LESS
    (41) opcomparacion -> . LESSE
    (55) opsuma -> . PLUS
    (56) opsuma -> . SCORE

  ! shift/reduce conflict for CPARENTHESIS resolved as shift
  ! shift/reduce conflict for EQUALE resolved as shift
  ! shift/reduce conflict for DEQUAL resolved as shift
  ! shift/reduce conflict for IDENTIC resolved as shift
  ! shift/reduce conflict for GREAT resolved as shift
  ! shift/reduce conflict for GREATE resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESSE resolved as shift
    CPARENTHESIS    shift and go to state 132
    AND             reduce using rule 34 (exp -> expsimple .)
    OR              reduce using rule 34 (exp -> expsimple .)
    XOR             reduce using rule 34 (exp -> expsimple .)
    NOT             reduce using rule 34 (exp -> expsimple .)
    EQUALE          shift and go to state 81
    DEQUAL          shift and go to state 82
    IDENTIC         shift and go to state 83
    GREAT           shift and go to state 84
    GREATE          shift and go to state 85
    LESS            shift and go to state 86
    LESSE           shift and go to state 87
    PLUS            shift and go to state 94
    SCORE           shift and go to state 95

  ! CPARENTHESIS    [ reduce using rule 34 (exp -> expsimple .) ]
  ! EQUALE          [ reduce using rule 34 (exp -> expsimple .) ]
  ! DEQUAL          [ reduce using rule 34 (exp -> expsimple .) ]
  ! IDENTIC         [ reduce using rule 34 (exp -> expsimple .) ]
  ! GREAT           [ reduce using rule 34 (exp -> expsimple .) ]
  ! GREATE          [ reduce using rule 34 (exp -> expsimple .) ]
  ! LESS            [ reduce using rule 34 (exp -> expsimple .) ]
  ! LESSE           [ reduce using rule 34 (exp -> expsimple .) ]

    opcomparacion                  shift and go to state 131
    opsuma                         shift and go to state 93

state 131

    (33) exp -> OPARENTHESIS expsimple opcomparacion . expsimple CPARENTHESIS
    (32) exp -> expsimple opcomparacion . expsimple
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (44) term -> . term opmult factor
    (45) term -> . factor
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    NUMBER          shift and go to state 62
    ID              shift and go to state 59
    OPARENTHESIS    shift and go to state 116
    NAMEFUNCTION    shift and go to state 15

    expsimple                      shift and go to state 150
    term                           shift and go to state 43
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 132

    (49) factor -> OPARENTHESIS expsimple CPARENTHESIS .

    TIMES           reduce using rule 49 (factor -> OPARENTHESIS expsimple CPARENTHESIS .)
    SLASH           reduce using rule 49 (factor -> OPARENTHESIS expsimple CPARENTHESIS .)
    PERCENTAGE      reduce using rule 49 (factor -> OPARENTHESIS expsimple CPARENTHESIS .)
    POW             reduce using rule 49 (factor -> OPARENTHESIS expsimple CPARENTHESIS .)
    EQUALE          reduce using rule 49 (factor -> OPARENTHESIS expsimple CPARENTHESIS .)
    DEQUAL          reduce using rule 49 (factor -> OPARENTHESIS expsimple CPARENTHESIS .)
    IDENTIC         reduce using rule 49 (factor -> OPARENTHESIS expsimple CPARENTHESIS .)
    GREAT           reduce using rule 49 (factor -> OPARENTHESIS expsimple CPARENTHESIS .)
    GREATE          reduce using rule 49 (factor -> OPARENTHESIS expsimple CPARENTHESIS .)
    LESS            reduce using rule 49 (factor -> OPARENTHESIS expsimple CPARENTHESIS .)
    LESSE           reduce using rule 49 (factor -> OPARENTHESIS expsimple CPARENTHESIS .)
    PLUS            reduce using rule 49 (factor -> OPARENTHESIS expsimple CPARENTHESIS .)
    SCORE           reduce using rule 49 (factor -> OPARENTHESIS expsimple CPARENTHESIS .)
    SEMICOLON       reduce using rule 49 (factor -> OPARENTHESIS expsimple CPARENTHESIS .)
    AND             reduce using rule 49 (factor -> OPARENTHESIS expsimple CPARENTHESIS .)
    OR              reduce using rule 49 (factor -> OPARENTHESIS expsimple CPARENTHESIS .)
    XOR             reduce using rule 49 (factor -> OPARENTHESIS expsimple CPARENTHESIS .)
    NOT             reduce using rule 49 (factor -> OPARENTHESIS expsimple CPARENTHESIS .)
    CPARENTHESIS    reduce using rule 49 (factor -> OPARENTHESIS expsimple CPARENTHESIS .)
    COMMA           reduce using rule 49 (factor -> OPARENTHESIS expsimple CPARENTHESIS .)


state 133

    (64) cond -> OPARENTHESIS type CPARENTHESIS .

    SEMICOLON       reduce using rule 64 (cond -> OPARENTHESIS type CPARENTHESIS .)
    EQUALE          reduce using rule 64 (cond -> OPARENTHESIS type CPARENTHESIS .)
    DEQUAL          reduce using rule 64 (cond -> OPARENTHESIS type CPARENTHESIS .)
    IDENTIC         reduce using rule 64 (cond -> OPARENTHESIS type CPARENTHESIS .)
    GREAT           reduce using rule 64 (cond -> OPARENTHESIS type CPARENTHESIS .)
    GREATE          reduce using rule 64 (cond -> OPARENTHESIS type CPARENTHESIS .)
    LESS            reduce using rule 64 (cond -> OPARENTHESIS type CPARENTHESIS .)
    LESSE           reduce using rule 64 (cond -> OPARENTHESIS type CPARENTHESIS .)
    AND             reduce using rule 64 (cond -> OPARENTHESIS type CPARENTHESIS .)
    OR              reduce using rule 64 (cond -> OPARENTHESIS type CPARENTHESIS .)
    XOR             reduce using rule 64 (cond -> OPARENTHESIS type CPARENTHESIS .)
    NOT             reduce using rule 64 (cond -> OPARENTHESIS type CPARENTHESIS .)
    CPARENTHESIS    reduce using rule 64 (cond -> OPARENTHESIS type CPARENTHESIS .)


state 134

    (65) cond -> OPARENTHESIS cond CPARENTHESIS .

    SEMICOLON       reduce using rule 65 (cond -> OPARENTHESIS cond CPARENTHESIS .)
    EQUALE          reduce using rule 65 (cond -> OPARENTHESIS cond CPARENTHESIS .)
    DEQUAL          reduce using rule 65 (cond -> OPARENTHESIS cond CPARENTHESIS .)
    IDENTIC         reduce using rule 65 (cond -> OPARENTHESIS cond CPARENTHESIS .)
    GREAT           reduce using rule 65 (cond -> OPARENTHESIS cond CPARENTHESIS .)
    GREATE          reduce using rule 65 (cond -> OPARENTHESIS cond CPARENTHESIS .)
    LESS            reduce using rule 65 (cond -> OPARENTHESIS cond CPARENTHESIS .)
    LESSE           reduce using rule 65 (cond -> OPARENTHESIS cond CPARENTHESIS .)
    AND             reduce using rule 65 (cond -> OPARENTHESIS cond CPARENTHESIS .)
    OR              reduce using rule 65 (cond -> OPARENTHESIS cond CPARENTHESIS .)
    XOR             reduce using rule 65 (cond -> OPARENTHESIS cond CPARENTHESIS .)
    NOT             reduce using rule 65 (cond -> OPARENTHESIS cond CPARENTHESIS .)
    CPARENTHESIS    reduce using rule 65 (cond -> OPARENTHESIS cond CPARENTHESIS .)


state 135

    (44) term -> term opmult factor .

    TIMES           reduce using rule 44 (term -> term opmult factor .)
    SLASH           reduce using rule 44 (term -> term opmult factor .)
    PERCENTAGE      reduce using rule 44 (term -> term opmult factor .)
    POW             reduce using rule 44 (term -> term opmult factor .)
    EQUALE          reduce using rule 44 (term -> term opmult factor .)
    DEQUAL          reduce using rule 44 (term -> term opmult factor .)
    IDENTIC         reduce using rule 44 (term -> term opmult factor .)
    GREAT           reduce using rule 44 (term -> term opmult factor .)
    GREATE          reduce using rule 44 (term -> term opmult factor .)
    LESS            reduce using rule 44 (term -> term opmult factor .)
    LESSE           reduce using rule 44 (term -> term opmult factor .)
    PLUS            reduce using rule 44 (term -> term opmult factor .)
    SCORE           reduce using rule 44 (term -> term opmult factor .)
    SEMICOLON       reduce using rule 44 (term -> term opmult factor .)
    AND             reduce using rule 44 (term -> term opmult factor .)
    OR              reduce using rule 44 (term -> term opmult factor .)
    XOR             reduce using rule 44 (term -> term opmult factor .)
    NOT             reduce using rule 44 (term -> term opmult factor .)
    CPARENTHESIS    reduce using rule 44 (term -> term opmult factor .)
    COMMA           reduce using rule 44 (term -> term opmult factor .)


state 136

    (88) sentfunc -> FUNCTION NAMEFUNCTION OPARENTHESIS argfunc . CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET

    CPARENTHESIS    shift and go to state 151


state 137

    (85) argfunc -> ID .
    (86) argfunc -> ID . COMMA argfunc

    CPARENTHESIS    reduce using rule 85 (argfunc -> ID .)
    COMMA           shift and go to state 152


state 138

    (91) sentfor -> FOR OPARENTHESIS ID EQUAL . expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (92) sentfor -> FOR OPARENTHESIS ID EQUAL . expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (93) sentfor -> FOR OPARENTHESIS ID EQUAL . expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (44) term -> . term opmult factor
    (45) term -> . factor
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    NUMBER          shift and go to state 62
    ID              shift and go to state 59
    OPARENTHESIS    shift and go to state 116
    NAMEFUNCTION    shift and go to state 15

    expsimple                      shift and go to state 153
    term                           shift and go to state 43
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 139

    (94) sentwhile -> WHILE OPARENTHESIS cond CPARENTHESIS . OCBRACKET declaracion_sentencias CCBRACKET

    OCBRACKET       shift and go to state 154


state 140

    (95) sentdowhile -> DO OCBRACKET declaracion_sentencias CCBRACKET . WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON

    WHILE           shift and go to state 155


state 141

    (49) factor -> OPARENTHESIS expsimple . CPARENTHESIS
    (42) expsimple -> expsimple . opsuma term
    (55) opsuma -> . PLUS
    (56) opsuma -> . SCORE

    CPARENTHESIS    shift and go to state 132
    PLUS            shift and go to state 94
    SCORE           shift and go to state 95

    opsuma                         shift and go to state 93

state 142

    (33) exp -> OPARENTHESIS expsimple opcomparacion . expsimple CPARENTHESIS
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (44) term -> . term opmult factor
    (45) term -> . factor
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    NUMBER          shift and go to state 62
    ID              shift and go to state 59
    OPARENTHESIS    shift and go to state 116
    NAMEFUNCTION    shift and go to state 15

    expsimple                      shift and go to state 156
    term                           shift and go to state 43
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 143

    (81) arg -> var_declaration_gen COMMA arg .

    CPARENTHESIS    reduce using rule 81 (arg -> var_declaration_gen COMMA arg .)


state 144

    (78) arg -> type COMMA arg .

    CPARENTHESIS    reduce using rule 78 (arg -> type COMMA arg .)


state 145

    (82) arg -> STRINGWR COMMA arg .

    CPARENTHESIS    reduce using rule 82 (arg -> STRINGWR COMMA arg .)


state 146

    (83) arg -> STRINGGWR COMMA arg .

    CPARENTHESIS    reduce using rule 83 (arg -> STRINGGWR COMMA arg .)


state 147

    (19) auxsentif -> ELSE IF genif . auxsentif
    (19) auxsentif -> . ELSE IF genif auxsentif
    (20) auxsentif -> . ELSE OCBRACKET declaracion_sentencias CCBRACKET
    (21) auxsentif -> . empty
    (96) empty -> .

    ELSE            shift and go to state 73
    ID              reduce using rule 96 (empty -> .)
    NAMEFUNCTION    reduce using rule 96 (empty -> .)
    IF              reduce using rule 96 (empty -> .)
    ECHO            reduce using rule 96 (empty -> .)
    FUNCTION        reduce using rule 96 (empty -> .)
    RETURN          reduce using rule 96 (empty -> .)
    FOR             reduce using rule 96 (empty -> .)
    WHILE           reduce using rule 96 (empty -> .)
    DO              reduce using rule 96 (empty -> .)
    PHPCLOSING      reduce using rule 96 (empty -> .)
    CCBRACKET       reduce using rule 96 (empty -> .)

    auxsentif                      shift and go to state 157
    empty                          shift and go to state 74

state 148

    (20) auxsentif -> ELSE OCBRACKET declaracion_sentencias . CCBRACKET

    CCBRACKET       shift and go to state 158


state 149

    (22) genif -> OPARENTHESIS cond CPARENTHESIS OCBRACKET . declaracion_sentencias CCBRACKET
    (2) declaracion_sentencias -> . sentencias declaracion_sentencias
    (3) declaracion_sentencias -> . sentencias
    (4) sentencias -> . sentassign
    (5) sentencias -> . call_function SEMICOLON
    (6) sentencias -> . sentif
    (7) sentencias -> . sentecho
    (8) sentencias -> . sentfunc
    (9) sentencias -> . sentreturn
    (10) sentencias -> . sentfor
    (11) sentencias -> . sentwhile
    (12) sentencias -> . sentdowhile
    (23) sentassign -> . ID EQUAL exp SEMICOLON
    (24) sentassign -> . ID PLUSPLUS SEMICOLON
    (25) sentassign -> . ID MINUSMINUS SEMICOLON
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS
    (18) sentif -> . IF genif auxsentif
    (15) sentecho -> . ECHO typevar SEMICOLON
    (16) sentecho -> . ECHO exp SEMICOLON
    (17) sentecho -> . ECHO cond SEMICOLON
    (88) sentfunc -> . FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (13) sentreturn -> . RETURN type SEMICOLON
    (14) sentreturn -> . RETURN cond SEMICOLON
    (91) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (92) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (93) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (94) sentwhile -> . WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (95) sentdowhile -> . DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON

    ID              shift and go to state 14
    NAMEFUNCTION    shift and go to state 15
    IF              shift and go to state 16
    ECHO            shift and go to state 17
    FUNCTION        shift and go to state 18
    RETURN          shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22

    declaracion_sentencias         shift and go to state 159
    sentencias                     shift and go to state 4
    sentassign                     shift and go to state 5
    call_function                  shift and go to state 6
    sentif                         shift and go to state 7
    sentecho                       shift and go to state 8
    sentfunc                       shift and go to state 9
    sentreturn                     shift and go to state 10
    sentfor                        shift and go to state 11
    sentwhile                      shift and go to state 12
    sentdowhile                    shift and go to state 13

state 150

    (33) exp -> OPARENTHESIS expsimple opcomparacion expsimple . CPARENTHESIS
    (32) exp -> expsimple opcomparacion expsimple .
    (42) expsimple -> expsimple . opsuma term
    (55) opsuma -> . PLUS
    (56) opsuma -> . SCORE

  ! shift/reduce conflict for CPARENTHESIS resolved as shift
    CPARENTHESIS    shift and go to state 160
    EQUALE          reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    DEQUAL          reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    IDENTIC         reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    GREAT           reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    GREATE          reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    LESS            reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    LESSE           reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    AND             reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    OR              reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    XOR             reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    NOT             reduce using rule 32 (exp -> expsimple opcomparacion expsimple .)
    PLUS            shift and go to state 94
    SCORE           shift and go to state 95

  ! CPARENTHESIS    [ reduce using rule 32 (exp -> expsimple opcomparacion expsimple .) ]

    opsuma                         shift and go to state 93

state 151

    (88) sentfunc -> FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS . OCBRACKET declaracion_sentencias CCBRACKET

    OCBRACKET       shift and go to state 161


state 152

    (86) argfunc -> ID COMMA . argfunc
    (85) argfunc -> . ID
    (86) argfunc -> . ID COMMA argfunc
    (87) argfunc -> .

    ID              shift and go to state 137
    CPARENTHESIS    reduce using rule 87 (argfunc -> .)

    argfunc                        shift and go to state 162

state 153

    (91) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple . SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (92) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple . SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (93) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple . SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (42) expsimple -> expsimple . opsuma term
    (55) opsuma -> . PLUS
    (56) opsuma -> . SCORE

    SEMICOLON       shift and go to state 163
    PLUS            shift and go to state 94
    SCORE           shift and go to state 95

    opsuma                         shift and go to state 93

state 154

    (94) sentwhile -> WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET . declaracion_sentencias CCBRACKET
    (2) declaracion_sentencias -> . sentencias declaracion_sentencias
    (3) declaracion_sentencias -> . sentencias
    (4) sentencias -> . sentassign
    (5) sentencias -> . call_function SEMICOLON
    (6) sentencias -> . sentif
    (7) sentencias -> . sentecho
    (8) sentencias -> . sentfunc
    (9) sentencias -> . sentreturn
    (10) sentencias -> . sentfor
    (11) sentencias -> . sentwhile
    (12) sentencias -> . sentdowhile
    (23) sentassign -> . ID EQUAL exp SEMICOLON
    (24) sentassign -> . ID PLUSPLUS SEMICOLON
    (25) sentassign -> . ID MINUSMINUS SEMICOLON
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS
    (18) sentif -> . IF genif auxsentif
    (15) sentecho -> . ECHO typevar SEMICOLON
    (16) sentecho -> . ECHO exp SEMICOLON
    (17) sentecho -> . ECHO cond SEMICOLON
    (88) sentfunc -> . FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (13) sentreturn -> . RETURN type SEMICOLON
    (14) sentreturn -> . RETURN cond SEMICOLON
    (91) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (92) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (93) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (94) sentwhile -> . WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (95) sentdowhile -> . DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON

    ID              shift and go to state 14
    NAMEFUNCTION    shift and go to state 15
    IF              shift and go to state 16
    ECHO            shift and go to state 17
    FUNCTION        shift and go to state 18
    RETURN          shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22

    declaracion_sentencias         shift and go to state 164
    sentencias                     shift and go to state 4
    sentassign                     shift and go to state 5
    call_function                  shift and go to state 6
    sentif                         shift and go to state 7
    sentecho                       shift and go to state 8
    sentfunc                       shift and go to state 9
    sentreturn                     shift and go to state 10
    sentfor                        shift and go to state 11
    sentwhile                      shift and go to state 12
    sentdowhile                    shift and go to state 13

state 155

    (95) sentdowhile -> DO OCBRACKET declaracion_sentencias CCBRACKET WHILE . OPARENTHESIS cond CPARENTHESIS SEMICOLON

    OPARENTHESIS    shift and go to state 165


state 156

    (33) exp -> OPARENTHESIS expsimple opcomparacion expsimple . CPARENTHESIS
    (42) expsimple -> expsimple . opsuma term
    (55) opsuma -> . PLUS
    (56) opsuma -> . SCORE

    CPARENTHESIS    shift and go to state 160
    PLUS            shift and go to state 94
    SCORE           shift and go to state 95

    opsuma                         shift and go to state 93

state 157

    (19) auxsentif -> ELSE IF genif auxsentif .

    ID              reduce using rule 19 (auxsentif -> ELSE IF genif auxsentif .)
    NAMEFUNCTION    reduce using rule 19 (auxsentif -> ELSE IF genif auxsentif .)
    IF              reduce using rule 19 (auxsentif -> ELSE IF genif auxsentif .)
    ECHO            reduce using rule 19 (auxsentif -> ELSE IF genif auxsentif .)
    FUNCTION        reduce using rule 19 (auxsentif -> ELSE IF genif auxsentif .)
    RETURN          reduce using rule 19 (auxsentif -> ELSE IF genif auxsentif .)
    FOR             reduce using rule 19 (auxsentif -> ELSE IF genif auxsentif .)
    WHILE           reduce using rule 19 (auxsentif -> ELSE IF genif auxsentif .)
    DO              reduce using rule 19 (auxsentif -> ELSE IF genif auxsentif .)
    PHPCLOSING      reduce using rule 19 (auxsentif -> ELSE IF genif auxsentif .)
    CCBRACKET       reduce using rule 19 (auxsentif -> ELSE IF genif auxsentif .)


state 158

    (20) auxsentif -> ELSE OCBRACKET declaracion_sentencias CCBRACKET .

    ID              reduce using rule 20 (auxsentif -> ELSE OCBRACKET declaracion_sentencias CCBRACKET .)
    NAMEFUNCTION    reduce using rule 20 (auxsentif -> ELSE OCBRACKET declaracion_sentencias CCBRACKET .)
    IF              reduce using rule 20 (auxsentif -> ELSE OCBRACKET declaracion_sentencias CCBRACKET .)
    ECHO            reduce using rule 20 (auxsentif -> ELSE OCBRACKET declaracion_sentencias CCBRACKET .)
    FUNCTION        reduce using rule 20 (auxsentif -> ELSE OCBRACKET declaracion_sentencias CCBRACKET .)
    RETURN          reduce using rule 20 (auxsentif -> ELSE OCBRACKET declaracion_sentencias CCBRACKET .)
    FOR             reduce using rule 20 (auxsentif -> ELSE OCBRACKET declaracion_sentencias CCBRACKET .)
    WHILE           reduce using rule 20 (auxsentif -> ELSE OCBRACKET declaracion_sentencias CCBRACKET .)
    DO              reduce using rule 20 (auxsentif -> ELSE OCBRACKET declaracion_sentencias CCBRACKET .)
    PHPCLOSING      reduce using rule 20 (auxsentif -> ELSE OCBRACKET declaracion_sentencias CCBRACKET .)
    CCBRACKET       reduce using rule 20 (auxsentif -> ELSE OCBRACKET declaracion_sentencias CCBRACKET .)


state 159

    (22) genif -> OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias . CCBRACKET

    CCBRACKET       shift and go to state 166


state 160

    (33) exp -> OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS .

    SEMICOLON       reduce using rule 33 (exp -> OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS .)
    EQUALE          reduce using rule 33 (exp -> OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS .)
    DEQUAL          reduce using rule 33 (exp -> OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS .)
    IDENTIC         reduce using rule 33 (exp -> OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS .)
    GREAT           reduce using rule 33 (exp -> OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS .)
    GREATE          reduce using rule 33 (exp -> OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS .)
    LESS            reduce using rule 33 (exp -> OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS .)
    LESSE           reduce using rule 33 (exp -> OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS .)
    AND             reduce using rule 33 (exp -> OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS .)
    OR              reduce using rule 33 (exp -> OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS .)
    XOR             reduce using rule 33 (exp -> OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS .)
    NOT             reduce using rule 33 (exp -> OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS .)
    COMMA           reduce using rule 33 (exp -> OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS .)
    CPARENTHESIS    reduce using rule 33 (exp -> OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS .)


state 161

    (88) sentfunc -> FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET . declaracion_sentencias CCBRACKET
    (2) declaracion_sentencias -> . sentencias declaracion_sentencias
    (3) declaracion_sentencias -> . sentencias
    (4) sentencias -> . sentassign
    (5) sentencias -> . call_function SEMICOLON
    (6) sentencias -> . sentif
    (7) sentencias -> . sentecho
    (8) sentencias -> . sentfunc
    (9) sentencias -> . sentreturn
    (10) sentencias -> . sentfor
    (11) sentencias -> . sentwhile
    (12) sentencias -> . sentdowhile
    (23) sentassign -> . ID EQUAL exp SEMICOLON
    (24) sentassign -> . ID PLUSPLUS SEMICOLON
    (25) sentassign -> . ID MINUSMINUS SEMICOLON
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS
    (18) sentif -> . IF genif auxsentif
    (15) sentecho -> . ECHO typevar SEMICOLON
    (16) sentecho -> . ECHO exp SEMICOLON
    (17) sentecho -> . ECHO cond SEMICOLON
    (88) sentfunc -> . FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (13) sentreturn -> . RETURN type SEMICOLON
    (14) sentreturn -> . RETURN cond SEMICOLON
    (91) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (92) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (93) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (94) sentwhile -> . WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (95) sentdowhile -> . DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON

    ID              shift and go to state 14
    NAMEFUNCTION    shift and go to state 15
    IF              shift and go to state 16
    ECHO            shift and go to state 17
    FUNCTION        shift and go to state 18
    RETURN          shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22

    declaracion_sentencias         shift and go to state 167
    sentencias                     shift and go to state 4
    sentassign                     shift and go to state 5
    call_function                  shift and go to state 6
    sentif                         shift and go to state 7
    sentecho                       shift and go to state 8
    sentfunc                       shift and go to state 9
    sentreturn                     shift and go to state 10
    sentfor                        shift and go to state 11
    sentwhile                      shift and go to state 12
    sentdowhile                    shift and go to state 13

state 162

    (86) argfunc -> ID COMMA argfunc .

    CPARENTHESIS    reduce using rule 86 (argfunc -> ID COMMA argfunc .)


state 163

    (91) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON . cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (92) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON . cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (93) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON . cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (61) cond -> . type
    (62) cond -> . cond opcomparacion cond
    (63) cond -> . cond oplogicos cond
    (64) cond -> . OPARENTHESIS type CPARENTHESIS
    (65) cond -> . OPARENTHESIS cond CPARENTHESIS
    (66) type -> . typevar
    (67) type -> . var_declaration_gen
    (50) typevar -> . NUMBER
    (51) typevar -> . STRINGWR
    (52) typevar -> . STRINGGWR
    (53) typevar -> . TRUE
    (54) typevar -> . FALSE
    (68) var_declaration_gen -> . ID
    (69) var_declaration_gen -> . ID PLUSPLUS
    (70) var_declaration_gen -> . ID MINUSMINUS
    (71) var_declaration_gen -> . MINUSMINUS ID
    (72) var_declaration_gen -> . PLUSPLUS ID
    (73) var_declaration_gen -> . typevar
    (74) var_declaration_gen -> . exp
    (32) exp -> . expsimple opcomparacion expsimple
    (33) exp -> . OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS
    (34) exp -> . expsimple
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (44) term -> . term opmult factor
    (45) term -> . factor
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    OPARENTHESIS    shift and go to state 54
    NUMBER          shift and go to state 35
    STRINGWR        shift and go to state 36
    STRINGGWR       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 46
    MINUSMINUS      shift and go to state 48
    PLUSPLUS        shift and go to state 47
    NAMEFUNCTION    shift and go to state 15

    expsimple                      shift and go to state 40
    cond                           shift and go to state 168
    type                           shift and go to state 42
    typevar                        shift and go to state 53
    var_declaration_gen            shift and go to state 44
    exp                            shift and go to state 55
    term                           shift and go to state 43
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 164

    (94) sentwhile -> WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias . CCBRACKET

    CCBRACKET       shift and go to state 169


state 165

    (95) sentdowhile -> DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS . cond CPARENTHESIS SEMICOLON
    (61) cond -> . type
    (62) cond -> . cond opcomparacion cond
    (63) cond -> . cond oplogicos cond
    (64) cond -> . OPARENTHESIS type CPARENTHESIS
    (65) cond -> . OPARENTHESIS cond CPARENTHESIS
    (66) type -> . typevar
    (67) type -> . var_declaration_gen
    (50) typevar -> . NUMBER
    (51) typevar -> . STRINGWR
    (52) typevar -> . STRINGGWR
    (53) typevar -> . TRUE
    (54) typevar -> . FALSE
    (68) var_declaration_gen -> . ID
    (69) var_declaration_gen -> . ID PLUSPLUS
    (70) var_declaration_gen -> . ID MINUSMINUS
    (71) var_declaration_gen -> . MINUSMINUS ID
    (72) var_declaration_gen -> . PLUSPLUS ID
    (73) var_declaration_gen -> . typevar
    (74) var_declaration_gen -> . exp
    (32) exp -> . expsimple opcomparacion expsimple
    (33) exp -> . OPARENTHESIS expsimple opcomparacion expsimple CPARENTHESIS
    (34) exp -> . expsimple
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (44) term -> . term opmult factor
    (45) term -> . factor
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    OPARENTHESIS    shift and go to state 54
    NUMBER          shift and go to state 35
    STRINGWR        shift and go to state 36
    STRINGGWR       shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 46
    MINUSMINUS      shift and go to state 48
    PLUSPLUS        shift and go to state 47
    NAMEFUNCTION    shift and go to state 15

    cond                           shift and go to state 170
    type                           shift and go to state 42
    typevar                        shift and go to state 53
    var_declaration_gen            shift and go to state 44
    exp                            shift and go to state 55
    expsimple                      shift and go to state 40
    term                           shift and go to state 43
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 166

    (22) genif -> OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .

    ELSE            reduce using rule 22 (genif -> OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    ID              reduce using rule 22 (genif -> OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    NAMEFUNCTION    reduce using rule 22 (genif -> OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    IF              reduce using rule 22 (genif -> OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    ECHO            reduce using rule 22 (genif -> OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    FUNCTION        reduce using rule 22 (genif -> OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    RETURN          reduce using rule 22 (genif -> OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    FOR             reduce using rule 22 (genif -> OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    WHILE           reduce using rule 22 (genif -> OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    DO              reduce using rule 22 (genif -> OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    PHPCLOSING      reduce using rule 22 (genif -> OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    CCBRACKET       reduce using rule 22 (genif -> OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)


state 167

    (88) sentfunc -> FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias . CCBRACKET

    CCBRACKET       shift and go to state 171


state 168

    (91) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond . SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (92) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond . SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (93) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond . SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (62) cond -> cond . opcomparacion cond
    (63) cond -> cond . oplogicos cond
    (35) opcomparacion -> . EQUALE
    (36) opcomparacion -> . DEQUAL
    (37) opcomparacion -> . IDENTIC
    (38) opcomparacion -> . GREAT
    (39) opcomparacion -> . GREATE
    (40) opcomparacion -> . LESS
    (41) opcomparacion -> . LESSE
    (28) oplogicos -> . AND
    (29) oplogicos -> . OR
    (30) oplogicos -> . XOR
    (31) oplogicos -> . NOT

    SEMICOLON       shift and go to state 172
    EQUALE          shift and go to state 81
    DEQUAL          shift and go to state 82
    IDENTIC         shift and go to state 83
    GREAT           shift and go to state 84
    GREATE          shift and go to state 85
    LESS            shift and go to state 86
    LESSE           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    XOR             shift and go to state 90
    NOT             shift and go to state 91

    opcomparacion                  shift and go to state 79
    oplogicos                      shift and go to state 80

state 169

    (94) sentwhile -> WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .

    ID              reduce using rule 94 (sentwhile -> WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    NAMEFUNCTION    reduce using rule 94 (sentwhile -> WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    IF              reduce using rule 94 (sentwhile -> WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    ECHO            reduce using rule 94 (sentwhile -> WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    FUNCTION        reduce using rule 94 (sentwhile -> WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    RETURN          reduce using rule 94 (sentwhile -> WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    FOR             reduce using rule 94 (sentwhile -> WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    WHILE           reduce using rule 94 (sentwhile -> WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    DO              reduce using rule 94 (sentwhile -> WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    PHPCLOSING      reduce using rule 94 (sentwhile -> WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    CCBRACKET       reduce using rule 94 (sentwhile -> WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)


state 170

    (95) sentdowhile -> DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond . CPARENTHESIS SEMICOLON
    (62) cond -> cond . opcomparacion cond
    (63) cond -> cond . oplogicos cond
    (35) opcomparacion -> . EQUALE
    (36) opcomparacion -> . DEQUAL
    (37) opcomparacion -> . IDENTIC
    (38) opcomparacion -> . GREAT
    (39) opcomparacion -> . GREATE
    (40) opcomparacion -> . LESS
    (41) opcomparacion -> . LESSE
    (28) oplogicos -> . AND
    (29) oplogicos -> . OR
    (30) oplogicos -> . XOR
    (31) oplogicos -> . NOT

    CPARENTHESIS    shift and go to state 173
    EQUALE          shift and go to state 81
    DEQUAL          shift and go to state 82
    IDENTIC         shift and go to state 83
    GREAT           shift and go to state 84
    GREATE          shift and go to state 85
    LESS            shift and go to state 86
    LESSE           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    XOR             shift and go to state 90
    NOT             shift and go to state 91

    opcomparacion                  shift and go to state 79
    oplogicos                      shift and go to state 80

state 171

    (88) sentfunc -> FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .

    ID              reduce using rule 88 (sentfunc -> FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    NAMEFUNCTION    reduce using rule 88 (sentfunc -> FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    IF              reduce using rule 88 (sentfunc -> FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    ECHO            reduce using rule 88 (sentfunc -> FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    FUNCTION        reduce using rule 88 (sentfunc -> FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    RETURN          reduce using rule 88 (sentfunc -> FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    FOR             reduce using rule 88 (sentfunc -> FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    WHILE           reduce using rule 88 (sentfunc -> FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    DO              reduce using rule 88 (sentfunc -> FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    PHPCLOSING      reduce using rule 88 (sentfunc -> FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    CCBRACKET       reduce using rule 88 (sentfunc -> FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)


state 172

    (91) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON . expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (92) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON . ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (93) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON . ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (42) expsimple -> . expsimple opsuma term
    (43) expsimple -> . term
    (44) term -> . term opmult factor
    (45) term -> . factor
    (46) factor -> . NUMBER
    (47) factor -> . ID
    (48) factor -> . call_function
    (49) factor -> . OPARENTHESIS expsimple CPARENTHESIS
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS

    ID              shift and go to state 174
    NUMBER          shift and go to state 62
    OPARENTHESIS    shift and go to state 116
    NAMEFUNCTION    shift and go to state 15

    expsimple                      shift and go to state 175
    term                           shift and go to state 43
    factor                         shift and go to state 45
    call_function                  shift and go to state 49

state 173

    (95) sentdowhile -> DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 176


state 174

    (92) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID . PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (93) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID . MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (47) factor -> ID .

    PLUSPLUS        shift and go to state 177
    MINUSMINUS      shift and go to state 178
    TIMES           reduce using rule 47 (factor -> ID .)
    SLASH           reduce using rule 47 (factor -> ID .)
    PERCENTAGE      reduce using rule 47 (factor -> ID .)
    POW             reduce using rule 47 (factor -> ID .)
    CPARENTHESIS    reduce using rule 47 (factor -> ID .)
    PLUS            reduce using rule 47 (factor -> ID .)
    SCORE           reduce using rule 47 (factor -> ID .)


state 175

    (91) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple . CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (42) expsimple -> expsimple . opsuma term
    (55) opsuma -> . PLUS
    (56) opsuma -> . SCORE

    CPARENTHESIS    shift and go to state 179
    PLUS            shift and go to state 94
    SCORE           shift and go to state 95

    opsuma                         shift and go to state 93

state 176

    (95) sentdowhile -> DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON .

    ID              reduce using rule 95 (sentdowhile -> DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON .)
    NAMEFUNCTION    reduce using rule 95 (sentdowhile -> DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON .)
    IF              reduce using rule 95 (sentdowhile -> DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON .)
    ECHO            reduce using rule 95 (sentdowhile -> DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 95 (sentdowhile -> DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 95 (sentdowhile -> DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON .)
    FOR             reduce using rule 95 (sentdowhile -> DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 95 (sentdowhile -> DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON .)
    DO              reduce using rule 95 (sentdowhile -> DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON .)
    PHPCLOSING      reduce using rule 95 (sentdowhile -> DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON .)
    CCBRACKET       reduce using rule 95 (sentdowhile -> DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON .)


state 177

    (92) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS . CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET

    CPARENTHESIS    shift and go to state 180


state 178

    (93) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS . CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET

    CPARENTHESIS    shift and go to state 181


state 179

    (91) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS . OCBRACKET declaracion_sentencias CCBRACKET

    OCBRACKET       shift and go to state 182


state 180

    (92) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS . OCBRACKET declaracion_sentencias CCBRACKET

    OCBRACKET       shift and go to state 183


state 181

    (93) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS . OCBRACKET declaracion_sentencias CCBRACKET

    OCBRACKET       shift and go to state 184


state 182

    (91) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET . declaracion_sentencias CCBRACKET
    (2) declaracion_sentencias -> . sentencias declaracion_sentencias
    (3) declaracion_sentencias -> . sentencias
    (4) sentencias -> . sentassign
    (5) sentencias -> . call_function SEMICOLON
    (6) sentencias -> . sentif
    (7) sentencias -> . sentecho
    (8) sentencias -> . sentfunc
    (9) sentencias -> . sentreturn
    (10) sentencias -> . sentfor
    (11) sentencias -> . sentwhile
    (12) sentencias -> . sentdowhile
    (23) sentassign -> . ID EQUAL exp SEMICOLON
    (24) sentassign -> . ID PLUSPLUS SEMICOLON
    (25) sentassign -> . ID MINUSMINUS SEMICOLON
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS
    (18) sentif -> . IF genif auxsentif
    (15) sentecho -> . ECHO typevar SEMICOLON
    (16) sentecho -> . ECHO exp SEMICOLON
    (17) sentecho -> . ECHO cond SEMICOLON
    (88) sentfunc -> . FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (13) sentreturn -> . RETURN type SEMICOLON
    (14) sentreturn -> . RETURN cond SEMICOLON
    (91) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (92) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (93) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (94) sentwhile -> . WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (95) sentdowhile -> . DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON

    ID              shift and go to state 14
    NAMEFUNCTION    shift and go to state 15
    IF              shift and go to state 16
    ECHO            shift and go to state 17
    FUNCTION        shift and go to state 18
    RETURN          shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22

    declaracion_sentencias         shift and go to state 185
    sentencias                     shift and go to state 4
    sentassign                     shift and go to state 5
    call_function                  shift and go to state 6
    sentif                         shift and go to state 7
    sentecho                       shift and go to state 8
    sentfunc                       shift and go to state 9
    sentreturn                     shift and go to state 10
    sentfor                        shift and go to state 11
    sentwhile                      shift and go to state 12
    sentdowhile                    shift and go to state 13

state 183

    (92) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET . declaracion_sentencias CCBRACKET
    (2) declaracion_sentencias -> . sentencias declaracion_sentencias
    (3) declaracion_sentencias -> . sentencias
    (4) sentencias -> . sentassign
    (5) sentencias -> . call_function SEMICOLON
    (6) sentencias -> . sentif
    (7) sentencias -> . sentecho
    (8) sentencias -> . sentfunc
    (9) sentencias -> . sentreturn
    (10) sentencias -> . sentfor
    (11) sentencias -> . sentwhile
    (12) sentencias -> . sentdowhile
    (23) sentassign -> . ID EQUAL exp SEMICOLON
    (24) sentassign -> . ID PLUSPLUS SEMICOLON
    (25) sentassign -> . ID MINUSMINUS SEMICOLON
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS
    (18) sentif -> . IF genif auxsentif
    (15) sentecho -> . ECHO typevar SEMICOLON
    (16) sentecho -> . ECHO exp SEMICOLON
    (17) sentecho -> . ECHO cond SEMICOLON
    (88) sentfunc -> . FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (13) sentreturn -> . RETURN type SEMICOLON
    (14) sentreturn -> . RETURN cond SEMICOLON
    (91) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (92) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (93) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (94) sentwhile -> . WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (95) sentdowhile -> . DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON

    ID              shift and go to state 14
    NAMEFUNCTION    shift and go to state 15
    IF              shift and go to state 16
    ECHO            shift and go to state 17
    FUNCTION        shift and go to state 18
    RETURN          shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22

    declaracion_sentencias         shift and go to state 186
    sentencias                     shift and go to state 4
    sentassign                     shift and go to state 5
    call_function                  shift and go to state 6
    sentif                         shift and go to state 7
    sentecho                       shift and go to state 8
    sentfunc                       shift and go to state 9
    sentreturn                     shift and go to state 10
    sentfor                        shift and go to state 11
    sentwhile                      shift and go to state 12
    sentdowhile                    shift and go to state 13

state 184

    (93) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET . declaracion_sentencias CCBRACKET
    (2) declaracion_sentencias -> . sentencias declaracion_sentencias
    (3) declaracion_sentencias -> . sentencias
    (4) sentencias -> . sentassign
    (5) sentencias -> . call_function SEMICOLON
    (6) sentencias -> . sentif
    (7) sentencias -> . sentecho
    (8) sentencias -> . sentfunc
    (9) sentencias -> . sentreturn
    (10) sentencias -> . sentfor
    (11) sentencias -> . sentwhile
    (12) sentencias -> . sentdowhile
    (23) sentassign -> . ID EQUAL exp SEMICOLON
    (24) sentassign -> . ID PLUSPLUS SEMICOLON
    (25) sentassign -> . ID MINUSMINUS SEMICOLON
    (89) call_function -> . NAMEFUNCTION
    (90) call_function -> . NAMEFUNCTION OPARENTHESIS arg CPARENTHESIS
    (18) sentif -> . IF genif auxsentif
    (15) sentecho -> . ECHO typevar SEMICOLON
    (16) sentecho -> . ECHO exp SEMICOLON
    (17) sentecho -> . ECHO cond SEMICOLON
    (88) sentfunc -> . FUNCTION NAMEFUNCTION OPARENTHESIS argfunc CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (13) sentreturn -> . RETURN type SEMICOLON
    (14) sentreturn -> . RETURN cond SEMICOLON
    (91) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (92) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (93) sentfor -> . FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (94) sentwhile -> . WHILE OPARENTHESIS cond CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET
    (95) sentdowhile -> . DO OCBRACKET declaracion_sentencias CCBRACKET WHILE OPARENTHESIS cond CPARENTHESIS SEMICOLON

    ID              shift and go to state 14
    NAMEFUNCTION    shift and go to state 15
    IF              shift and go to state 16
    ECHO            shift and go to state 17
    FUNCTION        shift and go to state 18
    RETURN          shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22

    declaracion_sentencias         shift and go to state 187
    sentencias                     shift and go to state 4
    sentassign                     shift and go to state 5
    call_function                  shift and go to state 6
    sentif                         shift and go to state 7
    sentecho                       shift and go to state 8
    sentfunc                       shift and go to state 9
    sentreturn                     shift and go to state 10
    sentfor                        shift and go to state 11
    sentwhile                      shift and go to state 12
    sentdowhile                    shift and go to state 13

state 185

    (91) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias . CCBRACKET

    CCBRACKET       shift and go to state 188


state 186

    (92) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias . CCBRACKET

    CCBRACKET       shift and go to state 189


state 187

    (93) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias . CCBRACKET

    CCBRACKET       shift and go to state 190


state 188

    (91) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .

    ID              reduce using rule 91 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    NAMEFUNCTION    reduce using rule 91 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    IF              reduce using rule 91 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    ECHO            reduce using rule 91 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    FUNCTION        reduce using rule 91 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    RETURN          reduce using rule 91 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    FOR             reduce using rule 91 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    WHILE           reduce using rule 91 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    DO              reduce using rule 91 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    PHPCLOSING      reduce using rule 91 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    CCBRACKET       reduce using rule 91 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON expsimple CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)


state 189

    (92) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .

    ID              reduce using rule 92 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    NAMEFUNCTION    reduce using rule 92 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    IF              reduce using rule 92 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    ECHO            reduce using rule 92 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    FUNCTION        reduce using rule 92 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    RETURN          reduce using rule 92 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    FOR             reduce using rule 92 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    WHILE           reduce using rule 92 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    DO              reduce using rule 92 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    PHPCLOSING      reduce using rule 92 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    CCBRACKET       reduce using rule 92 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID PLUSPLUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)


state 190

    (93) sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .

    ID              reduce using rule 93 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    NAMEFUNCTION    reduce using rule 93 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    IF              reduce using rule 93 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    ECHO            reduce using rule 93 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    FUNCTION        reduce using rule 93 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    RETURN          reduce using rule 93 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    FOR             reduce using rule 93 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    WHILE           reduce using rule 93 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    DO              reduce using rule 93 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    PHPCLOSING      reduce using rule 93 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)
    CCBRACKET       reduce using rule 93 (sentfor -> FOR OPARENTHESIS ID EQUAL expsimple SEMICOLON cond SEMICOLON ID MINUSMINUS CPARENTHESIS OCBRACKET declaracion_sentencias CCBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 32 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 32 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 33 resolved as shift
WARNING: shift/reduce conflict for EQUALE in state 40 resolved as shift
WARNING: shift/reduce conflict for DEQUAL in state 40 resolved as shift
WARNING: shift/reduce conflict for IDENTIC in state 40 resolved as shift
WARNING: shift/reduce conflict for GREAT in state 40 resolved as shift
WARNING: shift/reduce conflict for GREATE in state 40 resolved as shift
WARNING: shift/reduce conflict for LESS in state 40 resolved as shift
WARNING: shift/reduce conflict for LESSE in state 40 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 51 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 66 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 69 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 70 resolved as shift
WARNING: shift/reduce conflict for CPARENTHESIS in state 97 resolved as shift
WARNING: shift/reduce conflict for EQUALE in state 97 resolved as shift
WARNING: shift/reduce conflict for DEQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for IDENTIC in state 97 resolved as shift
WARNING: shift/reduce conflict for GREAT in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATE in state 97 resolved as shift
WARNING: shift/reduce conflict for LESS in state 97 resolved as shift
WARNING: shift/reduce conflict for LESSE in state 97 resolved as shift
WARNING: shift/reduce conflict for CPARENTHESIS in state 98 resolved as shift
WARNING: shift/reduce conflict for EQUALE in state 126 resolved as shift
WARNING: shift/reduce conflict for DEQUAL in state 126 resolved as shift
WARNING: shift/reduce conflict for IDENTIC in state 126 resolved as shift
WARNING: shift/reduce conflict for GREAT in state 126 resolved as shift
WARNING: shift/reduce conflict for GREATE in state 126 resolved as shift
WARNING: shift/reduce conflict for LESS in state 126 resolved as shift
WARNING: shift/reduce conflict for LESSE in state 126 resolved as shift
WARNING: shift/reduce conflict for AND in state 126 resolved as shift
WARNING: shift/reduce conflict for OR in state 126 resolved as shift
WARNING: shift/reduce conflict for XOR in state 126 resolved as shift
WARNING: shift/reduce conflict for NOT in state 126 resolved as shift
WARNING: shift/reduce conflict for EQUALE in state 127 resolved as shift
WARNING: shift/reduce conflict for DEQUAL in state 127 resolved as shift
WARNING: shift/reduce conflict for IDENTIC in state 127 resolved as shift
WARNING: shift/reduce conflict for GREAT in state 127 resolved as shift
WARNING: shift/reduce conflict for GREATE in state 127 resolved as shift
WARNING: shift/reduce conflict for LESS in state 127 resolved as shift
WARNING: shift/reduce conflict for LESSE in state 127 resolved as shift
WARNING: shift/reduce conflict for AND in state 127 resolved as shift
WARNING: shift/reduce conflict for OR in state 127 resolved as shift
WARNING: shift/reduce conflict for XOR in state 127 resolved as shift
WARNING: shift/reduce conflict for NOT in state 127 resolved as shift
WARNING: shift/reduce conflict for CPARENTHESIS in state 130 resolved as shift
WARNING: shift/reduce conflict for EQUALE in state 130 resolved as shift
WARNING: shift/reduce conflict for DEQUAL in state 130 resolved as shift
WARNING: shift/reduce conflict for IDENTIC in state 130 resolved as shift
WARNING: shift/reduce conflict for GREAT in state 130 resolved as shift
WARNING: shift/reduce conflict for GREATE in state 130 resolved as shift
WARNING: shift/reduce conflict for LESS in state 130 resolved as shift
WARNING: shift/reduce conflict for LESSE in state 130 resolved as shift
WARNING: shift/reduce conflict for CPARENTHESIS in state 150 resolved as shift
WARNING: reduce/reduce conflict in state 32 resolved using rule (type -> typevar)
WARNING: rejected rule (var_declaration_gen -> typevar) in state 32
WARNING: reduce/reduce conflict in state 35 resolved using rule (factor -> NUMBER)
WARNING: rejected rule (typevar -> NUMBER) in state 35
WARNING: reduce/reduce conflict in state 46 resolved using rule (factor -> ID)
WARNING: rejected rule (var_declaration_gen -> ID) in state 46
WARNING: reduce/reduce conflict in state 53 resolved using rule (type -> typevar)
WARNING: rejected rule (var_declaration_gen -> typevar) in state 53
WARNING: reduce/reduce conflict in state 66 resolved using rule (type -> var_declaration_gen)
WARNING: rejected rule (arg -> var_declaration_gen) in state 66
WARNING: reduce/reduce conflict in state 68 resolved using rule (exp -> expsimple)
WARNING: rejected rule (arg -> expsimple) in state 68
WARNING: reduce/reduce conflict in state 69 resolved using rule (typevar -> STRINGWR)
WARNING: rejected rule (arg -> STRINGWR) in state 69
WARNING: reduce/reduce conflict in state 70 resolved using rule (typevar -> STRINGGWR)
WARNING: rejected rule (arg -> STRINGGWR) in state 70
WARNING: reduce/reduce conflict in state 71 resolved using rule (type -> typevar)
WARNING: rejected rule (var_declaration_gen -> typevar) in state 71
WARNING: Rule (var_declaration_gen -> typevar) is never reduced
WARNING: Rule (typevar -> NUMBER) is never reduced
WARNING: Rule (var_declaration_gen -> ID) is never reduced
WARNING: Rule (arg -> var_declaration_gen) is never reduced
WARNING: Rule (arg -> expsimple) is never reduced
WARNING: Rule (arg -> STRINGWR) is never reduced
WARNING: Rule (arg -> STRINGGWR) is never reduced
